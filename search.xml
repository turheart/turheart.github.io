<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo-Next主题美化</title>
    <url>/2022/08/03/hexo-Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文讲述如何对搭建的hexo博客美化。hexo博客默认主题是landscape，hexo支持很多不同的主题，本文主要介绍Next主题的美化。</p>
<span id="more"></span>



<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>文章中的站点配置文件是博客根目录下的_config.yml文件，主题配置文件是\themes\next中的_config.yml文件。</li>
<li>建议在文章中的单个部分完成后，本地部署成功后再上传到GitHub。具体操作如下:<br>博客根目录下打开Git Bash，输入如下命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后将Git Bash窗口最小化(不是关闭)，在浏览器地址栏输入：localhost:4000，进入查看是否含有添加的效果。如果本地部署成功，通过依次输入如下命令部署到GitHub：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>在部署到GitHub后可能需要重新登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名，点击save保存。</li>
</ul>
<h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><h2 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h2><ul>
<li>进入博客根目录，打开Git Bash，输入如下命名:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ul>
<li>打开站点配置文件，将landscape改为hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="选择主题样式"><a href="#选择主题样式" class="headerlink" title="选择主题样式"></a>选择主题样式</h2><p>Next提供了四种主题风格scheme，可以在主题配置文件中找到如下内容配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>通过删减scheme前面的#号进行修改，这里我采用的Gemini。</p>
<h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><h2 id="更改博客favicon图标"><a href="#更改博客favicon图标" class="headerlink" title="更改博客favicon图标"></a>更改博客favicon图标</h2><p>博客favicon图标获取网址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn</a>, 选择你喜欢的图标，下载后放置在&#x2F;themes&#x2F;next&#x2F;sources&#x2F;images目录下，将图标名称改为icon.png，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/icon.png</span><br><span class="line">  medium: /images/icon.png</span><br><span class="line">  apple_touch_icon: /images/128x128.png</span><br><span class="line">  safari_pinned_tab: /images/logo2.svg</span><br></pre></td></tr></table></figure>

<h2 id="更改站点属性-作者，语言等"><a href="#更改站点属性-作者，语言等" class="headerlink" title="更改站点属性(作者，语言等)"></a>更改站点属性(作者，语言等)</h2><p>打开站点配置文件，修改如下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site:</span><br><span class="line">title: 房东的猫 #网站标题（博客站点名字）。</span><br><span class="line">subtitle: 人间理想 #网站副标题，显示在标题下方</span><br><span class="line">description: 偏绿少年 #个人描述，类似签名</span><br><span class="line">keywords: </span><br><span class="line">author: 房东的猫 #博客文章作者</span><br><span class="line">language: zh-CN  #设置博客站点语言为中文</span><br><span class="line">timezone:  #设置时区，默认当前电脑时区</span><br></pre></td></tr></table></figure>

<h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>打开主题配置文件，修改如下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<p>删减#号即可添加相关内容。设置完菜单需要新建页面，以标签为例介绍。</p>
<p>添加标签页面:</p>
<ul>
<li>进入博客根目录，打开Git Bash，输入如下命令:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<ul>
<li>打开根目录下的source文件夹，打开新生成的tags文件夹，打开生成的index.md文件。修改其中的内容为如下内容:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-5-20 12:40:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="增加搜索功能"><a href="#增加搜索功能" class="headerlink" title="增加搜索功能"></a>增加搜索功能</h3><ul>
<li>安装插件<br>打开博客根目录，打开Git Bash，输入如下命名:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ul>
<li>打开站点配置文件添加以下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>打开主题配置文件找到local_search改为true：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><h3 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || fab fa-github</span><br><span class="line">  E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>

<p>Next 默认给出了一些模板，我们只要删减前面的#号并将其中的链接改为自己的链接就可以了，当然你也可以自己定义，格式为:</p>
<p>名字: 链接 || 图标名，图标必须是FontAwesome网站中能找到的图标名。</p>
<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><ul>
<li>选取你想要的头像，改名为author.jpg放在\themes\next\source\images中。</li>
<li>打开主题配置文件，找到并修改如下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  # In theme directory (source/images): /images/avatar.gif</span><br><span class="line">  # In site directory (source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/author.jpg #头像文件目录</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true #设置鼠标放在头像上面是否旋转</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true #头像是否设为圆形</span><br></pre></td></tr></table></figure>

<h2 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h2><h3 id="顶部加载条"><a href="#顶部加载条" class="headerlink" title="顶部加载条"></a>顶部加载条</h3><p>打开主题配置文件，找到pace改为true，并从上面提供的样式中选择一种填入pace_theme中即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>

<h3 id="浏览文章时显示浏览进度"><a href="#浏览文章时显示浏览进度" class="headerlink" title="浏览文章时显示浏览进度"></a>浏览文章时显示浏览进度</h3><p>主题设置文件查找scrollpercent修改为true:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h3 id="鼠标点击出现小红心"><a href="#鼠标点击出现小红心" class="headerlink" title="鼠标点击出现小红心"></a>鼠标点击出现小红心</h3><ul>
<li>themes&#x2F;next&#x2F;source&#x2F;js&#x2F;下新建clicklove.js，内容如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改themes&#x2F;next&#x2F;layout&#x2F;_layout.swig 文件末尾添加:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&#123;% if theme.clicklove %&#125;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>确定无误后在主题配置文件末尾添加：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示页面红心</span><br><span class="line">clicklove: true</span><br></pre></td></tr></table></figure>

<h3 id="修改tag图标"><a href="#修改tag图标" class="headerlink" title="修改tag图标"></a>修改tag图标</h3><p>打开主题配置文件，找到并修改以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span><br><span class="line">tag_icon: true</span><br></pre></td></tr></table></figure>

<h3 id="文章底部布局"><a href="#文章底部布局" class="headerlink" title="文章底部布局"></a>文章底部布局</h3><p>按照如下注释自行修改:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 博客底部布局</span><br><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2015 #设置建站时间，不设置则默认为当前年份</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span><br><span class="line">    # `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">    name: heart  # 作者图标，默认为author，自定义的图标需来自fontawesome中</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: true  # 图标是否闪动</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#808080&quot; # 图标颜色</span><br><span class="line"></span><br><span class="line">  # If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="line">  copyright: 房东的猫 #设置底部显示的名字，默认为站点配置文件的author名字</span><br><span class="line"></span><br><span class="line">  powered:</span><br><span class="line">    # Hexo link (Powered by Hexo).</span><br><span class="line">    enable: false # 是否显示 Powered By Hexo</span><br><span class="line">    # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">    version: false # 是否显示 Hexo 版本</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false # 是否显示主题信息</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false # 是否显示主题版本</span><br><span class="line"></span><br><span class="line">  # Beian ICP information for Chinese users. See: http://www.beian.miit.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false # 是否显示网站备案信息</span><br><span class="line">    icp:</span><br></pre></td></tr></table></figure>

<h3 id="添加宠物看版娘"><a href="#添加宠物看版娘" class="headerlink" title="添加宠物看版娘"></a>添加宠物看版娘</h3><ul>
<li>安装插件</li>
</ul>
<p>博客根目录下打开Git Bash，输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<ul>
<li>下载相应模型<br>在Git Bash输入如下命令，下载相应模型，将packagename更换成模型名称即可，更多模型可访问：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a> 。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure>

<ul>
<li>打开站点配置文件，添加如下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: packagename  </span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150 </span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: false   </span><br><span class="line">  rect:</span><br><span class="line">    opacity:0.7</span><br></pre></td></tr></table></figure>

<h2 id="文章内容相关设置"><a href="#文章内容相关设置" class="headerlink" title="文章内容相关设置"></a>文章内容相关设置</h2><h3 id="显示全文"><a href="#显示全文" class="headerlink" title="显示全文"></a>显示全文</h3><ul>
<li>自动形成摘要</li>
</ul>
<p>打开主题配置文件，修改内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true  </span><br><span class="line">  length: 150 # 截取的内容长度</span><br><span class="line">  </span><br><span class="line"># Read more button</span><br><span class="line"># If true, the read more button would be displayed in excerpt section.</span><br><span class="line">read_more_btn: true # 是否显示阅读全文按钮</span><br></pre></td></tr></table></figure>

<ul>
<li>手动生成摘要</li>
</ul>
<p>在你写的文章想要截取的内容之后添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="代码块设置"><a href="#代码块设置" class="headerlink" title="代码块设置"></a>代码块设置</h3><p>打开主题配置文件按照如下注释内容自行修改:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">  # 代码块主题, 可选的值为 normal; night; night eighties; night blue; night bright</span><br><span class="line">  highlight_theme: night</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  # 显示复制按钮</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result.</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: # 按钮显示格式</span><br></pre></td></tr></table></figure>

<h3 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h3><p>打开hexo配置文件找到并修改如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://example.com</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件找到并修改如下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span><br><span class="line"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="line"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<h3 id="添加博客字数和阅读时间统计功能"><a href="#添加博客字数和阅读时间统计功能" class="headerlink" title="添加博客字数和阅读时间统计功能"></a>添加博客字数和阅读时间统计功能</h3><ul>
<li>安装插件</li>
</ul>
<p>在hexo根目录下打开Git Bash，输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<ul>
<li>站点配置文件添加如下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true </span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>

<ul>
<li>主题配置文件找到并修改如下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>

<h3 id="本文结束标记"><a href="#本文结束标记" class="headerlink" title="本文结束标记"></a>本文结束标记</h3><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>其次打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer 之前添加代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>然后打开主题配置文件（<code>_config.yml</code>)，在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>

<p>原作者：</p>
<p><a href="https://www.fangdongdemao.com/">https://www.fangdongdemao.com/</a></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/2022/08/03/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要讲述Windows系统下hexo博客的搭建</p>
<span id="more"></span>



<h1 id="hexo博客的搭建"><a href="#hexo博客的搭建" class="headerlink" title="hexo博客的搭建"></a>hexo博客的搭建</h1><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>下载地址: <a href="https://nodejs.org/">https://nodejs.org</a>, 选择长期支持版(LTS),小白式安装。</p>
<p>为确保安装成功可以在cmd命令行工具(win+R输入cmd回车)依次输入如下命令验证:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>若显示版本号说明安装成功</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载地址: <a href="https://git-scm.com/">https://git-scm.com</a>, 由于官网过于慢,不建议官网下载,推荐在淘包镜像下载: <a href="https://npm.taobao.org/mirrors/git-for-windows%E3%80%82">https://npm.taobao.org/mirrors/git-for-windows。</a> 同样小白式安装。若右击屏幕空白处含有如下内容说明安装成功:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git GUI here</span><br><span class="line">Git BASH here</span><br></pre></td></tr></table></figure>

<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><h3 id="设置user-name和user-email配置信息，鼠标右击打开Git-Bash-Here依次输入如下命令"><a href="#设置user-name和user-email配置信息，鼠标右击打开Git-Bash-Here依次输入如下命令" class="headerlink" title="设置user.name和user.email配置信息，鼠标右击打开Git Bash Here依次输入如下命令:"></a>设置user.name和user.email配置信息，鼠标右击打开Git Bash Here依次输入如下命令:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourusername&quot;</span><br><span class="line">git config --global user.email &quot;youruseremail&quot;</span><br></pre></td></tr></table></figure>

<h3 id="生成ssh密钥文件"><a href="#生成ssh密钥文件" class="headerlink" title="生成ssh密钥文件:"></a>生成ssh密钥文件:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youruseremail&quot;</span><br></pre></td></tr></table></figure>

<p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将全部内容复制。打开GitHub_Settings_key页面，新建new SSH Key。Title为标题，任意填即可，将刚刚复制的id_rsa.pub中的内容粘贴到Key中，最后点击Add SSH Key。可以打开Git Bash，输入如下命令验证:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="配置hexo全局控制命令"><a href="#配置hexo全局控制命令" class="headerlink" title="配置hexo全局控制命令"></a>配置hexo全局控制命令</h3><p>在cmd命令行输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>准备一个目录存放博客的相关文件，例如我的是E盘，打开Git Bash，在Git Bash 输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>为了检测网站生成，依次输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>最小化Git Bash窗口(注意不要关闭)，然后打开浏览器输入<a href="http://localhost:4000，/">http://localhost:4000，</a></p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><h4 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h4><p>打开 Github官网 登陆你的Github账号，点击页面右上角的 + 、New repository新建一个repository仓库。填写仓库名，格式必须为:yourusername.github.io，然后点击Create repository。</p>
<h4 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h4><p>进入你建立的博客目录打开Git Bash，输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后打开站点的配置文件_config.yml，找到并修改一下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com//yourusername/yourusername.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h4><p>打开Git Bash，依次输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>完成后可以在浏览器打开:yourusername.github.io看到部署好的博客。</p>
<h3 id="绑定域名-非必须内容"><a href="#绑定域名-非必须内容" class="headerlink" title="绑定域名(非必须内容)"></a>绑定域名(非必须内容)</h3><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:yourusername.github.io，如果我们想使用自己的个性化域名，这就需要绑定域名。此处演示阿里云的域名绑定。</p>
<h4 id="个人域名获取"><a href="#个人域名获取" class="headerlink" title="个人域名获取"></a>个人域名获取</h4><p>域名购买网址:<a href="https://cn.aliyun.com/">https://cn.aliyun.com</a> (阿里云官网)</p>
<h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>打开阿里云管理控制台，找到你的个性化域名，进入解析，然后添加解析，包括三条解析记录。</p>
<p>第一条:记录类型:A，主机记录:@，记录值:192.30.252.154</p>
<p>第二条:记录类型:A，主机记录:@，记录值:192.30.252.153</p>
<p>第三条:记录类型:CNAME，主机记录:www，记录值:yourusername.github.io</p>
<p>然后登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名，点击save保存。</p>
<h4 id="hexo设置"><a href="#hexo设置" class="headerlink" title="hexo设置"></a>hexo设置</h4><p>进入本地博客文件夹，进入blog&#x2F;sorce目录下，新建一个记事本文件，输入你的域名即可。然后保存，命名为CNAME，注意保存成所有文件而不是txt文件</p>
<p>完成上述几步，进入blog目录，打开Git Bash，依次输入如下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后在浏览器地址栏输入你的个性化域名将会直接进入你的博客网站。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>在执行hexo d命令登录GitHub时，需要生成token替换密码登录。token生成步骤如下：<ol>
<li>登录github账号，点击头像选择Settings</li>
<li>在settings中选择Developer setting</li>
<li>选择Personal access tokens，然后选中生成令牌Generate new token</li>
<li>选择repo，最后生成令牌 Generate token</li>
</ol>
</li>
</ul>
<p>原作者：</p>
<p><a href="https://www.fangdongdemao.com/">https://www.fangdongdemao.com/</a></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql基础</title>
    <url>/2022/08/03/mysql%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h2><p><strong>今日目标：</strong></p>
<blockquote>
<ul>
<li>完成MySQL的安装及登陆基本操作</li>
<li>能通过SQL对数据库进行CRUD</li>
<li>能通过SQL对表进行CRUD</li>
<li>能通过SQL对数据进行CRUD</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="1，数据库相关概念"><a href="#1，数据库相关概念" class="headerlink" title="1，数据库相关概念"></a>1，数据库相关概念</h2><p>以前我们做系统，数据持久化的存储采用的是文件存储。存储到文件中可以达到系统关闭数据不会丢失的效果，当然文件存储也有它的弊端。</p>
<p>假设在文件中存储以下的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名	年龄	性别	住址</span><br><span class="line">张三	23	男	北京西三旗</span><br><span class="line">李四	24	女	北京西二旗</span><br><span class="line">王五	25	男	西安软件新城</span><br></pre></td></tr></table></figure>

<p>现要修改李四这条数据的性别数据改为男，我们现学习的IO技术可以通过将所有的数据读取到内存中，然后进行修改再存到该文件中。通过这种方式操作存在很大问题，现在只有三条数据，如果文件中存储1T的数据，那么就会发现内存根本就存储不了。</p>
<p>现需要既能持久化存储数据，也要能避免上述问题的技术使用在我们的系统中。数据库就是这样的一门技术。</p>
<h3 id="1-1-数据库"><a href="#1-1-数据库" class="headerlink" title="1.1  数据库"></a>1.1  数据库</h3><ul>
<li><p>&#x3D;&#x3D;存储和管理数据的仓库，数据是有组织的进行存储。&#x3D;&#x3D;</p>
</li>
<li><p>数据库英文名是 DataBase，简称DB。</p>
</li>
</ul>
<p>数据库就是将数据存储在硬盘上，可以达到持久化存储的效果。那又是如何解决上述问题的？使用数据库管理系统。</p>
<h3 id="1-2-数据库管理系统"><a href="#1-2-数据库管理系统" class="headerlink" title="1.2  数据库管理系统"></a>1.2  数据库管理系统</h3><ul>
<li>&#x3D;&#x3D;管理数据库的大型软件&#x3D;&#x3D;</li>
<li>英文：DataBase Management System，简称 DBMS</li>
</ul>
<p>在电脑上安装了数据库管理系统后，就可以通过数据库管理系统创建数据库来存储数据，也可以通过该系统对数据库中的数据进行数据的增删改查相关的操作。我们平时说的MySQL数据库其实是MySQL数据库管理系统。</p>
<img src="assets/image-20210721185923635.png" alt="image-20210721185923635" style="zoom:80%;" />

<p>通过上面的描述，大家应该已经知道了 <code>数据库管理系统</code> 和 <code>数据库</code> 的关系。那么有有哪些常见的数据库管理系统呢？</p>
<h3 id="1-3-常见的数据库管理系统"><a href="#1-3-常见的数据库管理系统" class="headerlink" title="1.3  常见的数据库管理系统"></a>1.3  常见的数据库管理系统</h3><img src="assets/image-20210721184354001.png" alt="image-20210721184354001" style="zoom:70%;" />

<p>接下来对上面列举的数据库管理系统进行简单的介绍：</p>
<ul>
<li>Oracle：收费的大型数据库，Oracle 公司的产品</li>
<li>&#x3D;&#x3D;MySQL&#x3D;&#x3D;： 开源免费的中小型数据库。后来 Sun公司收购了 MySQL，而 Sun 公司又被 Oracle 收购</li>
<li>SQL Server：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用</li>
<li>PostgreSQL：开源免费中小型的数据库</li>
<li>DB2：IBM 公司的大型收费数据库产品</li>
<li>SQLite：嵌入式的微型数据库。如：作为 Android 内置数据库</li>
<li>MariaDB：开源免费中小型的数据库</li>
</ul>
<p>我们课程上学习的是MySQL数据库管理系统，PostgreSQL在一些公司也有使用，此时大家肯定会想以后在公司中如果使用我们没有学习过程的PostgreSQL数据库管理系统怎么办？这点大家大可不必担心，如下图所示：</p>
<img src="assets/image-20210721185303106.png" alt="image-20210721185303106" style="zoom:80%;" />

<p>我们可以通过数据库管理系统操作数据库，对数据库中的数据进行增删改查操作，而怎么样让用户跟数据库管理系统打交道呢？就可以通过一门编程语言（SQL）来实现。</p>
<h3 id="1-4-SQL"><a href="#1-4-SQL" class="headerlink" title="1.4  SQL"></a>1.4  SQL</h3><ul>
<li>英文：Structured Query Language，简称 SQL，结构化查询语言</li>
<li>操作关系型数据库的编程语言</li>
<li>定义操作所有关系型数据库的统一标准，可以使用SQL操作所有的关系型数据库管理系统，以后工作中如果使用到了其他的数据库管理系统，也同样的使用SQL来操作。</li>
</ul>
<h2 id="2，MySQL"><a href="#2，MySQL" class="headerlink" title="2，MySQL"></a>2，MySQL</h2><h3 id="2-1-MySQL安装"><a href="#2-1-MySQL安装" class="headerlink" title="2.1  MySQL安装"></a>2.1  MySQL安装</h3><blockquote>
<p><strong>安装环境:Win10 64位</strong><br><strong>软件版本:MySQL 5.7.24 解压版</strong></p>
</blockquote>
<h4 id="2-1-1-下载"><a href="#2-1-1-下载" class="headerlink" title="2.1.1  下载"></a>2.1.1  下载</h4><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<p>点开上面的链接就能看到如下界面：</p>
<img src="assets/image-20210404200055449.png" alt="image-20210404200055449" style="zoom:80%;" />

<p>选择选择和自己<strong>系统位数</strong>相对应的版本点击右边的<code>Download</code>，此时会进到另一个页面，同样在接近页面底部的地方找到如下图所示的位置：</p>
<img src="https://img2018.cnblogs.com/blog/1556823/201812/1556823-20181220194715840-436169502.png" alt="img" style="zoom:80%;" />

<p>不用理会上面的登录和注册按钮，直接点击 <code>No thanks, just start my download.</code> 就可以下载。</p>
<p><img src="/assets/image-20201109134805641.png" alt="image-20201109134805641"></p>
<h4 id="2-1-2-安装-解压"><a href="#2-1-2-安装-解压" class="headerlink" title="2.1.2  安装(解压)"></a>2.1.2  安装(解压)</h4><p>下载完成后我们得到的是一个压缩包，将其解压，我们就可以得到MySQL 5.7.24的软件本体了(就是一个文件夹)，我们可以把它放在你想安装的位置。</p>
<hr>
<p><img src="/assets/image-20201109134948046.png" alt="image-20201109134948046"></p>
<h3 id="2-2-MySQL卸载"><a href="#2-2-MySQL卸载" class="headerlink" title="2.2  MySQL卸载"></a>2.2  MySQL卸载</h3><p>如果你想卸载MySQL，也很简单。</p>
<p>右键开始菜单，选择<code>命令提示符(管理员)</code>，打开黑框。</p>
<ol>
<li>敲入<code>net stop mysql</code>，回车。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>



<p><img src="/assets/1556823-20181220222924783-57600848.png" alt="img"></p>
<ol start="2">
<li>再敲入<code>mysqld -remove mysql</code>，回车。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld -remove mysql</span><br></pre></td></tr></table></figure>



<p><img src="/assets/1556823-20181220223025128-587235464.png" alt="img"></p>
<ol start="3">
<li>最后删除MySQL目录及相关的环境变量。</li>
</ol>
<p><strong>至此，MySQL卸载完成！</strong></p>
<h3 id="2-3-MySQL配置"><a href="#2-3-MySQL配置" class="headerlink" title="2.3  MySQL配置"></a>2.3  MySQL配置</h3><h4 id="2-3-1-添加环境变量"><a href="#2-3-1-添加环境变量" class="headerlink" title="2.3.1  添加环境变量"></a>2.3.1  添加环境变量</h4><blockquote>
<p>环境变量里面有很多选项，这里我们只用到<code>Path</code>这个参数。为什么在初始化的开始要添加环境变量呢？<br>在黑框(即CMD)中输入一个可执行程序的名字，Windows会先在环境变量中的<code>Path</code>所指的路径中寻找一遍，如果找到了就直接执行，没找到就在当前工作目录找，如果还没找到，就报错。我们添加环境变量的目的就是能够在任意一个黑框直接调用MySQL中的相关程序而不用总是修改工作目录，大大简化了操作。</p>
</blockquote>
<p>右键<code>此电脑</code>→<code>属性</code>，点击<code>高级系统设置</code></p>
<img src="assets/1556823-20181220220242472-524708778.png" alt="img" style="zoom:90%;" />

<p>点击<code>环境变量</code></p>
<img src="assets/1556823-20181220220359609-736422950.png" alt="img" style="zoom:90%;" />

<p>在<code>系统变量</code>中新建MYSQL_HOME</p>
<img src="assets/image-20201109140222488.png" alt="image-20201109140222488" style="zoom:80%;" />

<p>在<code>系统变量</code>中找到并<strong>双击</strong><code>Path</code></p>
<img src="assets/1556823-20181220220551145-1198958872.png" alt="img" style="zoom:80%;" />

<p>点击<code>新建</code></p>
<img src="assets/image-20201109135248104.png" alt="image-20201109135248104" style="zoom:80%;" />

<p>最后点击确定。</p>
<p><strong>如何验证是否添加成功？</strong></p>
<p>右键开始菜单(就是屏幕左下角)，选择<code>命令提示符(管理员)</code>，打开黑框，敲入<code>mysql</code>，回车。<br>如果提示<code>Can&#39;t connect to MySQL server on &#39;localhost&#39;</code>则证明添加成功；<br>如果提示<code>mysql不是内部或外部命令，也不是可运行的程序或批处理文件</code>则表示添加添加失败，请重新检查步骤并重试。</p>
<h4 id="2-3-2-新建配置文件"><a href="#2-3-2-新建配置文件" class="headerlink" title="2.3.2  新建配置文件"></a>2.3.2  新建配置文件</h4><p>新建一个文本文件，内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="attr">sql_mode</span>=<span class="string">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure>

<p>把上面的文本文件另存为，在保存类型里选<code>所有文件 (*.*)</code>，文件名叫<code>my.ini</code>，存放的路径为MySQL的<code>根目录</code>(例如我的是<code>D:\software\mysql-5.7.24-winx64</code>,根据自己的MySQL目录位置修改)。</p>
<p><img src="/assets/image-20201109142704951.png" alt="image-20201109142704951"></p>
<p><img src="/assets/image-20201109142737584.png" alt="image-20201109142737584"></p>
<p>上面代码意思就是配置数据库的默认编码集为utf-8和默认存储引擎为INNODB。</p>
<h4 id="2-3-3-初始化MySQL"><a href="#2-3-3-初始化MySQL" class="headerlink" title="2.3.3  初始化MySQL"></a>2.3.3  初始化MySQL</h4><p>在刚才的黑框中敲入<code>mysqld --initialize-insecure</code>，回车，稍微等待一会，如果出现没有出现报错信息(如下图)则证明data目录初始化没有问题，此时再查看MySQL目录下已经有data目录生成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20201109140955772.png" alt="image-20201109140955772"></p>
<p>tips：如果出现如下错误</p>
<p><img src="/assets/image-20201109135848054.png" alt="image-20201109135848054"></p>
<p>是由于权限不足导致的，去<code>C:\Windows\System32</code> 下以管理员方式运行 cmd.exe</p>
<p><img src="/assets/image-20201109140423691.png" alt="image-20201109140423691"></p>
<p><img src="/assets/image-20201109140001186.png" alt="image-20201109140001186"></p>
<h4 id="2-3-4-注册MySQL服务"><a href="#2-3-4-注册MySQL服务" class="headerlink" title="2.3.4  注册MySQL服务"></a>2.3.4  注册MySQL服务</h4><p>在黑框里敲入<code>mysqld -install</code>，回车。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure>



<p><img src="/assets/image-20201109141325810.png" alt="image-20201109141325810"></p>
<p>现在你的计算机上已经安装好了MySQL服务了。</p>
<p>MySQL服务器</p>
<h4 id="2-3-5-启动MySQL服务"><a href="#2-3-5-启动MySQL服务" class="headerlink" title="2.3.5  启动MySQL服务"></a>2.3.5  启动MySQL服务</h4><p>在黑框里敲入<code>net start mysql</code>，回车。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">net start mysql  <span class="comment">// 启动mysql服务</span></span><br><span class="line">    </span><br><span class="line">net stop mysql  <span class="comment">// 停止mysql服务</span></span><br></pre></td></tr></table></figure>



<p><img src="/assets/1556823-20181221093036851-1317238155.png" alt="img"></p>
<h4 id="2-3-6-修改默认账户密码"><a href="#2-3-6-修改默认账户密码" class="headerlink" title="2.3.6  修改默认账户密码"></a>2.3.6  修改默认账户密码</h4><p>在黑框里敲入<code>mysqladmin -u root password 1234</code>，这里的<code>1234</code>就是指默认管理员(即root账户)的密码，可以自行修改成你喜欢的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password 1234</span><br></pre></td></tr></table></figure>



<p><img src="/assets/1556823-20181221093251250-819416425.png" alt="img"></p>
<p><strong>至此，MySQL 5.7 解压版安装完毕！</strong></p>
<h3 id="2-4-MySQL登陆和退出"><a href="#2-4-MySQL登陆和退出" class="headerlink" title="2.4  MySQL登陆和退出"></a>2.4  MySQL登陆和退出</h3><h4 id="2-4-1-登陆"><a href="#2-4-1-登陆" class="headerlink" title="2.4.1  登陆"></a>2.4.1  登陆</h4><p>右键开始菜单，选择<code>命令提示符</code>，打开黑框。<br>在黑框中输入，<code>mysql -uroot -p1234</code>，回车，出现下图且左下角为<code>mysql&gt;</code>，则登录成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p1234</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1556823-20181220222422178-61579658.png" alt="img"></p>
<p><strong>到这里你就可以开始你的MySQL之旅了！</strong></p>
<p>登陆参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)</span><br></pre></td></tr></table></figure>



<h4 id="2-4-2-退出"><a href="#2-4-2-退出" class="headerlink" title="2.4.2  退出"></a>2.4.2  退出</h4><p>退出mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>



<h3 id="2-5-MySQL数据模型"><a href="#2-5-MySQL数据模型" class="headerlink" title="2.5  MySQL数据模型"></a>2.5  MySQL数据模型</h3><p><strong>关系型数据库：</strong></p>
<blockquote>
<p>关系型数据库是建立在关系模型基础上的数据库，简单说，关系型数据库是由多张能互相连接的 二维表 组成的数据库</p>
</blockquote>
<p>如下图，<code>订单信息表</code> 和 <code>客户信息表</code> 都是有行有列二维表我们将这样的称为关系型数据库。</p>
<p><img src="/assets/image-20210721205130231.png" alt="image-20210721205130231"></p>
<p>接下来看关系型数据库的优点：</p>
<ul>
<li>都是使用表结构，格式一致，易于维护。</li>
<li>使用通用的 SQL 语言操作，使用方便，可用于复杂查询。<ul>
<li>关系型数据库都可以通过SQL进行操作，所以使用方便。</li>
<li>复杂查询。现在需要查询001号订单数据，我们可以看到该订单是1号客户的订单，而1号订单是李聪这个客户。以后也可以在一张表中进行统计分析等操作。</li>
</ul>
</li>
<li>数据存储在磁盘中，安全。</li>
</ul>
<p><strong>数据模型：</strong></p>
<img src="assets/image-20210721212754568.png" alt="image-20210721212754568" style="zoom:70%;" />

<p>如上图，我们通过客户端可以通过数据库管理系统创建数据库，在数据库中创建表，在表中添加数据。创建的每一个数据库对应到磁盘上都是一个文件夹。比如可以通过SQL语句创建一个数据库（数据库名称为db1），语句如下。该语句咱们后面会学习。</p>
<img src="assets/image-20210721213349761.png" alt="image-20210721213349761" style="zoom:80%;" />



<p>我们可以在数据库安装目录下的data目录下看到多了一个 <code>db1</code> 的文件夹。所以，<strong>在MySQL中一个数据库对应到磁盘上的一个文件夹。</strong></p>
<p>而一个数据库下可以创建多张表，我们到MySQL中自带的mysql数据库的文件夹目录下：</p>
<img src="assets/image-20210721214029913.png" alt="image-20210721214029913" style="zoom:80%;" />

<p>而上图中右边的 <code>db.frm</code> 是表文件，<code>db.MYD</code> 是数据文件，通过这两个文件就可以查询到数据展示成二维表的效果。</p>
<p><strong>小结：</strong></p>
<ul>
<li>MySQL中可以创建多个数据库，每个数据库对应到磁盘上的一个文件夹</li>
<li>在每个数据库中可以创建多个表，每张都对应到磁盘上一个 frm 文件</li>
<li>每张表可以存储多条数据，数据会被存储到磁盘中  MYD 文件中</li>
</ul>
<h2 id="3，SQL概述"><a href="#3，SQL概述" class="headerlink" title="3，SQL概述"></a>3，SQL概述</h2><p>了解了数据模型后，接下来我们就学习SQL语句，通过SQL语句对数据库、表、数据进行增删改查操作。 </p>
<h3 id="3-1-SQL简介"><a href="#3-1-SQL简介" class="headerlink" title="3.1  SQL简介"></a>3.1  SQL简介</h3><ul>
<li>英文：Structured Query Language，简称 SQL</li>
<li>结构化查询语言，一门操作关系型数据库的编程语言</li>
<li>定义操作所有关系型数据库的统一标准</li>
<li>对于同一个需求，每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”</li>
</ul>
<h3 id="3-2-通用语法"><a href="#3-2-通用语法" class="headerlink" title="3.2  通用语法"></a>3.2  通用语法</h3><ul>
<li><p>SQL 语句可以单行或多行书写，以分号结尾。</p>
<img src="assets/image-20210721215223872.png" alt="image-20210721215223872" style="zoom:80%;" /> 

<p>如上，以分号结尾才是一个完整的sql语句。</p>
</li>
<li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p>
<p>同样的一条sql语句写成下图的样子，一样可以运行处结果。</p>
<img src="assets/image-20210721215328410.png" alt="image-20210721215328410" style="zoom:80%;" /> 
</li>
<li><p>注释</p>
<ul>
<li><p>单行注释: – 注释内容 或 #注释内容(MySQL 特有) </p>
<img src="assets/image-20210721215517293.png" alt="image-20210721215517293" style="zoom:80%;" /> 

<img src="assets/image-20210721215556885.png" alt="image-20210721215556885" style="zoom:80%;" /> 

<blockquote>
<p>注意：使用– 添加单行注释时，–后面一定要加空格，而#没有要求。</p>
</blockquote>
</li>
<li><p>多行注释: &#x2F;* 注释 *&#x2F;</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-3-SQL分类"><a href="#3-3-SQL分类" class="headerlink" title="3.3  SQL分类"></a>3.3  SQL分类</h3><ul>
<li><p>DDL(Data Definition Language) ： 数据定义语言，用来定义数据库对象：数据库，表，列等</p>
<p>DDL简单理解就是用来操作数据库，表等</p>
<img src="assets/image-20210721220032047.png" alt="image-20210721220032047" style="zoom:60%;" />
</li>
<li><p>DML(Data Manipulation Language) 数据操作语言，用来对数据库中表的数据进行增删改</p>
<p>DML简单理解就对表中数据进行增删改</p>
<img src="assets/image-20210721220132919.png" alt="image-20210721220132919" style="zoom:60%;" />
</li>
<li><p>DQL(Data Query Language) 数据查询语言，用来查询数据库中表的记录(数据)</p>
<p>DQL简单理解就是对数据进行查询操作。从数据库表中查询到我们想要的数据。</p>
</li>
<li><p>DCL(Data Control Language) 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</p>
<p>DML简单理解就是对数据库进行权限控制。比如我让某一个数据库表只能让某一个用户进行操作等。</p>
</li>
</ul>
<blockquote>
<p>注意： 以后我们最常操作的是 <code>DML</code> 和 <code>DQL</code>  ，因为我们开发中最常操作的就是数据。</p>
</blockquote>
<h2 id="4，DDL-操作数据库"><a href="#4，DDL-操作数据库" class="headerlink" title="4，DDL:操作数据库"></a>4，DDL:操作数据库</h2><p>我们先来学习DDL来操作数据库。而操作数据库主要就是对数据库的增删查操作。</p>
<h3 id="4-1-查询"><a href="#4-1-查询" class="headerlink" title="4.1  查询"></a>4.1  查询</h3><p>查询所有的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>

<p>运行上面语句效果如下：</p>
<img src="assets/image-20210721221107014.png" alt="image-20210721221107014" style="zoom:80%;" />

<p>上述查询到的是的这些数据库是mysql安装好自带的数据库，我们以后不要操作这些数据库。</p>
<h3 id="4-2-创建数据库"><a href="#4-2-创建数据库" class="headerlink" title="4.2  创建数据库"></a>4.2  创建数据库</h3><ul>
<li><strong>创建数据库</strong>：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<p>运行语句效果如下：</p>
<img src="assets/image-20210721223450755.png" alt="image-20210721223450755" style="zoom:80%;" />

<p>而在创建数据库的时候，我并不知道db1数据库有没有创建，直接再次创建名为db1的数据库就会出现错误。</p>
<img src="assets/image-20210721223745490.png" alt="image-20210721223745490" style="zoom:80%;" />

<p>为了避免上面的错误，在创建数据库的时候先做判断，如果不存在再创建。</p>
<ul>
<li><strong>创建数据库(判断，如果不存在则创建)</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure>

<p>运行语句效果如下：</p>
<img src="assets/image-20210721224056476.png" alt="image-20210721224056476" style="zoom:80%;" />

<p>从上面的效果可以看到虽然db1数据库已经存在，再创建db1也没有报错，而创建db2数据库则创建成功。</p>
<h3 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3  删除数据库"></a>4.3  删除数据库</h3><ul>
<li><strong>删除数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除数据库(判断，如果存在则删除)</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure>

<p>运行语句效果如下：</p>
<img src="assets/image-20210721224435251.png" alt="image-20210721224435251" style="zoom:80%;" />

<h3 id="4-4-使用数据库"><a href="#4-4-使用数据库" class="headerlink" title="4.4  使用数据库"></a>4.4  使用数据库</h3><p>数据库创建好了，要在数据库中创建表，得先明确在哪儿个数据库中操作，此时就需要使用数据库。</p>
<ul>
<li><strong>使用数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看当前使用的数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure>

<p>运行语句效果如下：</p>
<img src="assets/image-20210721224720841.png" alt="image-20210721224720841" style="zoom:80%;" />

<h2 id="5，DDL-操作表"><a href="#5，DDL-操作表" class="headerlink" title="5，DDL:操作表"></a>5，DDL:操作表</h2><p>操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。</p>
<h3 id="5-1-查询表"><a href="#5-1-查询表" class="headerlink" title="5.1  查询表"></a>5.1  查询表</h3><ul>
<li><strong>查询当前数据库下所有表名称</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>

<p>我们创建的数据库中没有任何表，因此我们进入mysql自带的mysql数据库，执行上述语句查看</p>
<p><img src="/assets/image-20210721230202814.png" alt="image-20210721230202814"></p>
<ul>
<li><strong>查询表结构</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名称;</span><br></pre></td></tr></table></figure>

<p>查看mysql数据库中func表的结构，运行语句如下：</p>
<img src="assets/image-20210721230332428.png" alt="image-20210721230332428" style="zoom:80%;" />

<h3 id="5-2-创建表"><a href="#5-2-创建表" class="headerlink" title="5.2  创建表"></a>5.2  创建表</h3><ul>
<li><strong>创建表</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">	字段名<span class="number">1</span>  数据类型<span class="number">1</span>,</span><br><span class="line">	字段名<span class="number">2</span>  数据类型<span class="number">2</span>,</span><br><span class="line">	…</span><br><span class="line">	字段名n  数据类型n</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：最后一行末尾，不能加逗号</p>
</blockquote>
<p>知道了创建表的语句，那么我们创建创建如下结构的表</p>
<img src="assets/image-20210721230824097.png" alt="image-20210721230824097" style="zoom:80%;" />

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>运行语句如下：</p>
<img src="assets/image-20210721231142326.png" alt="image-20210721231142326" style="zoom:80%;" />

<h3 id="5-3-数据类型"><a href="#5-3-数据类型" class="headerlink" title="5.3  数据类型"></a>5.3  数据类型</h3><p>MySQL 支持多种类型，可以分为三类：</p>
<ul>
<li><p>数值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">tinyint : 小整数型，占一个字节</span><br><span class="line"><span class="type">int</span>	： 大整数类型，占四个字节</span><br><span class="line">	eg ： age <span class="type">int</span></span><br><span class="line"><span class="keyword">double</span> ： 浮点类型</span><br><span class="line">	使用格式： 字段名 <span class="keyword">double</span>(总长度,小数点后保留的位数)</span><br><span class="line">	eg ： score <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>)   </span><br></pre></td></tr></table></figure>
</li>
<li><p>日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">date</span> ： 日期值。只包含年月日</span><br><span class="line">	eg ：birthday <span class="type">date</span> ： </span><br><span class="line">datetime ： 混合日期和时间值。包含年月日时分秒</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ： 定长字符串。</span><br><span class="line">	优点：存储性能高</span><br><span class="line">	缺点：浪费空间</span><br><span class="line">	eg ： name <span class="type">char</span>(<span class="number">10</span>)  如果存储的数据字符个数不足<span class="number">10</span>个，也会占<span class="number">10</span>个的空间</span><br><span class="line"><span class="type">varchar</span> ： 变长字符串。</span><br><span class="line">	优点：节约空间</span><br><span class="line">	缺点：存储性能底</span><br><span class="line">	eg ： name <span class="type">varchar</span>(<span class="number">10</span>) 如果存储的数据字符个数不足<span class="number">10</span>个，那就数据字符个数是几就占几个的空间	</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意：其他类型参考资料中的《MySQL数据类型].xlsx》</p>
</blockquote>
<p><strong>案例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需求：设计一张学生表，请注重数据类型、长度的合理性</span><br><span class="line">	1. 编号</span><br><span class="line">	2. 姓名，姓名最长不超过10个汉字</span><br><span class="line">	3. 性别，因为取值只有两种可能，因此最多一个汉字</span><br><span class="line">	4. 生日，取值为年月日</span><br><span class="line">	5. 入学成绩，小数点后保留两位</span><br><span class="line">	6. 邮件地址，最大长度不超过 64</span><br><span class="line">	7. 家庭联系电话，不一定是手机号码，可能会出现 - 等字符</span><br><span class="line">	8. 学生状态（用数字表示，正常、休学、毕业...）</span><br></pre></td></tr></table></figure>

<p>语句设计如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    birthday <span class="type">date</span>,</span><br><span class="line">    score <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">15</span>),</span><br><span class="line">    tel <span class="type">varchar</span>(<span class="number">15</span>),</span><br><span class="line">    status tinyint</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-删除表"><a href="#5-4-删除表" class="headerlink" title="5.4  删除表"></a>5.4  删除表</h3><ul>
<li><strong>删除表</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除表时判断表是否存在</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure>

<p>运行语句效果如下：</p>
<img src="assets/image-20210721235108267.png" alt="image-20210721235108267" style="zoom:80%;" />

<h3 id="5-5-修改表"><a href="#5-5-修改表" class="headerlink" title="5.5  修改表"></a>5.5  修改表</h3><ul>
<li><strong>修改表名</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新的表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将表名student修改为stu</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>添加一列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给stu表添加一列address，该字段类型是varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改数据类型</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段的类型改为 char(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify address <span class="type">char</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改列名和数据类型</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段名改为 addr，类型改为varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change address addr <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的addr字段 删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> addr;</span><br></pre></td></tr></table></figure>



<h2 id="6，navicat使用"><a href="#6，navicat使用" class="headerlink" title="6，navicat使用"></a>6，navicat使用</h2><p>通过上面的学习，我们发现在命令行中写sql语句特别不方便，尤其是编写创建表的语句，我们只能在记事本上写好后直接复制到命令行进行执行。那么有没有刚好的工具提供给我们进行使用呢？ 有。</p>
<h3 id="6-1-navicat概述"><a href="#6-1-navicat概述" class="headerlink" title="6.1  navicat概述"></a>6.1  navicat概述</h3><ul>
<li>Navicat for MySQL 是管理和开发 MySQL 或 MariaDB 的理想解决方案。</li>
<li>这套全面的前端工具为数据库管理、开发和维护提供了一款直观而强大的图形界面。</li>
<li>官网： <a href="http://www.navicat.com.cn/">http://www.navicat.com.cn</a></li>
</ul>
<h3 id="6-2-navicat安装"><a href="#6-2-navicat安装" class="headerlink" title="6.2  navicat安装"></a>6.2  navicat安装</h3><p>参考 : 资料\navicat安装包\navicat_mysql_x86\navicat安装步骤.md</p>
<h3 id="6-3-navicat使用"><a href="#6-3-navicat使用" class="headerlink" title="6.3  navicat使用"></a>6.3  navicat使用</h3><h4 id="6-3-1-建立和mysql服务的连接"><a href="#6-3-1-建立和mysql服务的连接" class="headerlink" title="6.3.1  建立和mysql服务的连接"></a>6.3.1  建立和mysql服务的连接</h4><p>第一步： 点击连接，选择MySQL</p>
<img src="assets/image-20210721235928346.png" alt="image-20210721235928346" style="zoom:70%;" />

<p>第二步：填写连接数据库必要的信息</p>
<img src="assets/image-20210722000116080.png" alt="image-20210722000116080" style="zoom:80%;" />

<p>以上操作没有问题就会出现如下图所示界面：</p>
<img src="assets/image-20210722000345349.png" alt="image-20210722000345349" style="zoom:80%;" />

<h4 id="6-3-2-操作"><a href="#6-3-2-操作" class="headerlink" title="6.3.2  操作"></a>6.3.2  操作</h4><p>连接成功后就能看到如下图界面：</p>
<img src="assets/image-20210722000521997.png" alt="image-20210722000521997" style="zoom:80%;" />

<ul>
<li><strong>修改表结构</strong></li>
</ul>
<p>通过下图操作修改表结构：</p>
<img src="assets/image-20210722000740661.png" alt="image-20210722000740661" style="zoom:80%;" />

<p>点击了设计表后即出现如下图所示界面，在图中红框中直接修改字段名，类型等信息：</p>
<img src="assets/image-20210722000929075.png" alt="image-20210722000929075" style="zoom:80%;" />

<ul>
<li><strong>编写SQL语句并执行</strong></li>
</ul>
<p>按照如下图所示进行操作即可书写SQL语句并执行sql语句。</p>
<img src="assets/image-20210722001333817.png" alt="image-20210722001333817" style="zoom:80%;" />

<h2 id="7，DML"><a href="#7，DML" class="headerlink" title="7，DML"></a>7，DML</h2><p>DML主要是对数据进行增（insert）删（delete）改（update）操作。</p>
<h3 id="7-1-添加数据"><a href="#7-1-添加数据" class="headerlink" title="7.1  添加数据"></a>7.1  添加数据</h3><ul>
<li><strong>给指定列添加数据</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>给全部列添加数据</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>批量添加数据</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>练习</strong></li>
</ul>
<p>为了演示以下的增删改操作是否操作成功，故先将查询所有数据的语句介绍给大家：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给指定列添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu (id, NAME) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="comment">-- 给所有列添加数据，列名的列表可以省略的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu (id,NAME,sex,birthday,score,email,tel,STATUS) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="string">&#x27;13888888888&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="string">&#x27;13888888888&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 批量添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span> </span><br><span class="line">	(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="string">&#x27;13888888888&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">	(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="string">&#x27;13888888888&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">	(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">88.88</span>,<span class="string">&#x27;lisi@itcast.cn&#x27;</span>,<span class="string">&#x27;13888888888&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h3 id="7-2-修改数据"><a href="#7-2-修改数据" class="headerlink" title="7.2  修改数据"></a>7.2  修改数据</h3><ul>
<li><strong>修改表数据</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,… [<span class="keyword">WHERE</span> 条件] ;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li>修改语句中如果不加条件，则将所有数据都修改！</li>
<li>像上面的语句中的中括号，表示在写sql语句中可以省略这部分</li>
</ol>
</blockquote>
<ul>
<li><p><strong>练习</strong></p>
<ul>
<li>将张三的性别改为女</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>将张三的生日改为 1999-12-12 分数改为99.99</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> birthday <span class="operator">=</span> <span class="string">&#x27;1999-12-12&#x27;</span>, score <span class="operator">=</span> <span class="number">99.99</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：如果update语句没有加where条件，则会将表中所有数据全部修改！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面语句的执行完后查询到的结果是：</p>
<p><img src="/assets/image-20210722204233305.png" alt="image-20210722204233305"></p>
</li>
</ul>
</li>
</ul>
<h3 id="7-3-删除数据"><a href="#7-3-删除数据" class="headerlink" title="7.3  删除数据"></a>7.3  删除数据</h3><ul>
<li><strong>删除数据</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] ;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>练习</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除张三记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除stu表中所有的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>



<h2 id="8，DQL"><a href="#8，DQL" class="headerlink" title="8，DQL"></a>8，DQL</h2><p>下面是黑马程序员展示试题库数据的页面</p>
<img src="assets/image-20210722215838144.png" alt="image-20210722215838144" style="zoom:80%;" />

<p>页面上展示的数据肯定是在数据库中的试题库表中进行存储，而我们需要将数据库中的数据查询出来并展示在页面给用户看。上图中的是最基本的查询效果，那么数据库其实是很多的，不可能在将所有的数据在一页进行全部展示，而页面上会有分页展示的效果，如下：</p>
<p><img src="/assets/image-20210722220139174.png" alt="image-20210722220139174"></p>
<p>当然上图中的难度字段当我们点击也可以实现排序查询操作。从这个例子我们就可以看出，对于数据库的查询时灵活多变的，需要根据具体的需求来实现，而数据库查询操作也是最重要的操作，所以此部分需要大家重点掌握。</p>
<p>接下来我们先介绍查询的完整语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    表名列表 </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    分组字段</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    分组后条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    排序字段</span><br><span class="line">LIMIT</span><br><span class="line">    分页限定</span><br></pre></td></tr></table></figure>

<p>为了给大家演示查询的语句，我们需要先准备表及一些数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除stu表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> stu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建stu表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu (</span><br><span class="line"> id <span class="type">int</span>, <span class="comment">-- 编号</span></span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 姓名</span></span><br><span class="line"> age <span class="type">int</span>, <span class="comment">-- 年龄</span></span><br><span class="line"> sex <span class="type">varchar</span>(<span class="number">5</span>), <span class="comment">-- 性别</span></span><br><span class="line"> address <span class="type">varchar</span>(<span class="number">100</span>), <span class="comment">-- 地址</span></span><br><span class="line"> math <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="comment">-- 数学成绩</span></span><br><span class="line"> english <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="comment">-- 英语成绩</span></span><br><span class="line"> hire_date <span class="type">date</span> <span class="comment">-- 入学时间</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu(id,NAME,age,sex,address,math,english,hire_date) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;马运&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;杭州&#x27;</span>,<span class="number">66</span>,<span class="number">78</span>,<span class="string">&#x27;1995-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;马花疼&#x27;</span>,<span class="number">45</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="number">98</span>,<span class="number">87</span>,<span class="string">&#x27;1998-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;马斯克&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">56</span>,<span class="number">77</span>,<span class="string">&#x27;1999-09-02&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;柳白&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;湖南&#x27;</span>,<span class="number">76</span>,<span class="number">65</span>,<span class="string">&#x27;1997-09-05&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;柳青&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;湖南&#x27;</span>,<span class="number">86</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;1998-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;刘德花&#x27;</span>,<span class="number">57</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="string">&#x27;1998-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;张学右&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="string">&#x27;1998-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;德玛西亚&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>,<span class="number">56</span>,<span class="number">65</span>,<span class="string">&#x27;1994-09-02&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>接下来咱们从最基本的查询语句开始学起。</p>
<h3 id="8-1-基础查询"><a href="#8-1-基础查询" class="headerlink" title="8.1  基础查询"></a>8.1  基础查询</h3><h4 id="8-1-1-语法"><a href="#8-1-1-语法" class="headerlink" title="8.1.1  语法"></a>8.1.1  语法</h4><ul>
<li><strong>查询多个字段</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名; <span class="comment">-- 查询所有数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>去除重复记录</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>起别名</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AS</span>: <span class="keyword">AS</span> 也可以省略</span><br></pre></td></tr></table></figure>



<h4 id="8-1-2-练习"><a href="#8-1-2-练习" class="headerlink" title="8.1.2  练习"></a>8.1.2  练习</h4><ul>
<li><p>查询name、age两列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询所有列的数据，列名的列表可以使用*替代</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>

<p>上面语句中的*不建议大家使用，因为在这写*不方便我们阅读sql语句。我们写字段列表的话，可以添加注释对每一个字段进行说明</p>
<img src="assets/image-20210722221534870.png" alt="image-20210722221534870" style="zoom:80%;" />

<p>而在上课期间为了简约课程的时间，老师很多地方都会写*。</p>
</li>
<li><p>查询地址信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> address <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>

<p>执行上面语句结果如下：</p>
<p><img src="/assets/image-20210722221756380.png" alt="image-20210722221756380"></p>
<p>从上面的结果我们可以看到有重复的数据，我们也可以使用 <code>distinct</code> 关键字去重重复数据。</p>
</li>
<li><p>去除重复记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> address <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询姓名、数学成绩、英语成绩。并通过as给math和english起别名（as关键字可以省略）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,math <span class="keyword">as</span> 数学成绩,english <span class="keyword">as</span> 英文成绩 <span class="keyword">from</span> stu;</span><br><span class="line"><span class="keyword">select</span> name,math 数学成绩,english 英文成绩 <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-2-条件查询"><a href="#8-2-条件查询" class="headerlink" title="8.2  条件查询"></a>8.2  条件查询</h3><h4 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1  语法"></a>8.2.1  语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>条件</strong></li>
</ul>
<p>条件列表可以使用以下运算符</p>
<img src="assets/image-20210722190508272.png" alt="image-20210722190508272" style="zoom:60%;" />

<h4 id="8-2-2-条件查询练习"><a href="#8-2-2-条件查询练习" class="headerlink" title="8.2.2  条件查询练习"></a>8.2.2  条件查询练习</h4><ul>
<li><p>查询年龄大于20岁的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄大于等于20岁的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="operator">&amp;&amp;</span>  age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span>  age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面语句中 &amp;&amp;  和  and  都表示并且的意思。建议使用 and 。</p>
<p>也可以使用  between … and 来实现上面需求</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询入学日期在’1998-09-01’ 到 ‘1999-09-01’  之间的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> hire_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1998-09-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1999-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄等于18岁的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄不等于18岁的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">18</span>,<span class="number">20</span> ,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询英语成绩为 null的学员信息</p>
<p>null值的比较不能使用 &#x3D;  或者 !&#x3D; 。需要使用 is  或者 is not</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="operator">=</span> <span class="keyword">null</span>; <span class="comment">-- 这个语句是不行的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-2-3-模糊查询练习"><a href="#8-2-3-模糊查询练习" class="headerlink" title="8.2.3  模糊查询练习"></a>8.2.3  模糊查询练习</h4><blockquote>
<p>模糊查询使用like关键字，可以使用通配符进行占位:</p>
<p>（1）_ : 代表单个任意字符</p>
<p>（2）% : 代表任意个数字符</p>
</blockquote>
<ul>
<li><p>查询姓’马’的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;马%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询第二个字是’花’的学员信息  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_花%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询名字中包含 ‘德’ 的学员信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%德%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-3-排序查询"><a href="#8-3-排序查询" class="headerlink" title="8.3  排序查询"></a>8.3  排序查询</h3><h4 id="8-3-1-语法"><a href="#8-3-1-语法" class="headerlink" title="8.3.1  语法"></a>8.3.1  语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段名<span class="number">1</span> [排序方式<span class="number">1</span>],排序字段名<span class="number">2</span> [排序方式<span class="number">2</span>] …;</span><br></pre></td></tr></table></figure>

<p>上述语句中的排序方式有两种，分别是：</p>
<ul>
<li>ASC ： 升序排列 <strong>（默认值）</strong></li>
<li>DESC ： 降序排列</li>
</ul>
<blockquote>
<p>注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</p>
</blockquote>
<h4 id="8-3-2-练习"><a href="#8-3-2-练习" class="headerlink" title="8.3.2  练习"></a>8.3.2  练习</h4><ul>
<li><p>查询学生信息，按照年龄升序排列 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> age ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询学生信息，按照数学成绩降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> math <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> math <span class="keyword">desc</span> , english <span class="keyword">asc</span> ;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-4-聚合函数"><a href="#8-4-聚合函数" class="headerlink" title="8.4  聚合函数"></a>8.4  聚合函数</h3><h4 id="8-4-1-概念"><a href="#8-4-1-概念" class="headerlink" title="8.4.1  概念"></a>8.4.1  概念</h4><p> &#x3D;&#x3D;将一列数据作为一个整体，进行纵向计算。&#x3D;&#x3D;</p>
<p>如何理解呢？假设有如下表</p>
<img src="assets/image-20210722194410628.png" alt="image-20210722194410628" style="zoom:80%;" />

<p>现有一需求让我们求表中所有数据的数学成绩的总和。这就是对math字段进行纵向求和。</p>
<h4 id="8-4-2-聚合函数分类"><a href="#8-4-2-聚合函数分类" class="headerlink" title="8.4.2  聚合函数分类"></a>8.4.2  聚合函数分类</h4><table>
<thead>
<tr>
<th>函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count(列名)</td>
<td>统计数量（一般选用不为null的列）</td>
</tr>
<tr>
<td>max(列名)</td>
<td>最大值</td>
</tr>
<tr>
<td>min(列名)</td>
<td>最小值</td>
</tr>
<tr>
<td>sum(列名)</td>
<td>求和</td>
</tr>
<tr>
<td>avg(列名)</td>
<td>平均值</td>
</tr>
</tbody></table>
<h4 id="8-4-3-聚合函数语法"><a href="#8-4-3-聚合函数语法" class="headerlink" title="8.4.3  聚合函数语法"></a>8.4.3  聚合函数语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数名(列名) <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：null 值不参与所有聚合函数运算</p>
</blockquote>
<h4 id="8-4-4-练习"><a href="#8-4-4-练习" class="headerlink" title="8.4.4  练习"></a>8.4.4  练习</h4><ul>
<li><p>统计班级一共有多少个学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> stu;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(english) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>

<p>上面语句根据某个字段进行统计，如果该字段某一行的值为null的话，将不会被统计。所以可以在count(*) 来实现。* 表示所有字段数据，一行中也不可能所有的数据都为null，所以建议使用 count(*)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数学成绩的最高分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(math) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数学成绩的最低分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(math) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数学成绩的总分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(math) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数学成绩的平均分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(math) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询英语成绩的最低分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(english) <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-5-分组查询"><a href="#8-5-分组查询" class="headerlink" title="8.5  分组查询"></a>8.5  分组查询</h3><h4 id="8-5-1-语法"><a href="#8-5-1-语法" class="headerlink" title="8.5.1  语法"></a>8.5.1  语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 分组前条件限定] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后条件过滤];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p>
</blockquote>
<h4 id="8-5-2-练习"><a href="#8-5-2-练习" class="headerlink" title="8.5.2  练习"></a>8.5.2  练习</h4><ul>
<li><p>查询男同学和女同学各自的数学平均分</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;  <span class="comment">-- 这里查询name字段就没有任何意义</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询男同学和女同学各自的数学平均分，以及各自人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">where</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">where</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">group</span> <span class="keyword">by</span> sex <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)  <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>where 和 having 区别：</strong></p>
<ul>
<li><p>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</p>
</li>
<li><p>可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。</p>
</li>
</ul>
<h3 id="8-6-分页查询"><a href="#8-6-分页查询" class="headerlink" title="8.6  分页查询"></a>8.6  分页查询</h3><p>如下图所示，大家在很多网站都见过类似的效果，如京东、百度、淘宝等。分页查询是将数据一页一页的展示给用户看，用户也可以通过点击查看下一页的数据。</p>
<img src="assets/image-20210722230330366.png" alt="image-20210722230330366" style="zoom:80%;" />

<p>接下来我们先说分页查询的语法。</p>
<h4 id="8-6-1-语法"><a href="#8-6-1-语法" class="headerlink" title="8.6.1  语法"></a>8.6.1  语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT  起始索引 , 查询条目数;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 上述语句中的起始索引是从0开始</p>
</blockquote>
<h4 id="8-6-2-练习"><a href="#8-6-2-练习" class="headerlink" title="8.6.2  练习"></a>8.6.2  练习</h4><ul>
<li><p>从0开始查询，查询3条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu limit <span class="number">0</span> , <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每页显示3条数据，查询第1页数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu limit <span class="number">0</span> , <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每页显示3条数据，查询第2页数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu limit <span class="number">3</span> , <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每页显示3条数据，查询第3页数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu limit <span class="number">6</span> , <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>从上面的练习推导出起始索引计算公式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">起始索引 <span class="operator">=</span> (当前页码 <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> 每页显示的条数</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis练习</title>
    <url>/2022/08/03/Mybatis/</url>
    <content><![CDATA[<h2 id="Mybatis练习"><a href="#Mybatis练习" class="headerlink" title="Mybatis练习"></a>Mybatis练习</h2><p><strong>目标</strong></p>
<blockquote>
<ul>
<li>能够使用映射配置文件实现CRUD操作</li>
<li>能够使用注解实现CRUD操作</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="1，配置文件实现CRUD"><a href="#1，配置文件实现CRUD" class="headerlink" title="1，配置文件实现CRUD"></a>1，配置文件实现CRUD</h2><p><img src="/assets/image-20210729111159534.png" alt="image-20210729111159534"></p>
<p>如上图所示产品原型，里面包含了品牌数据的 <code>查询</code> 、<code>按条件查询</code>、<code>添加</code>、<code>删除</code>、<code>批量删除</code>、<code>修改</code> 等功能，而这些功能其实就是对数据库表中的数据进行CRUD操作。接下来我们就使用Mybatis完成品牌数据的增删改查操作。以下是我们要完成功能列表：</p>
<blockquote>
<ul>
<li>查询<ul>
<li>查询所有数据</li>
<li>查询详情</li>
<li>条件查询</li>
</ul>
</li>
<li>添加</li>
<li>修改<ul>
<li>修改全部字段</li>
<li>修改动态字段</li>
</ul>
</li>
<li>删除<ul>
<li>删除一个</li>
<li>批量删除</li>
</ul>
</li>
</ul>
</blockquote>
<p>我们先将必要的环境准备一下。</p>
<h3 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1  环境准备"></a>1.1  环境准备</h3><ul>
<li><p>数据库表（tb_brand）及数据准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除tb_brand表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_brand;</span><br><span class="line"><span class="comment">-- 创建tb_brand表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- id 主键</span></span><br><span class="line">    id           <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    <span class="comment">-- 品牌名称</span></span><br><span class="line">    brand_name   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 企业名称</span></span><br><span class="line">    company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 排序字段</span></span><br><span class="line">    ordered      <span class="type">int</span>,</span><br><span class="line">    <span class="comment">-- 描述信息</span></span><br><span class="line">    description  <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="comment">-- 状态：0：禁用  1：启用</span></span><br><span class="line">    status       <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;三只松鼠&#x27;</span>, <span class="string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;好吃不上火&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">       (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;华为技术有限公司&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;小米科技有限公司&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;are you ok&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类 Brand</p>
<p>在 <code>com.itheima.pojo</code> 包下创建 Brand 实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="comment">// id 主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="comment">// 企业名称</span></span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="comment">// 排序字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer ordered;</span><br><span class="line">    <span class="comment">// 描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">// 状态：0：禁用  1：启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略 setter and getter。自己写时要补全这部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试用例</p>
<p>测试代码需要在 <code>test/java</code> 目录下创建包及测试用例。项目结构如下：</p>
<img src="assets/image-20210729112907106.png" alt="image-20210729112907106" style="zoom:80%;" />
</li>
<li><p>安装 MyBatisX 插件</p>
<ul>
<li><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p>
</li>
<li><p>主要功能</p>
<ul>
<li>XML映射配置文件 和 接口方法 间相互跳转</li>
<li>根据接口方法生成 statement</li>
</ul>
</li>
<li><p>安装方式</p>
<p>点击 <code>file</code> ，选择 <code>settings</code> ，就能看到如下图所示界面</p>
<img src="assets/image-20210729113304743.png" alt="image-20210729113304743" style="zoom:80%;" />

<blockquote>
<p>注意：安装完毕后需要重启IDEA</p>
</blockquote>
</li>
<li><p>插件效果</p>
<img src="assets/image-20210729164450524.png" alt="image-20210729164450524" style="zoom:70%;" />

<p>红色头绳的表示映射配置文件，蓝色头绳的表示mapper接口。在mapper接口点击红色头绳的小鸟图标会自动跳转到对应的映射配置文件，在映射配置文件中点击蓝色头绳的小鸟图标会自动跳转到对应的mapper接口。也可以在mapper接口中定义方法，自动生成映射配置文件中的 <code>statement</code> ，如图所示</p>
<p><img src="/assets/image-20210729165337223.png" alt="image-20210729165337223"></p>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-查询所有数据"><a href="#1-2-查询所有数据" class="headerlink" title="1.2  查询所有数据"></a>1.2  查询所有数据</h3><img src="assets/image-20210729165724838.png" alt="image-20210729165724838" style="zoom:80%;" />

<p>如上图所示就页面上展示的数据，而这些数据需要从数据库进行查询。接下来我们就来讲查询所有数据功能，而实现该功能我们分以下步骤进行实现：</p>
<ul>
<li><p>编写接口方法：Mapper接口</p>
<ul>
<li><p>参数：无</p>
<p>查询所有数据功能是不需要根据任何条件进行查询的，所以此方法不需要参数。</p>
<img src="assets/image-20210729171208737.png" alt="image-20210729171208737" style="zoom:80%;" />
</li>
<li><p>结果：List<Brand></p>
<p>我们会将查询出来的每一条数据封装成一个 <code>Brand</code> 对象，而多条数据封装多个 <code>Brand</code> 对象，需要将这些对象封装到List集合中返回。</p>
<img src="assets/image-20210729171146911.png" alt="image-20210729171146911" style="zoom:80%;" />
</li>
<li><p>执行方法、测试</p>
</li>
</ul>
</li>
</ul>
<h4 id="1-2-1-编写接口方法"><a href="#1-2-1-编写接口方法" class="headerlink" title="1.2.1  编写接口方法"></a>1.2.1  编写接口方法</h4><p>在 <code>com.itheima.mapper</code> 包写创建名为 <code>BrandMapper</code> 的接口。并在该接口中定义 <code>List&lt;Brand&gt; selectAll()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-编写SQL语句"><a href="#1-2-2-编写SQL语句" class="headerlink" title="1.2.2  编写SQL语句"></a>1.2.2  编写SQL语句</h4><p>在 <code>reources</code> 下创建 <code>com/itheima/mapper</code> 目录结构，并在该目录下创建名为 <code>BrandMapper.xml</code> 的映射配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-编写测试方法"><a href="#1-2-3-编写测试方法" class="headerlink" title="1.2.3  编写测试方法"></a>1.2.3  编写测试方法</h4><p>在 <code>MybatisTest</code> 类中编写测试查询所有的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectAll();</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：现在我们感觉测试这部分代码写起来特别麻烦，我们可以先忍忍。以后我们只会写上面的第3步的代码，其他的都不需要我们来完成。</p>
</blockquote>
<p>执行测试方法结果如下：</p>
<p><img src="/assets/image-20210729172544230.png" alt="image-20210729172544230"></p>
<p>从上面结果我们看到了问题，有些数据封装成功了，而有些数据并没有封装成功。为什么这样呢？</p>
<p>这个问题可以通过两种方式进行解决：</p>
<ul>
<li>给字段起别名</li>
<li>使用resultMap定义字段和属性的映射关系</li>
</ul>
<h4 id="1-2-4-起别名解决上述问题"><a href="#1-2-4-起别名解决上述问题" class="headerlink" title="1.2.4  起别名解决上述问题"></a>1.2.4  起别名解决上述问题</h4><p>从上面结果可以看到 <code>brandName</code> 和 <code>companyName</code> 这两个属性的数据没有封装成功，查询 实体类 和 表中的字段 发现，在实体类中属性名是 <code>brandName</code> 和 <code>companyName</code> ，而表中的字段名为 <code>brand_name</code> 和 <code>company_name</code>，如下图所示 。那么我们只需要保持这两部分的名称一致这个问题就迎刃而解。</p>
<img src="assets/image-20210729173210433.png" alt="image-20210729173210433" style="zoom:80%;" />

<p>我们可以在写sql语句时给这两个字段起别名，将别名定义成和属性名一致即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    id, brand_name as brandName, company_name as companyName, ordered, description, status</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而上面的SQL语句中的字段列表书写麻烦，如果表中还有更多的字段，同时其他的功能也需要查询这些字段时就显得我们的代码不够精炼。Mybatis提供了<code>sql</code> 片段可以提高sql的复用性。</p>
<p><strong>SQL片段：</strong></p>
<ul>
<li><p>将需要复用的SQL片段抽取到 <code>sql</code> 标签中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand_column&quot;</span>&gt;</span></span><br><span class="line">	id, brand_name as brandName, company_name as companyName, ordered, description, status</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>id属性值是唯一标识，引用时也是通过该值进行引用。</p>
</li>
<li><p>在原sql语句中进行引用</p>
<p>使用 <code>include</code> 标签引用上述的 SQL 片段，而 <code>refid</code> 指定上述 SQL 片段的id值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;brand_column&quot;</span> /&gt;</span></span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-2-5-使用resultMap解决上述问题"><a href="#1-2-5-使用resultMap解决上述问题" class="headerlink" title="1.2.5  使用resultMap解决上述问题"></a>1.2.5  使用resultMap解决上述问题</h4><p>起别名 + sql片段的方式可以解决上述问题，但是它也存在问题。如果还有功能只需要查询部分字段，而不是查询所有字段，那么我们就需要再定义一个 SQL 片段，这就显得不是那么灵活。</p>
<p>那么我们也可以使用resultMap来定义字段和属性的映射关系的方式解决上述问题。</p>
<ul>
<li><p>在映射配置文件中使用resultMap定义 字段 和 属性 的映射关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            id：完成主键字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">            result：完成一般字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在上面只需要定义 字段名 和 属性名 不一样的映射，而一样的则不需要专门定义出来。</p>
</blockquote>
</li>
<li><p>SQL语句正常编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-2-6-小结"><a href="#1-2-6-小结" class="headerlink" title="1.2.6  小结"></a>1.2.6  小结</h4><p>实体类属性名 和 数据库表列名 不一致，不能自动封装数据</p>
<ul>
<li>&#x3D;&#x3D;起别名：&#x3D;&#x3D;在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样<ul>
<li>可以定义 <sql>片段，提升复用性</li>
</ul>
</li>
<li>&#x3D;&#x3D;resultMap：&#x3D;&#x3D;定义<resultMap> 完成不一致的属性名和列名的映射</li>
</ul>
<p>而我们最终选择使用 resultMap的方式。查询映射配置文件中查询所有的 statement 书写如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            id：完成主键字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">            result：完成一般字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-查询详情"><a href="#1-3-查询详情" class="headerlink" title="1.3  查询详情"></a>1.3  查询详情</h3><img src="assets/image-20210729180118287.png" alt="image-20210729180118287" style="zoom:80%;" />

<p>有些数据的属性比较多，在页面表格中无法全部实现，而只会显示部分，而其他属性数据的查询可以通过 <code>查看详情</code> 来进行查询，如上图所示。</p>
<p>查看详情功能实现步骤：</p>
<ul>
<li><p>编写接口方法：Mapper接口</p>
<img src="assets/image-20210729180604529.png" alt="image-20210729180604529" style="zoom:80%;" />

<ul>
<li><p>参数：id</p>
<p>查看详情就是查询某一行数据，所以需要根据id进行查询。而id以后是由页面传递过来。</p>
</li>
<li><p>结果：Brand</p>
<p>根据id查询出来的数据只要一条，而将一条数据封装成一个Brand对象即可</p>
</li>
</ul>
</li>
<li><p>编写SQL语句：SQL映射文件</p>
<img src="assets/image-20210729180709318.png" alt="image-20210729180709318" style="zoom:80%;" />
</li>
<li><p>执行方法、进行测试</p>
</li>
</ul>
<h4 id="1-3-1-编写接口方法"><a href="#1-3-1-编写接口方法" class="headerlink" title="1.3.1  编写接口方法"></a>1.3.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id查询数据的方法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查看详情：根据Id查询</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-编写SQL语句"><a href="#1-3-2-编写SQL语句" class="headerlink" title="1.3.2  编写SQL语句"></a>1.3.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：上述SQL中的 #{id}先这样写，一会我们再详细讲解</p>
</blockquote>
<h4 id="1-3-3-编写测试方法"><a href="#1-3-3-编写测试方法" class="headerlink" title="1.3.3  编写测试方法"></a>1.3.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数，该id以后需要传递过来</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> brandMapper.selectById(id);</span><br><span class="line">    System.out.println(brand);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行测试方法结果如下：</p>
<img src="assets/image-20210729182223137.png" alt="image-20210729182223137" style="zoom:70%;" />

<h4 id="1-3-4-参数占位符"><a href="#1-3-4-参数占位符" class="headerlink" title="1.3.4  参数占位符"></a>1.3.4  参数占位符</h4><p>查询到的结果很好理解就是id为1的这行数据。而这里我们需要看控制台显示的SQL语句，能看到使用？进行占位。说明我们在映射配置文件中的写的 <code>#&#123;id&#125;</code> 最终会被？进行占位。接下来我们就聊聊映射配置文件中的参数占位符。</p>
<p>mybatis提供了两种参数占位符：</p>
<ul>
<li><p>#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。从上述例子可以看出使用#{} 底层使用的是 <code>PreparedStatement</code></p>
</li>
<li><p>${} ：拼接SQL。底层使用的是 <code>Statement</code>，会存在SQL注入问题。如下图将 映射配置文件中的 #{} 替换成 ${} 来看效果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = $&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新运行查看结果如下：</p>
<img src="assets/image-20210729184156019.png" alt="image-20210729184156019" style="zoom:70%;" /></li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;从上面两个例子可以看出，以后开发我们使用 #{} 参数占位符。</p>
</blockquote>
<h4 id="1-3-5-parameterType使用"><a href="#1-3-5-parameterType使用" class="headerlink" title="1.3.5  parameterType使用"></a>1.3.5  parameterType使用</h4><p>对于有参数的mapper接口方法，我们在映射配置文件中应该配置 <code>ParameterType</code> 来指定参数类型。只不过该属性都可以省略。如下图：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = $&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-6-SQL语句中特殊字段处理"><a href="#1-3-6-SQL语句中特殊字段处理" class="headerlink" title="1.3.6  SQL语句中特殊字段处理"></a>1.3.6  SQL语句中特殊字段处理</h4><p>以后肯定会在SQL语句中写一下特殊字符，比如某一个字段大于某个值，如下图</p>
<img src="assets/image-20210729184756094.png" alt="image-20210729184756094" style="zoom:80%;" />

<p>可以看出报错了，因为映射配置文件是xml类型的问题，而 &gt; &lt; 等这些字符在xml中有特殊含义，所以此时我们需要将这些符号进行转义，可以使用以下两种方式进行转义</p>
<ul>
<li><p>转义字符</p>
<p>下图的 <code>&amp;lt;</code> 就是 <code>&lt;</code> 的转义字符。</p>
<img src="assets/image-20210729185128686.png" alt="image-20210729185128686" style="zoom:60%;" />
</li>
<li><![CDATA[内容]]>

<img src="assets/image-20210729185030318.png" alt="image-20210729185030318" style="zoom:60%;" /></li>
</ul>
<h3 id="1-4-多条件查询"><a href="#1-4-多条件查询" class="headerlink" title="1.4  多条件查询"></a>1.4  多条件查询</h3><p><img src="/assets/image-20210729203804276.png" alt="image-20210729203804276"></p>
<p>我们经常会遇到如上图所示的多条件查询，将多条件查询的结果展示在下方的数据列表中。而我们做这个功能需要分析最终的SQL语句应该是什么样，思考两个问题</p>
<ul>
<li>条件表达式</li>
<li>如何连接</li>
</ul>
<p>条件字段 <code>企业名称</code>  和 <code>品牌名称</code> 需要进行模糊查询，所以条件应该是：</p>
<img src="assets/image-20210729204458815.png" alt="image-20210729204458815" style="zoom:70%;" />

<p>简单的分析后，我们来看功能实现的步骤：</p>
<ul>
<li><p>编写接口方法</p>
<ul>
<li>参数：所有查询条件</li>
<li>结果：List<Brand></li>
</ul>
</li>
<li><p>在映射配置文件中编写SQL语句</p>
</li>
<li><p>编写测试方法并执行</p>
</li>
</ul>
<h4 id="1-4-1-编写接口方法"><a href="#1-4-1-编写接口方法" class="headerlink" title="1.4.1  编写接口方法"></a>1.4.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义多条件查询的方法。</p>
<p>而该功能有三个参数，我们就需要考虑定义接口时，参数应该如何定义。Mybatis针对多参数有多种实现</p>
<ul>
<li><p>使用 <code>@Param(&quot;参数名称&quot;)</code> 标记每一个参数，在映射配置文件中就需要使用 <code>#&#123;参数名称&#125;</code> 进行占位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;status&quot;)</span> <span class="type">int</span> status, <span class="meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将多个参数封装成一个 实体对象 ，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和实体类属性名保持一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将多个参数封装到map集合中，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和map集合中键的名称一致。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; selectByCondition(Map map);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-4-2-编写SQL语句"><a href="#1-4-2-编写SQL语句" class="headerlink" title="1.4.2  编写SQL语句"></a>1.4.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where status = #&#123;status&#125;</span><br><span class="line">    and company_name like #&#123;companyName&#125;</span><br><span class="line">    and brand_name like #&#123;brandName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-编写测试方法"><a href="#1-4-3-编写测试方法" class="headerlink" title="1.4.3  编写测试方法"></a>1.4.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">    brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">	<span class="comment">//方式一 ：接口方法参数使用 @Param 方式调用的方法</span></span><br><span class="line">    <span class="comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span></span><br><span class="line">    <span class="comment">//方式二 ：接口方法参数是 实体类对象 方式调用的方法</span></span><br><span class="line">     <span class="comment">//封装对象</span></span><br><span class="line">    <span class="comment">/* Brand brand = new Brand();</span></span><br><span class="line"><span class="comment">        brand.setStatus(status);</span></span><br><span class="line"><span class="comment">        brand.setCompanyName(companyName);</span></span><br><span class="line"><span class="comment">        brand.setBrandName(brandName);*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式三 ：接口方法参数是 map集合对象 方式调用的方法</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;status&quot;</span> , status);</span><br><span class="line">    map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">    map.put(<span class="string">&quot;brandName&quot;</span> , brandName);</span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectByCondition(map);</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-4-动态SQL"><a href="#1-4-4-动态SQL" class="headerlink" title="1.4.4  动态SQL"></a>1.4.4  动态SQL</h4><p>上述功能实现存在很大的问题。用户在输入条件时，肯定不会所有的条件都填写，这个时候我们的SQL语句就不能那样写的</p>
<p>例如用户只输入 当前状态 时，SQL语句就是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> status <span class="operator">=</span> #&#123;status&#125;</span><br></pre></td></tr></table></figure>

<p>而用户如果只输入企业名称时，SQL语句就是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> company_name <span class="keyword">like</span> #&#123;companName&#125;</span><br></pre></td></tr></table></figure>

<p>而用户如果输入了 <code>当前状态</code> 和 <code>企业名称 </code> 时，SQL语句又不一样</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> status <span class="operator">=</span> #&#123;status&#125; <span class="keyword">and</span> company_name <span class="keyword">like</span> #&#123;companName&#125;</span><br></pre></td></tr></table></figure>

<p>针对上述的需要，Mybatis对动态SQL有很强大的支撑：</p>
<blockquote>
<ul>
<li><p>if</p>
</li>
<li><p>choose (when, otherwise)</p>
</li>
<li><p>trim (where, set)</p>
</li>
<li><p>foreach</p>
</li>
</ul>
</blockquote>
<p>我们先学习 if 标签和 where 标签：</p>
<ul>
<li><p>if 标签：条件判断</p>
<ul>
<li>test 属性：逻辑表达式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_name like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brand_name like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上的这种SQL语句就会根据传递的参数值进行动态的拼接。如果此时status和companyName有值那么就会值拼接这两个条件。</p>
<p>执行结果如下：</p>
<p><img src="/assets/image-20210729212510291.png" alt="image-20210729212510291"></p>
<p>但是它也存在问题，如果此时给的参数值是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">// map.put(&quot;status&quot; , status);</span></span><br><span class="line">map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">map.put(<span class="string">&quot;brandName&quot;</span> , brandName);</span><br></pre></td></tr></table></figure>

<p>拼接的SQL语句就变成了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> <span class="keyword">and</span> company_name <span class="keyword">like</span> ? <span class="keyword">and</span> brand_name <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure>

<p>而上面的语句中 where 关键后直接跟 and 关键字，这就是一条错误的SQL语句。这个就可以使用 where 标签解决</p>
</li>
<li><p>where 标签</p>
<ul>
<li>作用：<ul>
<li>替换where关键字</li>
<li>会动态的去掉第一个条件前的 and </li>
<li>如果所有的参数没有值则不加where关键字</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_name like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brand_name like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：需要给每个条件前都加上 and 关键字。</p>
</blockquote>
</li>
</ul>
<h3 id="1-5-单个条件（动态SQL）"><a href="#1-5-单个条件（动态SQL）" class="headerlink" title="1.5 单个条件（动态SQL）"></a>1.5 单个条件（动态SQL）</h3><img src="assets/image-20210729213613029.png" alt="image-20210729213613029" style="zoom:80%;" />

<p>如上图所示，在查询时只能选择 <code>品牌名称</code>、<code>当前状态</code>、<code>企业名称</code> 这三个条件中的一个，但是用户到底选择哪儿一个，我们并不能确定。这种就属于单个条件的动态SQL语句。 </p>
<p>这种需求需要使用到  <code>choose（when，otherwise）标签</code>  实现，  而 <code>choose</code> 标签类似于Java 中的switch语句。</p>
<p>通过一个案例来使用这些标签</p>
<h4 id="1-5-1-编写接口方法"><a href="#1-5-1-编写接口方法" class="headerlink" title="1.5.1  编写接口方法"></a>1.5.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义单条件查询的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 单条件动态查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">List&lt;Brand&gt; <span class="title function_">selectByConditionSingle</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-编写SQL语句"><a href="#1-5-2-编写SQL语句" class="headerlink" title="1.5.2  编写SQL语句"></a>1.5.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                company_name like #&#123;companyName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                brand_name like #&#123;brandName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-编写测试方法"><a href="#1-5-3-编写测试方法" class="headerlink" title="1.5.3  编写测试方法"></a>1.5.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByConditionSingle</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">    brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    <span class="comment">//brand.setStatus(status);</span></span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    <span class="comment">//brand.setBrandName(brandName);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectByConditionSingle(brand);</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行测试方法结果如下：</p>
<img src="assets/image-20210729214548756.png" alt="image-20210729214548756" style="zoom:70%;" />

<h3 id="1-6-添加数据"><a href="#1-6-添加数据" class="headerlink" title="1.6  添加数据"></a>1.6  添加数据</h3><img src="assets/image-20210729214917317.png" alt="image-20210729214917317" style="zoom:70%;" />

<p>如上图是我们平时在添加数据时展示的页面，而我们在该页面输入想要的数据后添加 <code>提交</code> 按钮，就会将这些数据添加到数据库中。接下来我们就来实现添加数据的操作。</p>
<ul>
<li><p>编写接口方法</p>
<img src="assets/image-20210729215351651.png" alt="image-20210729215351651" style="zoom:80%;" />

<p>参数：除了id之外的所有的数据。id对应的是表中主键值，而主键我们是 &#x3D;&#x3D;自动增长&#x3D;&#x3D; 生成的。</p>
</li>
<li><p>编写SQL语句</p>
<img src="assets/image-20210729215537167.png" alt="image-20210729215537167" style="zoom:80%;" />
</li>
<li><p>编写测试方法并执行</p>
</li>
</ul>
<p>明确了该功能实现的步骤后，接下来我们进行具体的操作。</p>
<h4 id="1-6-1-编写接口方法"><a href="#1-6-1-编写接口方法" class="headerlink" title="1.6.1  编写接口方法"></a>1.6.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义添加方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-编写SQL语句"><a href="#1-6-2-编写SQL语句" class="headerlink" title="1.6.2  编写SQL语句"></a>1.6.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写添加数据的 <code>statement</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-6-3-编写测试方法"><a href="#1-6-3-编写测试方法" class="headerlink" title="1.6.3  编写测试方法"></a>1.6.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    brand.setBrandName(brandName);</span><br><span class="line">    brand.setDescription(description);</span><br><span class="line">    brand.setOrdered(ordered);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true); //设置自动提交事务，这种情况不需要手动提交事务了</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.add(brand);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img src="/assets/image-20210729220348255.png" alt="image-20210729220348255"></p>
<h4 id="1-6-4-添加-主键返回"><a href="#1-6-4-添加-主键返回" class="headerlink" title="1.6.4  添加-主键返回"></a>1.6.4  添加-主键返回</h4><p>在数据添加成功后，有时候需要获取插入数据库数据的主键（主键是自增长）。</p>
<p>比如：添加订单和订单项，如下图就是京东上的订单</p>
<img src="assets/image-20210729221207962.png" alt="image-20210729221207962" style="zoom:80%;" />

<p>订单数据存储在订单表中，订单项存储在订单项表中。</p>
<ul>
<li><p>添加订单数据</p>
<img src="assets/image-20210729221049462.png" alt="image-20210729221049462" style="zoom:80%;" />
</li>
<li><p>添加订单项数据，订单项中需要设置所属订单的id</p>
<img src="assets/image-20210729221058898.png" alt="image-20210729221058898" style="zoom:80%;" /></li>
</ul>
<p>明白了什么时候 <code>主键返回</code> 。接下来我们简单模拟一下，在添加完数据后打印id属性值，能打印出来说明已经获取到了。</p>
<p>我们将上面添加品牌数据的案例中映射配置文件里 <code>statement</code> 进行修改，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 insert 标签上添加如下属性：</p>
<ul>
<li>useGeneratedKeys：是够获取自动增长的主键值。true表示获取</li>
<li>keyProperty  ：指定将获取到的主键值封装到哪儿个属性里</li>
</ul>
</blockquote>
<h3 id="1-7-修改"><a href="#1-7-修改" class="headerlink" title="1.7  修改"></a>1.7  修改</h3><img src="assets/image-20210729222642700.png" alt="image-20210729222642700" style="zoom:80%;" />

<p>如图所示是修改页面，用户在该页面书写需要修改的数据，点击 <code>提交</code> 按钮，就会将数据库中对应的数据进行修改。注意一点，如果哪儿个输入框没有输入内容，我们是将表中数据对应字段值替换为空白还是保留字段之前的值？答案肯定是保留之前的数据。</p>
<p>接下来我们就具体来实现</p>
<h4 id="1-7-1-编写接口方法"><a href="#1-7-1-编写接口方法" class="headerlink" title="1.7.1  编写接口方法"></a>1.7.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义修改方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述方法参数 Brand 就是封装了需要修改的数据，而id肯定是有数据的，这也是和添加方法的区别。</p>
</blockquote>
<h4 id="1-7-2-编写SQL语句"><a href="#1-7-2-编写SQL语句" class="headerlink" title="1.7.2  编写SQL语句"></a>1.7.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写修改数据的 <code>statement</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand_name = #&#123;brandName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            company_name = #&#123;companyName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>set</em> 标签可以用于动态包含需要更新的列，忽略其它不更新的列。</p>
</blockquote>
<h4 id="1-7-3-编写测试方法"><a href="#1-7-3-编写测试方法" class="headerlink" title="1.7.3  编写测试方法"></a>1.7.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;波导手机,手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    <span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line">    <span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line">    <span class="comment">//        brand.setDescription(description);</span></span><br><span class="line">    <span class="comment">//        brand.setOrdered(ordered);</span></span><br><span class="line">    brand.setId(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> brandMapper.update(brand);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行测试方法结果如下：</p>
<p><img src="/assets/image-20210729224205522.png" alt="image-20210729224205522"></p>
<p>从结果中SQL语句可以看出，只修改了 <code>status</code>  字段值，因为我们给的数据中只给Brand实体对象的 <code>status</code> 属性设置值了。这就是 <code>set</code> 标签的作用。</p>
<h3 id="1-8-删除一行数据"><a href="#1-8-删除一行数据" class="headerlink" title="1.8  删除一行数据"></a>1.8  删除一行数据</h3><p><img src="/assets/image-20210729224549305.png" alt="image-20210729224549305"></p>
<p>如上图所示，每行数据后面都有一个 <code>删除</code> 按钮，当用户点击了该按钮，就会将改行数据删除掉。那我们就需要思考，这种删除是根据什么进行删除呢？是通过主键id删除，因为id是表中数据的唯一标识。</p>
<p>接下来就来实现该功能。</p>
<h4 id="1-8-1-编写接口方法"><a href="#1-8-1-编写接口方法" class="headerlink" title="1.8.1  编写接口方法"></a>1.8.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id删除方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id删除</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-8-2-编写SQL语句"><a href="#1-8-2-编写SQL语句" class="headerlink" title="1.8.2  编写SQL语句"></a>1.8.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除一行数据的 <code>statement</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-8-3-编写测试方法"><a href="#1-8-3-编写测试方法" class="headerlink" title="1.8.3  编写测试方法"></a>1.8.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.deleteById(id);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行过程只要没报错，直接到数据库查询数据是否还存在。</p>
<h3 id="1-9-批量删除"><a href="#1-9-批量删除" class="headerlink" title="1.9  批量删除"></a>1.9  批量删除</h3><img src="assets/image-20210729225713894.png" alt="image-20210729225713894" style="zoom:70%;" />



<p>如上图所示，用户可以选择多条数据，然后点击上面的 <code>删除</code> 按钮，就会删除数据库中对应的多行数据。</p>
<h4 id="1-9-1-编写接口方法"><a href="#1-9-1-编写接口方法" class="headerlink" title="1.9.1  编写接口方法"></a>1.9.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义删除多行数据的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 批量删除</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数是一个数组，数组中存储的是多条数据的id</p>
</blockquote>
<h4 id="1-9-2-编写SQL语句"><a href="#1-9-2-编写SQL语句" class="headerlink" title="1.9.2  编写SQL语句"></a>1.9.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除多条数据的 <code>statement</code>。</p>
<p>编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 <code>foreach</code> 标签供我们使用</p>
<p><strong>foreach 标签</strong></p>
<p>用来迭代任何可迭代的对象（如数组，集合）。</p>
<ul>
<li>collection 属性：<ul>
<li>mybatis会将数组参数，封装为一个Map集合。<ul>
<li>默认：array &#x3D; 数组</li>
<li>使用@Param注解改变map集合的默认key的名称</li>
</ul>
</li>
</ul>
</li>
<li>item 属性：本次迭代获取到的元素。</li>
<li>separator 属性：集合项迭代之间的分隔符。<code>foreach</code> 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。</li>
<li>open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次</li>
<li>close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id</span><br><span class="line">    in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>假如数组中的id数据是{1,2,3}，那么拼接后的sql语句就是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="1-9-3-编写测试方法"><a href="#1-9-3-编写测试方法" class="headerlink" title="1.9.3  编写测试方法"></a>1.9.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span>[] ids = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.deleteByIds(ids);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-10-Mybatis参数传递"><a href="#1-10-Mybatis参数传递" class="headerlink" title="1.10  Mybatis参数传递"></a>1.10  Mybatis参数传递</h3><p>Mybatis 接口方法中可以接收各种各样的参数，如下：</p>
<ul>
<li>多个参数</li>
<li>单个参数：单个参数又可以是如下类型<ul>
<li>POJO 类型</li>
<li>Map 集合类型</li>
<li>Collection 集合类型</li>
<li>List 集合类型</li>
<li>Array 类型</li>
<li>其他类型</li>
</ul>
</li>
</ul>
<h4 id="1-10-1-多个参数"><a href="#1-10-1-多个参数" class="headerlink" title="1.10.1  多个参数"></a>1.10.1  多个参数</h4><p>如下面的代码，就是接收两个参数，而接收多个参数需要使用 <code>@Param</code> 注解，那么为什么要加该注解呢？这个问题要弄明白就必须来研究Mybatis 底层对于这些参数是如何处理的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;username&#125;</span><br><span class="line">    	and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们在接口方法中定义多个参数，Mybatis 会将这些参数封装成 Map 集合对象，值就是参数值，而键在没有使用 <code>@Param</code> 注解时有以下命名规则：</p>
<ul>
<li><p>以 arg 开头  ：第一个参数就叫 arg0，第二个参数就叫 arg1，以此类推。如：</p>
<blockquote>
<p>map.put(“arg0”，参数值1);</p>
<p>map.put(“arg1”，参数值2);</p>
</blockquote>
</li>
<li><p>以 param 开头 ： 第一个参数就叫 param1，第二个参数就叫 param2，依次类推。如：</p>
<blockquote>
<p>map.put(“param1”，参数值1);</p>
<p>map.put(“param2”，参数值2);</p>
</blockquote>
</li>
</ul>
<p><strong>代码验证：</strong></p>
<ul>
<li><p>在 <code>UserMapper</code> 接口中定义如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;arg0&#125;</span><br><span class="line">    	and password=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;param1&#125;</span><br><span class="line">    	and password=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行代码结果如下</p>
<img src="assets/image-20210805230303461.png" alt="image-20210805230303461" style="zoom:80%;" />

<p>在映射配合文件的SQL语句中使用用 <code>arg</code> 开头的和 <code>param</code> 书写，代码的可读性会变的特别差，此时可以使用 <code>@Param</code> 注解。</p>
</li>
</ul>
<p>在接口方法参数上使用 <code>@Param</code> 注解，Mybatis 会将 <code>arg</code> 开头的键名替换为对应注解的属性值。</p>
<p><strong>代码验证：</strong></p>
<ul>
<li><p>在 <code>UserMapper</code> 接口中定义如下方法，在 <code>username</code> 参数前加上 <code>@Param</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, String password)</span>;</span><br></pre></td></tr></table></figure>

<p>Mybatis 在封装 Map 集合时，键名就会变成如下：</p>
<blockquote>
<p>map.put(“username”，参数值1);</p>
<p>map.put(“arg1”，参数值2);</p>
<p>map.put(“param1”，参数值1);</p>
<p>map.put(“param2”，参数值2);</p>
</blockquote>
</li>
<li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;username&#125;</span><br><span class="line">    	and password=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序结果没有报错。而如果将 <code>#&#123;&#125;</code> 中的 <code>username</code> 还是写成  <code>arg0</code> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;arg0&#125;</span><br><span class="line">    	and password=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序则可以看到错误</p>
<p><img src="/assets/image-20210805231727206.png" alt="image-20210805231727206"></p>
</li>
</ul>
<p>&#x3D;&#x3D;结论：以后接口参数是多个时，在每个参数上都使用 <code>@Param</code> 注解。这样代码的可读性更高。&#x3D;&#x3D;</p>
<h4 id="1-10-2-单个参数"><a href="#1-10-2-单个参数" class="headerlink" title="1.10.2  单个参数"></a>1.10.2  单个参数</h4><ul>
<li><p>POJO 类型</p>
<p>直接使用。要求 <code>属性名</code> 和 <code>参数占位符名称</code> 一致</p>
</li>
<li><p>Map 集合类型</p>
<p>直接使用。要求 <code>map集合的键名</code> 和 <code>参数占位符名称</code> 一致</p>
</li>
<li><p>Collection 集合类型</p>
<p>Mybatis 会将集合封装到 map 集合中，如下：</p>
<blockquote>
<p>map.put(“arg0”，collection集合);</p>
<p>map.put(“collection”，collection集合;</p>
</blockquote>
<p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p>
</li>
<li><p>List 集合类型</p>
<p>Mybatis 会将集合封装到 map 集合中，如下：</p>
<blockquote>
<p>map.put(“arg0”，list集合);</p>
<p>map.put(“collection”，list集合);</p>
<p>map.put(“list”，list集合);</p>
</blockquote>
<p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p>
</li>
<li><p>Array 类型</p>
<p>Mybatis 会将集合封装到 map 集合中，如下：</p>
<blockquote>
<p>map.put(“arg0”，数组);</p>
<p>map.put(“array”，数组);</p>
</blockquote>
<p>&#x3D;&#x3D;可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。&#x3D;&#x3D;</p>
</li>
<li><p>其他类型</p>
<p>比如int类型，<code>参数占位符名称</code> 叫什么都可以。尽量做到见名知意</p>
</li>
</ul>
<h2 id="2，注解实现CRUD"><a href="#2，注解实现CRUD" class="headerlink" title="2，注解实现CRUD"></a>2，注解实现CRUD</h2><p>使用注解开发会比配置文件开发更加方便。如下就是使用注解进行开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(value = &quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">select</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;</p>
<ul>
<li>注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code></li>
</ul>
</blockquote>
<p>Mybatis 针对 CURD 操作都提供了对应的注解，已经做到见名知意。如下：</p>
<ul>
<li>查询 ：@Select</li>
<li>添加 ：@Insert</li>
<li>修改 ：@Update</li>
<li>删除 ：@Delete</li>
</ul>
<p>接下来我们做一个案例来使用 Mybatis 的注解开发</p>
<p><strong>代码实现：</strong></p>
<ul>
<li><p>将之前案例中 <code>UserMapper.xml</code> 中的 根据id查询数据 的 <code>statement</code> 注释掉</p>
<img src="assets/image-20210805235229938.png" alt="image-20210805235229938" style="zoom:70%;" />
</li>
<li><p>在 <code>UserMapper</code> 接口的 <code>selectById</code> 方法上添加注解</p>
<img src="assets/image-20210805235405070.png" alt="image-20210805235405070" style="zoom:70%;" />
</li>
<li><p>运行测试程序也能正常查询到数据</p>
</li>
</ul>
<p>我们课程上只演示这一个查询的注解开发，其他的同学们下来可以自己实现，都是比较简单。</p>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;在官方文档中 <code>入门</code> 中有这样的一段话：</p>
<p><img src="/assets/image-20210805234302849.png" alt="image-20210805234302849"></p>
<p>所以，&#x3D;&#x3D;注解完成简单功能，配置文件完成复杂功能。&#x3D;&#x3D;</p>
<p>而我们之前写的动态 SQL 就是复杂的功能，如果用注解使用的话，就需要使用到 Mybatis 提供的SQL构建器来完成，而对应的代码如下：</p>
<img src="assets/image-20210805234842497.png" alt="image-20210805234842497" style="zoom:70%;" />

<p>上述代码将java代码和SQL语句融到了一块，使得代码的可读性大幅度降低。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql高级</title>
    <url>/2022/08/03/mysql%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="mysql高级"><a href="#mysql高级" class="headerlink" title="mysql高级"></a>mysql高级</h2><p><strong>今日目标</strong></p>
<blockquote>
<ul>
<li><p>掌握约束的使用</p>
</li>
<li><p>掌握表关系及建表原则</p>
</li>
<li><p>重点掌握多表查询操作</p>
</li>
<li><p>掌握事务操作</p>
</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="1，约束"><a href="#1，约束" class="headerlink" title="1，约束"></a>1，约束</h2><img src="assets/image-20210724104749122.png" alt="image-20210724104749122" style="zoom:70%;" />

<p>上面表中可以看到表中数据存在一些问题：</p>
<ul>
<li><p>id 列一般是用标示数据的唯一性的，而上述表中的id为1的有三条数据，并且 <code>马花疼</code> 没有id进行标示</p>
</li>
<li><p><code>柳白</code> 这条数据的age列的数据是3000，而人也不可能活到3000岁</p>
</li>
<li><p><code>马运</code>  这条数据的math数学成绩是-5，而数学学得再不好也不可能出现负分</p>
</li>
<li><p><code>柳青</code> 这条数据的english列（英文成绩）值为null，而成绩即使没考也得是0分</p>
</li>
</ul>
<p>针对上述数据问题，我们就可以从数据库层面在添加数据的时候进行限制，这个就是约束。</p>
<h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1  概念"></a>1.1  概念</h3><ul>
<li><p>约束是作用于表中列上的规则，用于限制加入表的数据</p>
<p>例如：我们可以给id列加约束，让其值不能重复，不能为null值。</p>
</li>
<li><p>约束的存在保证了数据库中数据的正确性、有效性和完整性</p>
<p>添加约束可以在添加数据的时候就限制不正确的数据，年龄是3000，数学成绩是-5分这样无效的数据，继而保障数据的完整性。</p>
</li>
</ul>
<h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2  分类"></a>1.2  分类</h3><ul>
<li><strong>非空约束： 关键字是 NOT NULL</strong></li>
</ul>
<p>  保证列中所有的数据不能有null值。</p>
<p>  例如：id列在添加 <code>马花疼</code> 这条数据时就不能添加成功。</p>
<ul>
<li><p><strong>唯一约束：关键字是  UNIQUE</strong></p>
<p>保证列中所有数据各不相同。</p>
<p>例如：id列中三条数据的值都是1，这样的数据在添加时是绝对不允许的。</p>
</li>
<li><p><strong>主键约束： 关键字是  PRIMARY KEY</strong></p>
</li>
</ul>
<p>  主键是一行数据的唯一标识，要求非空且唯一。一般我们都会给没张表添加一个主键列用来唯一标识数据。</p>
<p>  例如：上图表中id就可以作为主键，来标识每条数据。那么这样就要求数据中id的值不能重复，不能为null值。</p>
<ul>
<li><p><strong>检查约束： 关键字是  CHECK</strong> </p>
<p>保证列中的值满足某一条件。</p>
<p>例如：我们可以给age列添加一个范围，最低年龄可以设置为1，最大年龄就可以设置为300，这样的数据才更合理些。</p>
<blockquote>
<p>注意：MySQL不支持检查约束。</p>
<p>这样是不是就没办法保证年龄在指定的范围内了？从数据库层面不能保证，以后可以在java代码中进行限制，一样也可以实现要求。</p>
</blockquote>
</li>
<li><p><strong>默认约束： 关键字是   DEFAULT</strong></p>
<p>保存数据时，未指定值则采用默认值。</p>
<p>例如：我们在给english列添加该约束，指定默认值是0，这样在添加数据时没有指定具体值时就会采用默认给定的0。</p>
</li>
<li><p><strong>外键约束： 关键字是  FOREIGN KEY</strong></p>
<p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p>
<p>外键约束现在可能还不太好理解，后面我们会重点进行讲解。</p>
</li>
</ul>
<h3 id="1-3-非空约束"><a href="#1-3-非空约束" class="headerlink" title="1.3  非空约束"></a>1.3  非空约束</h3><ul>
<li><p>概念</p>
<p>非空约束用于保证列中所有数据不能有NULL值</p>
</li>
<li><p>语法</p>
<ul>
<li><p>添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-4-唯一约束"><a href="#1-4-唯一约束" class="headerlink" title="1.4  唯一约束"></a>1.4  唯一约束</h3><ul>
<li><p>概念</p>
<p>唯一约束用于保证列中所有数据各不相同</p>
</li>
<li><p>语法</p>
<ul>
<li><p>添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加唯一约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">UNIQUE</span> [AUTO_INCREMENT],</span><br><span class="line">   <span class="comment">-- AUTO_INCREMENT: 当不指定值时自动增长</span></span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">UNIQUE</span>(列名)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 字段名;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-5-主键约束"><a href="#1-5-主键约束" class="headerlink" title="1.5  主键约束"></a>1.5  主键约束</h3><ul>
<li><p>概念</p>
<p>主键是一行数据的唯一标识，要求非空且唯一</p>
<p>一张表只能有一个主键</p>
</li>
<li><p>语法</p>
<ul>
<li><p>添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">PRIMARY</span> KEY [AUTO_INCREMENT],</span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">PRIMARY</span> KEY(列名)</span><br><span class="line">); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段名);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-6-默认约束"><a href="#1-6-默认约束" class="headerlink" title="1.6  默认约束"></a>1.6  默认约束</h3><ul>
<li><p>概念</p>
<p>保存数据时，未指定值则采用默认值</p>
</li>
<li><p>语法</p>
<ul>
<li><p>添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加默认约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">   …</span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> 默认值;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-7-约束练习"><a href="#1-7-约束练习" class="headerlink" title="1.7  约束练习"></a>1.7  约束练习</h3><p><strong>根据需求，为表添加合适的约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">	id <span class="type">INT</span>,  <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名，非空且唯一</span></span><br><span class="line">    joindate <span class="type">DATE</span>,  <span class="comment">-- 入职日期，非空</span></span><br><span class="line">    salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),  <span class="comment">-- 工资，非空</span></span><br><span class="line">    bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)  <span class="comment">-- 奖金，如果没有将近默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面一定给出了具体的要求，我们可以根据要求创建这张表，并为每一列添加对应的约束。建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 员工姓名，非空并且唯一</span></span><br><span class="line">  joindate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 入职日期，非空</span></span><br><span class="line">  salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 工资，非空</span></span><br><span class="line">  bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">-- 奖金，如果没有奖金默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>通过上面语句可以创建带有约束的 <code>emp</code> 表，约束能不能发挥作用呢。接下来我们一一进行验证，先添加一条没有问题的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>验证主键约束，非空且唯一</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724114548170.png" alt="image-20210724114548170" style="zoom:80%;" />

<p>从上面的结果可以看到，字段 <code>id</code> 不能为null。那我们重新添加一条数据，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724114805350.png" alt="image-20210724114805350" style="zoom:80%;" />

<p>从上面结果可以看到，1这个值重复了。所以主键约束是用来限制数据非空且唯一的。那我们再添加一条符合要求的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724115024106.png" alt="image-20210724115024106" style="zoom:80%;" />

<ul>
<li><strong>验证非空约束</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">3</span>,<span class="keyword">null</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724115149415.png" alt="image-20210724115149415" style="zoom:80%;" />

<p>从上面结果可以看到，<code>ename</code> 字段的非空约束生效了。</p>
<ul>
<li><strong>验证唯一约束</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724115336916.png" alt="image-20210724115336916" style="zoom:80%;" />

<p>从上面结果可以看到，<code>ename</code> 字段的唯一约束生效了。</p>
<ul>
<li><strong>验证默认约束</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>);</span><br></pre></td></tr></table></figure>

<p>执行完上面语句后查询表中数据，如下图可以看到王五这条数据的bonus列就有了默认值0。</p>
<img src="assets/image-20210724115547951.png" alt="image-20210724115547951" style="zoom:80%;" />

<p>&#x3D;&#x3D;注意：默认约束只有在不给值时才会采用默认值。如果给了null，那值就是null值。&#x3D;&#x3D;</p>
<p>如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<p>执行完上面语句后查询表中数据，如下图可以看到赵六这条数据的bonus列的值是null。</p>
<img src="assets/image-20210724115826516.png" alt="image-20210724115826516" style="zoom:80%;" />

<ul>
<li><strong>验证自动增长： auto_increment  当列是数字类型 并且唯一约束</strong></li>
</ul>
<p>重新创建 <code>emp</code> 表，并给id列添加自动增长</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment, <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 员工姓名，非空并且唯一</span></span><br><span class="line">  joindate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 入职日期，非空</span></span><br><span class="line">  salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 工资，非空</span></span><br><span class="line">  bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">-- 奖金，如果没有奖金默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接下来给emp添加数据，分别验证不给id列添加值以及给id列添加null值，id列的值会不会自动增长：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;赵六2&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;赵六3&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>



<h3 id="1-8-外键约束"><a href="#1-8-外键约束" class="headerlink" title="1.8  外键约束"></a>1.8  外键约束</h3><h4 id="1-8-1-概述"><a href="#1-8-1-概述" class="headerlink" title="1.8.1  概述"></a>1.8.1  概述</h4><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p>
<p>如何理解上面的概念呢？如下图有两张表，员工表和部门表：</p>
<img src="assets/image-20210724120904180.png" alt="image-20210724120904180" style="zoom:80%;" />

<p>员工表中的dep_id字段是部门表的id字段关联，也就是说1号学生张三属于1号部门研发部的员工。现在我要删除1号部门，就会出现错误的数据（员工表中属于1号部门的数据）。而我们上面说的两张表的关系只是我们认为它们有关系，此时需要通过外键让这两张表产生数据库层面的关系，这样你要删除部门表中的1号部门的数据将无法删除。</p>
<h4 id="1-8-2-语法"><a href="#1-8-2-语法" class="headerlink" title="1.8.2  语法"></a>1.8.2  语法</h4><ul>
<li>添加外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名) </span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名称) <span class="keyword">REFERENCES</span> 主表名称(主表列名称);</span><br></pre></td></tr></table></figure>

<ul>
<li>删除外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure>



<h4 id="1-8-3-练习"><a href="#1-8-3-练习" class="headerlink" title="1.8.3  练习"></a>1.8.3  练习</h4><p>根据上述语法创建员工表和部门表，并添加上外键约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 员工表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">int</span>,</span><br><span class="line">	dep_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 添加外键 dep_id,关联 dept 表的id主键</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> dept(id)	</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加 2 个部门</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(dep_name,addr) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工,dep_id 表示员工所在的部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (NAME, age, dep_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;赵六&#x27;</span>, <span class="number">20</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;孙七&#x27;</span>, <span class="number">22</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;周八&#x27;</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>此时删除 <code>研发部</code> 这条数据，会发现无法删除。</p>
<p>删除外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">FOREIGN</span> key fk_emp_dept;</span><br></pre></td></tr></table></figure>

<p>重新添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> key(dep_id) <span class="keyword">REFERENCES</span> dept(id);</span><br></pre></td></tr></table></figure>



<h2 id="2，数据库设计"><a href="#2，数据库设计" class="headerlink" title="2，数据库设计"></a>2，数据库设计</h2><h3 id="2-1-数据库设计简介"><a href="#2-1-数据库设计简介" class="headerlink" title="2.1  数据库设计简介"></a>2.1  数据库设计简介</h3><ul>
<li><p>软件的研发步骤</p>
<img src="assets/image-20210724130925801.png" alt="image-20210724130925801" style="zoom:80%;" />
</li>
<li><p>数据库设计概念</p>
<ul>
<li>数据库设计就是根据业务系统的具体需求，结合我们所选用的DBMS，为这个业务系统构造出最优的数据存储模型。</li>
<li>建立数据库中的&#x3D;&#x3D;表结构&#x3D;&#x3D;以及&#x3D;&#x3D;表与表之间的关联关系&#x3D;&#x3D;的过程。</li>
<li>有哪些表？表里有哪些字段？表和表之间有什么关系？</li>
</ul>
</li>
<li><p>数据库设计的步骤</p>
<ul>
<li><p>需求分析（数据是什么? 数据具有哪些属性? 数据与属性的特点是什么）</p>
</li>
<li><p>逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）</p>
<p>如下图就是ER(Entity&#x2F;Relation)图：</p>
<img src="assets/image-20210724131210759.png" alt="image-20210724131210759" style="zoom:80%;" />
</li>
<li><p>物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）</p>
</li>
<li><p>维护设计（1.对新的需求进行建表；2.表优化）</p>
</li>
</ul>
</li>
<li><p>表关系</p>
<ul>
<li><p>一对一</p>
<ul>
<li>如：用户 和 用户详情</li>
<li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li>
</ul>
<img src="assets/image-20210724133015129.png" alt="image-20210724133015129" style="zoom:80%;" />

<p>上图左边是用户的详细信息，而我们真正在展示用户信息时最长用的则是上图右边红框所示，所以我们会将详细信息查分成两周那个表。</p>
</li>
<li><p>一对多</p>
<ul>
<li><p>如：部门 和 员工</p>
</li>
<li><p>一个部门对应多个员工，一个员工对应一个部门。如下图：</p>
<img src="assets/image-20210724133443094.png" alt="image-20210724133443094" style="zoom:90%;" /></li>
</ul>
</li>
<li><p>多对多</p>
<ul>
<li><p>如：商品 和 订单</p>
</li>
<li><p>一个商品对应多个订单，一个订单包含多个商品。如下图：</p>
<img src="assets/image-20210724133704682.png" alt="image-20210724133704682" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-表关系-一对多"><a href="#2-2-表关系-一对多" class="headerlink" title="2.2  表关系(一对多)"></a>2.2  表关系(一对多)</h3><ul>
<li><p>一对多</p>
<ul>
<li>如：部门 和 员工</li>
<li>一个部门对应多个员工，一个员工对应一个部门。</li>
</ul>
</li>
<li><p>实现方式</p>
<p>&#x3D;&#x3D;在多的一方建立外键，指向一的一方的主键&#x3D;&#x3D;</p>
</li>
<li><p>案例</p>
<p>我们还是以 <code>员工表</code> 和 <code>部门表</code> 举例:</p>
<img src="assets/image-20210724134145803.png" alt="image-20210724134145803" style="zoom:70%;" />

<p>经过分析发现，员工表属于多的一方，而部门表属于一的一方，此时我们会在员工表中添加一列（dep_id），指向于部门表的主键（id）：</p>
<img src="assets/image-20210724134318685.png" alt="image-20210724134318685" style="zoom:70%;" />

<p>建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_dept(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 员工表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	age <span class="type">int</span>,</span><br><span class="line">	dep_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 添加外键 dep_id,关联 dept 表的id主键</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> tb_dept(id)	</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>查看表结构模型图：</p>
<img src="assets/image-20210724140456921.png" alt="image-20210724140456921" style="zoom:80%;" /></li>
</ul>
<h3 id="2-3-表关系-多对多"><a href="#2-3-表关系-多对多" class="headerlink" title="2.3  表关系(多对多)"></a>2.3  表关系(多对多)</h3><ul>
<li><p>多对多</p>
<ul>
<li>如：商品 和 订单</li>
<li>一个商品对应多个订单，一个订单包含多个商品</li>
</ul>
</li>
<li><p>实现方式</p>
<p>&#x3D;&#x3D;建立第三张中间表，中间表至少包含两个外键，分别关联两方主键&#x3D;&#x3D;</p>
</li>
<li><p>案例</p>
<p>我们以 <code>订单表</code> 和 <code>商品表</code> 举例：</p>
<img src="assets/image-20210724134735939.png" alt="image-20210724134735939" style="zoom:70%;" />

<p>经过分析发现，订单表和商品表都属于多的一方，此时需要创建一个中间表，在中间表中添加订单表的外键和商品表的外键指向两张表的主键：</p>
<img src="assets/image-20210724135054834.png" alt="image-20210724135054834" style="zoom:70%;" />

<p>建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order_goods;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_goods;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	payment <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">	payment_type TINYINT,</span><br><span class="line">	status TINYINT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_goods(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	title <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">	price <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单商品中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order_goods(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	order_id <span class="type">int</span>,</span><br><span class="line">	goods_id <span class="type">int</span>,</span><br><span class="line">	count <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_order_id <span class="keyword">FOREIGN</span> key(order_id) <span class="keyword">REFERENCES</span> tb_order(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_goods_id <span class="keyword">FOREIGN</span> key(goods_id) <span class="keyword">REFERENCES</span> tb_goods(id);</span><br></pre></td></tr></table></figure>

<p>查看表结构模型图：</p>
<img src="assets/image-20210724140307910.png" alt="image-20210724140307910" style="zoom:80%;" /></li>
</ul>
<h3 id="2-4-表关系-一对一"><a href="#2-4-表关系-一对一" class="headerlink" title="2.4  表关系(一对一)"></a>2.4  表关系(一对一)</h3><ul>
<li><p>一对一</p>
<ul>
<li>如：用户 和 用户详情</li>
<li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li>
</ul>
</li>
<li><p>实现方式</p>
<p>&#x3D;&#x3D;在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)&#x3D;&#x3D;</p>
</li>
<li><p>案例</p>
<p>我们以 <code>用户表</code> 举例：</p>
<img src="assets/image-20210724135346913.png" alt="image-20210724135346913" style="zoom:70%;" />

<p>而在真正使用过程中发现 id、photo、nickname、age、gender 字段比较常用，此时就可以将这张表查分成两张表。</p>
</li>
</ul>
<p>​	<img src="assets/image-20210724135649341.png" alt="image-20210724135649341" style="zoom:70%;" /></p>
<p>​	</p>
<p>​	建表语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_desc (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	edu <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">	income <span class="type">int</span>,</span><br><span class="line">	status <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">	des <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	photo <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">	nickname <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">	age <span class="type">int</span>,</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">	desc_id <span class="type">int</span> <span class="keyword">unique</span>,</span><br><span class="line">	<span class="comment">-- 添加外键</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_user_desc <span class="keyword">FOREIGN</span> KEY(desc_id) <span class="keyword">REFERENCES</span> tb_user_desc(id)	</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>​	查看表结构模型图：</p>
<img src="assets/image-20210724141445785.png" alt="image-20210724141445785" style="zoom:80%;" />



<h3 id="2-5-数据库设计案例"><a href="#2-5-数据库设计案例" class="headerlink" title="2.5  数据库设计案例"></a>2.5  数据库设计案例</h3><p>根据下图设计表及表和表之间的关系：</p>
<img src="assets/image-20210724141822204.png" alt="image-20210724141822204" style="zoom:80%;" />

<p>经过分析，我们分为 <code>专辑表</code>  <code>曲目表</code>  <code>短评表</code>  <code>用户表</code>   4张表。</p>
<img src="assets/image-20210724141550446.png" alt="image-20210724141550446" style="zoom:80%;" />

<p>一个专辑可以有多个曲目，一个曲目只能属于某一张专辑，所以专辑表和曲目表的关系是&#x3D;&#x3D;一对多&#x3D;&#x3D;。</p>
<p>一个专辑可以被多个用户进行评论，一个用户可以对多个专辑进行评论，所以专辑表和用户表的关系是 &#x3D;&#x3D;多对多&#x3D;&#x3D;。</p>
<p>一个用户可以发多个短评，一个短评只能是某一个人发的，所以用户表和短评表的关系是 &#x3D;&#x3D;一对多&#x3D;&#x3D;。</p>
<img src="assets/image-20210724142550839.png" alt="image-20210724142550839" style="zoom:80%;" />



<h2 id="3，多表查询"><a href="#3，多表查询" class="headerlink" title="3，多表查询"></a>3，多表查询</h2><p>多表查询顾名思义就是从多张表中一次性的查询出我们想要的数据。我们通过具体的sql给他们演示，先准备环境</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建部门表</span><br><span class="line">	<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">        did <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        dname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">	# 创建员工表</span><br><span class="line">	<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">        id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">        gender <span class="type">CHAR</span>(<span class="number">1</span>), <span class="comment">-- 性别</span></span><br><span class="line">        salary <span class="keyword">DOUBLE</span>, <span class="comment">-- 工资</span></span><br><span class="line">        join_date <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">        dep_id <span class="type">INT</span>,</span><br><span class="line">        <span class="keyword">FOREIGN</span> KEY (dep_id) <span class="keyword">REFERENCES</span> dept(did) <span class="comment">-- 外键，关联部门表(部门表的主键)</span></span><br><span class="line">    );</span><br><span class="line">	<span class="comment">-- 添加部门数据</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (dNAME) <span class="keyword">VALUES</span> (<span class="string">&#x27;研发部&#x27;</span>),(<span class="string">&#x27;市场部&#x27;</span>),(<span class="string">&#x27;财务部&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line">	<span class="comment">-- 添加员工数据</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(NAME,gender,salary,join_date,dep_id) <span class="keyword">VALUES</span></span><br><span class="line">	(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">7200</span>,<span class="string">&#x27;2013-02-24&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">	(<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">3600</span>,<span class="string">&#x27;2010-12-02&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">	(<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">9000</span>,<span class="string">&#x27;2008-08-08&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">	(<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;2015-10-07&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">	(<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">4500</span>,<span class="string">&#x27;2011-03-14&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">	(<span class="string">&#x27;小白龙&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">2500</span>,<span class="string">&#x27;2011-02-14&#x27;</span>,<span class="keyword">null</span>);	</span><br></pre></td></tr></table></figure>

<p>执行下面的多表查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept;  <span class="comment">-- 从emp和dept表中查询所有的字段数据</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="assets/image-20210724173630506.png" alt="image-20210724173630506" style="zoom:90%;" />

<p>从上面的结果我们看到有一些无效的数据，如 <code>孙悟空</code> 这个员工属于1号部门，但也同时关联的2、3、4号部门。所以我们要通过限制员工表中的 <code>dep_id</code> 字段的值和部门表 <code>did</code> 字段的值相等来消除这些无效的数据，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept <span class="keyword">where</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行后结果如下：</p>
<img src="assets/image-20210724174212443.png" alt="image-20210724174212443" style="zoom:90%;" />

<p>上面语句就是连接查询，那么多表查询都有哪些呢？</p>
<ul>
<li><p>连接查询</p>
<img src="assets/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" /> 

<ul>
<li>内连接查询 ：相当于查询AB交集数据</li>
<li>外连接查询<ul>
<li>左外连接查询 ：相当于查询A表所有数据和交集部门数据</li>
<li>右外连接查询 ： 相当于查询B表所有数据和交集部分数据</li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
</li>
</ul>
<h3 id="3-1-内连接查询"><a href="#3-1-内连接查询" class="headerlink" title="3.1  内连接查询"></a>3.1  内连接查询</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>,表<span class="number">2</span>… <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>内连接相当于查询 A B 交集数据</p>
</blockquote>
<img src="assets/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" />

<ul>
<li><p>案例</p>
<ul>
<li><p>隐式内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp,</span><br><span class="line">	dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行上述语句结果如下：</p>
<img src="assets/image-20210724175344508.png" alt="image-20210724175344508" style="zoom:80%;" />
</li>
<li><p>查询 emp的 name， gender，dept表的dname</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp. NAME,</span><br><span class="line">	emp.gender,</span><br><span class="line">	dept.dname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp,</span><br><span class="line">	dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行语句结果如下：</p>
<img src="assets/image-20210724175518159.png" alt="image-20210724175518159" style="zoom:80%;" />

<p>上面语句中使用表名指定字段所属有点麻烦，sql也支持给表指别名，上述语句可以改进为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	t1. NAME,</span><br><span class="line">	t1.gender,</span><br><span class="line">	t2.dname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp t1,</span><br><span class="line">	dept t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t1.dep_id <span class="operator">=</span> t2.did;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显式内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br><span class="line"><span class="comment">-- 上面语句中的inner可以省略，可以书写为如下语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp  <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<img src="assets/image-20210724180103531.png" alt="image-20210724180103531" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
<h3 id="3-2-外连接查询"><a href="#3-2-外连接查询" class="headerlink" title="3.2  外连接查询"></a>3.2  外连接查询</h3><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>左外连接：相当于查询A表所有数据和交集部分数据</p>
<p>右外连接：相当于查询B表所有数据和交集部分数据</p>
</blockquote>
<img src="assets/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" />
</li>
<li><p>案例</p>
<ul>
<li><p>查询emp表所有数据和对应的部门信息（左外连接）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行语句结果如下：</p>
<img src="assets/image-20210724180542757.png" alt="image-20210724180542757" style="zoom:80%;" />

<p>结果显示查询到了左表（emp）中所有的数据及两张表能关联的数据。</p>
</li>
<li><p>查询dept表所有数据和对应的员工信息（右外连接）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure>

<p>执行语句结果如下：</p>
<img src="assets/image-20210724180613494.png" alt="image-20210724180613494" style="zoom:80%;" />

<p>结果显示查询到了右表（dept）中所有的数据及两张表能关联的数据。</p>
<p>要查询出部门表中所有的数据，也可以通过左外连接实现，只需要将两个表的位置进行互换：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3-子查询"><a href="#3-3-子查询" class="headerlink" title="3.3  子查询"></a>3.3  子查询</h3><ul>
<li><p>概念</p>
<p>&#x3D;&#x3D;查询中嵌套查询，称嵌套查询为子查询。&#x3D;&#x3D;</p>
<p>什么是查询中嵌套查询呢？我们通过一个例子来看：</p>
<p><strong>需求：查询工资高于猪八戒的员工信息。</strong></p>
<p>来实现这个需求，我们就可以通过二步实现，第一步：先查询出来 猪八戒的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;猪八戒&#x27;</span></span><br></pre></td></tr></table></figure>

<p> 第二步：查询工资高于猪八戒的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">3600</span>;</span><br></pre></td></tr></table></figure>

<p>第二步中的3600可以通过第一步的sql查询出来，所以将3600用第一步的sql语句进行替换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;猪八戒&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这就是查询语句中嵌套查询语句。</p>
</li>
<li><p>子查询根据查询结果不同，作用不同</p>
<ul>
<li>子查询语句结果是单行单列，子查询语句作为条件值，使用 &#x3D;  !&#x3D;  &gt;  &lt;  等进行条件判断</li>
<li>子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断</li>
<li>子查询语句结果是多行多列，子查询语句作为虚拟表</li>
</ul>
</li>
<li><p>案例</p>
<ul>
<li><p>查询 ‘财务部’ 和 ‘市场部’ 所有的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 &#x27;财务部&#x27; 或者 &#x27;市场部&#x27; 所有的员工的部门did</span></span><br><span class="line"><span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询入职日期是 ‘2011-11-11’ 之后的员工信息和部门信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询入职日期是 &#x27;2011-11-11&#x27; 之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 将上面语句的结果作为虚拟表和dept表进行内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ) t1, dept <span class="keyword">where</span> t1.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-4-案例"><a href="#3-4-案例" class="headerlink" title="3.4  案例"></a>3.4  案例</h3><ul>
<li>环境准备：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> job;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> salarygrade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  did <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 部门id</span></span><br><span class="line">  dname <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 部门名称</span></span><br><span class="line">  loc <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部门所在地</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职务表，职务名称，职务描述</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  jname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  description <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 员工id</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名</span></span><br><span class="line">  job_id <span class="type">INT</span>, <span class="comment">-- 职务id</span></span><br><span class="line">  mgr <span class="type">INT</span> , <span class="comment">-- 上级领导</span></span><br><span class="line">  joindate <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">  salary <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 工资</span></span><br><span class="line">  bonus <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 奖金</span></span><br><span class="line">  dept_id <span class="type">INT</span>, <span class="comment">-- 所在部门编号</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="keyword">FOREIGN</span> KEY (job_id) <span class="keyword">REFERENCES</span> job (id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="keyword">FOREIGN</span> KEY (dept_id) <span class="keyword">REFERENCES</span> dept (id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 工资等级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salarygrade (</span><br><span class="line">  grade <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,   <span class="comment">-- 级别</span></span><br><span class="line">  losalary <span class="type">INT</span>,  <span class="comment">-- 最低工资</span></span><br><span class="line">  hisalary <span class="type">INT</span> <span class="comment">-- 最高工资</span></span><br><span class="line">);</span><br><span class="line">				</span><br><span class="line"><span class="comment">-- 添加4个部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(did,dname,loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;教研部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="string">&#x27;学工部&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">(<span class="number">30</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),</span><br><span class="line">(<span class="number">40</span>,<span class="string">&#x27;财务部&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加4个职务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job (id, jname, description) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;董事长&#x27;</span>, <span class="string">&#x27;管理整个公司，接单&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;经理&#x27;</span>, <span class="string">&#x27;管理部门员工&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;销售员&#x27;</span>, <span class="string">&#x27;向客人推销产品&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;文员&#x27;</span>, <span class="string">&#x27;使用办公软件&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2000-12-17&#x27;</span>,<span class="string">&#x27;8000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;卢俊义&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-20&#x27;</span>,<span class="string">&#x27;16000.00&#x27;</span>,<span class="string">&#x27;3000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">&#x27;林冲&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-22&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;5000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1004</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-04-02&#x27;</span>,<span class="string">&#x27;29750.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1005</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-28&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;14000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1006</span>,<span class="string">&#x27;宋江&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-05-01&#x27;</span>,<span class="string">&#x27;28500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1007</span>,<span class="string">&#x27;刘备&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-09-01&#x27;</span>,<span class="string">&#x27;24500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1008</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-04-19&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1009</span>,<span class="string">&#x27;罗贯中&#x27;</span>,<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2001-11-17&#x27;</span>,<span class="string">&#x27;50000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1010</span>,<span class="string">&#x27;吴用&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-08&#x27;</span>,<span class="string">&#x27;15000.00&#x27;</span>,<span class="string">&#x27;0.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1011</span>,<span class="string">&#x27;沙僧&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-05-23&#x27;</span>,<span class="string">&#x27;11000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1012</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;9500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1013</span>,<span class="string">&#x27;小白龙&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1014</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="number">4</span>,<span class="number">1007</span>,<span class="string">&#x27;2002-01-23&#x27;</span>,<span class="string">&#x27;13000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加5个工资等级</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salarygrade(grade,losalary,hisalary) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="number">7000</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">12010</span>,<span class="number">14000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">14010</span>,<span class="number">20000</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">20010</span>,<span class="number">30000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">30010</span>,<span class="number">99990</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>需求</p>
<ol>
<li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">		1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">		2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">		3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 方式一 ：隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.id,</span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	job.jname,</span><br><span class="line">	job.description</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp,</span><br><span class="line">	job</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	emp.job_id <span class="operator">=</span> job.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二 ：显式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.id,</span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	job.jname,</span><br><span class="line">	job.description</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">		1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">		2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">		3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		4. 部门名称，部门位置 来自于 部门表 dept</span></span><br><span class="line"><span class="comment">		5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式一 ：隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.id,</span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	job.jname,</span><br><span class="line">	job.description,</span><br><span class="line">	dept.dname,</span><br><span class="line">	dept.loc</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp,</span><br><span class="line">	job,</span><br><span class="line">	dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	emp.job_id <span class="operator">=</span> job.id</span><br><span class="line">	<span class="keyword">and</span> dept.id <span class="operator">=</span> emp.dept_id</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二 ：显式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.id,</span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	job.jname,</span><br><span class="line">	job.description,</span><br><span class="line">	dept.dname,</span><br><span class="line">	dept.loc</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> dept.id <span class="operator">=</span> emp.dept_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询员工姓名，工资，工资等级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">		1. 员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">		2. 工资等级 信息在 salarygrade 工资等级表中</span></span><br><span class="line"><span class="comment">		3. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	t2.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp,</span><br><span class="line">	salarygrade t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	emp.salary <span class="operator">&gt;=</span> t2.losalary</span><br><span class="line"><span class="keyword">AND</span> emp.salary <span class="operator">&lt;=</span> t2.hisalary</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">		1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">		2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">		3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		4. 部门名称，部门位置 来自于 部门表 dept</span></span><br><span class="line"><span class="comment">		5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span></span><br><span class="line"><span class="comment">		6. 工资等级 信息在 salarygrade 工资等级表中</span></span><br><span class="line"><span class="comment">		7. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	emp.id,</span><br><span class="line">	emp.ename,</span><br><span class="line">	emp.salary,</span><br><span class="line">	job.jname,</span><br><span class="line">	job.description,</span><br><span class="line">	dept.dname,</span><br><span class="line">	dept.loc,</span><br><span class="line">	t2.grade</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> dept.id <span class="operator">=</span> emp.dept_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salarygrade t2 <span class="keyword">ON</span> emp.salary <span class="keyword">BETWEEN</span> t2.losalary <span class="keyword">and</span> t2.hisalary;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询出部门编号、部门名称、部门位置、部门人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">		1. 部门编号、部门名称、部门位置 来自于部门 dept 表</span></span><br><span class="line"><span class="comment">		2. 部门人数: 在emp表中 按照dept_id 进行分组，然后count(*)统计数量</span></span><br><span class="line"><span class="comment">		3. 使用子查询，让部门表和分组后的表进行内连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 根据部门id分组查询每一个部门id和员工数</span></span><br><span class="line"><span class="keyword">select</span> dept_id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	dept.id,</span><br><span class="line">	dept.dname,</span><br><span class="line">	dept.loc,</span><br><span class="line">	t1.count</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	dept,</span><br><span class="line">	(</span><br><span class="line">		<span class="keyword">SELECT</span></span><br><span class="line">			dept_id,</span><br><span class="line">			<span class="built_in">count</span>(<span class="operator">*</span>) count</span><br><span class="line">		<span class="keyword">FROM</span></span><br><span class="line">			emp</span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">			dept_id</span><br><span class="line">	) t1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	dept.id <span class="operator">=</span> t1.dept_id</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="4，事务"><a href="#4，事务" class="headerlink" title="4，事务"></a>4，事务</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1  概述"></a>4.1  概述</h3><blockquote>
<p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了&#x3D;&#x3D;一组数据库操作命令&#x3D;&#x3D;。</p>
<p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令&#x3D;&#x3D;要么同时成功，要么同时失败&#x3D;&#x3D;。</p>
<p>事务是一个不可分割的工作逻辑单元。</p>
</blockquote>
<p>这些概念不好理解，接下来举例说明，如下图有一张表</p>
<img src="assets/image-20210724224955876.png" alt="image-20210724224955876" style="zoom:80%;" />

<p>张三和李四账户中各有100块钱，现李四需要转换500块钱给张三，具体的转账操作为</p>
<ul>
<li>第一步：查询李四账户余额</li>
<li>第二步：从李四账户金额 -500</li>
<li>第三步：给张三账户金额 +500</li>
</ul>
<p>现在假设在转账过程中第二步完成后出现了异常第三步没有执行，就会造成李四账户金额少了500，而张三金额并没有多500；这样的系统是有问题的。如果解决呢？使用事务可以解决上述问题</p>
<img src="assets/image-20210724225537533.png" alt="image-20210724225537533" style="zoom:70%;" />

<p>从上图可以看到在转账前开启事务，如果出现了异常回滚事务，三步正常执行就提交事务，这样就可以完美解决问题。</p>
<h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2  语法"></a>4.2  语法</h3><ul>
<li><p>开启事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">或者  </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>回滚事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3-代码验证"><a href="#4-3-代码验证" class="headerlink" title="4.3  代码验证"></a>4.3  代码验证</h3><ul>
<li><p>环境准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">	money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>不加事务演示问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>整体执行结果肯定会出问题，我们查询账户表中数据，发现李四账户少了500。</p>
<img src="assets/image-20210724230250263.png" alt="image-20210724230250263" style="zoom:90%;" />
</li>
<li><p>添加事务sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<p>上面sql中的执行成功进选择执行提交事务，而出现问题则执行回滚事务的语句。以后我们肯定不可能这样操作，而是在java中进行操作，在java中可以抓取异常，没出现异常提交事务，出现异常回滚事务。</p>
</li>
</ul>
<h3 id="4-4-事务的四大特征"><a href="#4-4-事务的四大特征" class="headerlink" title="4.4  事务的四大特征"></a>4.4  事务的四大特征</h3><ul>
<li><p>原子性（Atomicity）: 事务是不可分割的最小操作单位，要么同时成功，要么同时失败</p>
</li>
<li><p>一致性（Consistency） :事务完成时，必须使所有的数据都保持一致状态</p>
</li>
<li><p>隔离性（Isolation） :多个事务之间，操作的可见性</p>
</li>
<li><p>持久性（Durability） :事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p>
</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;说明：&#x3D;&#x3D;</p>
<p>mysql中事务是自动提交的。</p>
<p>也就是说我们不添加事务执行sql语句，语句执行完毕会自动的提交事务。</p>
<p>可以通过下面语句查询默认提交方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT @<span class="meta">@autocommit</span>;</span><br></pre></td></tr></table></figure>

<p>查询到的结果是1 则表示自动提交，结果是0表示手动提交。当然也可以通过下面语句修改提交方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day01</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day01/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-Day01"><a href="#瑞吉外卖-Day01" class="headerlink" title="瑞吉外卖-Day01"></a>瑞吉外卖-Day01</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li><p>软件开发整体介绍</p>
</li>
<li><p>瑞吉外卖项目介绍</p>
</li>
<li><p>开发环境搭建</p>
</li>
<li><p>后台登录功能开发</p>
</li>
<li><p>后台退出功能开发</p>
</li>
</ul>
<span id="more"></span>



<h2 id="1-软件开发整体介绍"><a href="#1-软件开发整体介绍" class="headerlink" title="1. 软件开发整体介绍"></a>1. 软件开发整体介绍</h2><p>作为一名软件开发工程师,我们需要了解在软件开发过程中的开发流程， 以及软件开发过程中涉及到的岗位角色，角色的分工、职责， 并了解软件开发中涉及到的三种软件环境。那么这一小节，我们将从 软件开发流程、角色分工、软件环境 三个方面，来整体上介绍一下软件开发。</p>
<h3 id="1-1-软件开发流程"><a href="#1-1-软件开发流程" class="headerlink" title="1.1 软件开发流程"></a>1.1 软件开发流程</h3><p><img src="/assets/image-20210725231106363.png" alt="image-20210725231106363"> </p>
<p><strong>1). 第1阶段: 需求分析</strong></p>
<p>完成产品原型、需求规格说明书的编写。  </p>
<p>产品原型，一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。 </p>
<p>需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目有哪些功能，每一项功能的需求及业务流程是什么样的，都会在文档中描述。</p>
<p><strong>2). 第2阶段: 设计</strong></p>
<p>设计的内容包含 产品设计、UI界面设计、概要设计、详细设计、数据库设计。</p>
<p>在设计阶段，会出具相关的UI界面、及相关的设计文档。比如数据库设计，需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段，字段类型都会在文档中描述清楚。</p>
<p><strong>3). 第3阶段: 编码</strong></p>
<p>编写项目代码、并完成单元测试。</p>
<p>作为软件开发工程师，我们主要的工作就是在该阶段， 对分配给我们的模块功能，进行编码实现。编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。</p>
<p><strong>4). 第4阶段: 测试</strong></p>
<p>在该阶段中主要由测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。</p>
<p><strong>5). 第5阶段: 上线运维</strong></p>
<p>在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后， 再将我们开发好的项目，部署在服务器上运行。</p>
<p>我们作为软件开发工程师， 我们主要的任务是在编码阶段， 但是在一些小的项目组当中， 也会涉及到数据库的设计、测试等方面的工作。</p>
<h3 id="1-2-角色分工"><a href="#1-2-角色分工" class="headerlink" title="1.2 角色分工"></a>1.2 角色分工</h3><p>学习了软件开发的流程之后， 我们还有必要了解一下在整个软件开发过程中涉及到的岗位角色，以及各个角色的职责分工。</p>
<p><img src="/assets/image-20210725234015404.png" alt="image-20210725234015404"> </p>
<table>
<thead>
<tr>
<th>岗位&#x2F;角色</th>
<th>职责&#x2F;分工</th>
</tr>
</thead>
<tbody><tr>
<td>项目经理</td>
<td>对整个项目负责，任务分配、把控进度</td>
</tr>
<tr>
<td>产品经理</td>
<td>进行需求调研，输出需求调研文档、产品原型等</td>
</tr>
<tr>
<td>UI设计师</td>
<td>根据产品原型输出界面效果图</td>
</tr>
<tr>
<td>架构师</td>
<td>项目整体架构设计、技术选型等</td>
</tr>
<tr>
<td><font color='red'>开发工程师</font></td>
<td><font color='red'>功能代码实现</font></td>
</tr>
<tr>
<td>测试工程师</td>
<td>编写测试用例，输出测试报告</td>
</tr>
<tr>
<td>运维工程师</td>
<td>软件环境搭建、项目上线</td>
</tr>
</tbody></table>
<p>上述我们讲解的角色分工, 是在一个项目组中比较标准的角色分工, 但是在实际的项目中, 有一些项目组由于人员配置紧张, 可能并没有专门的架构师或测试人员, 这个时候可能需要有项目经理或者程序员兼任。</p>
<h3 id="1-3-软件环境"><a href="#1-3-软件环境" class="headerlink" title="1.3 软件环境"></a>1.3 软件环境</h3><p><img src="/assets/image-20210725234046008.png" alt="image-20210725234046008"> </p>
<p>在我们日常的软件开发中，会涉及到软件开发中的三套环境， 那么这三套环境分别是: 开发环境、测试环境、生产环境。 接下来，我们分别介绍一下这三套环境的作用和特点。</p>
<p><strong>1). 开发环境(development)</strong></p>
<p>我们作为软件开发人员，在开发阶段使用的环境，就是开发环境，一般外部用户无法访问。</p>
<p>比如，我们在开发中使用的MySQL数据库和其他的一些常用软件，我们可以安装在本地， 也可以安装在一台专门的服务器中， 这些应用软件仅仅在软件开发过程中使用， 项目测试、上线时，我们不会使用这套环境了，这个环境就是开发环境。</p>
<p><strong>2). 测试环境(testing)</strong></p>
<p>当软件开发工程师，将项目的功能模块开发完毕，并且单元测试通过后，就需要将项目部署到测试服务器上，让测试人员对项目进行测试。那这台测试服务器就是专门给测试人员使用的环境， 也就是测试环境，用于项目测试，一般外部用户无法访问。</p>
<p><strong>3). 生产环境(production)</strong></p>
<p>当项目开发完毕，并且由测试人员测试通过之后，就可以上线项目，将项目部署到线上环境，并正式对外提供服务，这个线上环境也称之为生产环境。</p>
<blockquote>
<p><font color='gree'> <b>拓展知识:</b></font> </p>
<p>​	<strong>准生产环境:</strong> 对于有的公司来说，项目功能开发好, 并测试通过以后，并不是直接就上生产环境。为了保证我们开发的项目在上线之后能够完全满足要求，就需要把项目部署在真实的环境中, 测试一下是否完全符合要求啊，这时候就诞生了准生产环境，你可以把他当做生产环境的克隆体，准生产环境的服务器配置, 安装的应用软件(JDK、Tomcat、数据库、中间件 …) 的版本都一样，这种环境也称为 “仿真环境”。</p>
<p>​	ps.由于项目的性质和类型不同，有的项目可能不需要这个环境</p>
</blockquote>
<h2 id="2-瑞吉外卖项目介绍"><a href="#2-瑞吉外卖项目介绍" class="headerlink" title="2. 瑞吉外卖项目介绍"></a>2. 瑞吉外卖项目介绍</h2><p>在开发瑞吉外卖这个项目之前，我们需要全方位的来介绍一下当前我们学习的这个项目。接下来，我们将从以下的五个方面， 来介绍瑞吉外卖这个项目。</p>
<h3 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1 项目介绍"></a>2.1 项目介绍</h3><p><img src="/assets/image-20210726000655646.png" alt="image-20210726000655646"> </p>
<p>本项目（瑞吉外卖）是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括 系统管理后台 和 移动端应用 两部分。其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护。移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p>
<p>本项目共分为3期进行开发：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>功能实现</th>
</tr>
</thead>
<tbody><tr>
<td>第一期</td>
<td>主要实现基本需求，其中移动端应用通过H5实现，用户可以通过手机浏览器访问</td>
</tr>
<tr>
<td>第二期</td>
<td>主要针对移动端应用进行改进，使用微信小程序实现，用户使用起来更加方便</td>
</tr>
<tr>
<td>第三期</td>
<td>主要针对系统进行优化升级，提高系统的访问性能</td>
</tr>
</tbody></table>
<h3 id="2-2-产品原型"><a href="#2-2-产品原型" class="headerlink" title="2.2 产品原型"></a>2.2 产品原型</h3><p><strong>产品原型</strong>，就是一款产品成型之前，由产品经理绘制的一个简单的框架，就是将页面的排版布局展现出来，使产品的初步构思有一个可视化的展示。通过原型展示，可以更加直观的了解项目的需求和提供的功能。</p>
<blockquote>
<p><strong><font color='red'>注意事项：</font></strong> 产品原型主要用于展示项目的功能，并不是最终的页面效果。</p>
</blockquote>
<p>在课程资料的产品原型文件夹下,提供了两份产品原型。</p>
<p><img src="/assets/image-20210726002509573.png" alt="image-20210726002509573"> </p>
<p><strong>1). 管理端</strong></p>
<p>餐饮企业内部员工使用。 主要功能有: </p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>内部员工必须登录后,才可以访问系统管理后台</td>
</tr>
<tr>
<td>员工管理</td>
<td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td>
</tr>
<tr>
<td>分类管理</td>
<td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td>
</tr>
<tr>
<td>菜品管理</td>
<td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>套餐管理</td>
<td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>订单明细</td>
<td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td>
</tr>
</tbody></table>
<p><strong>2). 用户端</strong></p>
<p>移动端应用主要提供给消费者使用。主要功能有:</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>在移动端, 用户也需要登录后使用APP进行点餐</td>
</tr>
<tr>
<td>点餐-菜单</td>
<td>在点餐界面需要展示出菜品分类&#x2F;套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td>
</tr>
<tr>
<td>点餐-购物车</td>
<td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td>
</tr>
<tr>
<td>订单支付</td>
<td>用户选完菜品&#x2F;套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td>
</tr>
<tr>
<td>个人信息</td>
<td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td>
</tr>
</tbody></table>
<h3 id="2-3-技术选型"><a href="#2-3-技术选型" class="headerlink" title="2.3 技术选型"></a>2.3 技术选型</h3><p>关于本项目的技术选型, 我们将会从 用户层、网关层、应用层、数据层 这几个方面进行介绍，而对于我们服务端开发工程师来说，在项目开发过程中，我们主要关注应用层及数据层技术的应用。</p>
<p><img src="/assets/image-20210726005437857.png" alt="image-20210726005437857"> </p>
<p><strong>1). 用户层</strong></p>
<p>本项目中在构建系统管理后台的前端页面，我们会用到H5、Vue.js、ElementUI等技术。而在构建移动端应用时，我们会使用到微信小程序。</p>
<p><strong>2). 网关层</strong></p>
<p>Nginx是一个服务器，主要用来作为Http服务器，部署静态资源，访问性能高。在Nginx中还有两个比较重要的作用： 反向代理和负载均衡， 在进行项目部署时，要实现Tomcat的负载均衡，就可以通过Nginx来实现。</p>
<p><strong>3). 应用层</strong></p>
<p>SpringBoot： 快速构建Spring项目, 采用 “约定优于配置” 的思想, 简化Spring项目的配置开发。</p>
<p>Spring: 统一管理项目中的各种资源(bean), 在web开发的各层中都会用到。</p>
<p>SpringMVC：SpringMVC是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合，可以无缝集成。</p>
<p>SpringSession: 主要解决在集群环境下的Session共享问题。</p>
<p>lombok：能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter&#x2F;setter，也许还要去写构造器、equals等方法。</p>
<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>
<p><strong>4). 数据层</strong></p>
<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用MySQL进行存储。</p>
<p>MybatisPlus： 本项目持久层将会使用MybatisPlus来简化开发, 基本的单表增删改查直接调用框架提供的方法即可。</p>
<p>Redis： 基于key-value格式存储的内存数据库, 访问速度快, 经常使用它做缓存(降低数据库访问压力, 提供访问效率), 在后面的性能优化中会使用。</p>
<p><strong>5). 工具</strong></p>
<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>
<p>maven: 项目构建工具。</p>
<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过junit对功能进行单元测试。</p>
<h3 id="2-4-功能架构"><a href="#2-4-功能架构" class="headerlink" title="2.4 功能架构"></a>2.4 功能架构</h3><img src="assets/image-20210726122825225.png" alt="image-20210726122825225" style="zoom:80%;" /> 

<p><strong>1). 移动端前台功能</strong></p>
<p>手机号登录 , 微信登录 , 收件人地址管理 , 用户历史订单查询 , 菜品规格查询 , 购物车功能 , 下单 , 分类及菜品浏览。</p>
<p><strong>2). 系统管理后台功能</strong></p>
<p>员工登录&#x2F;退出 , 员工信息管理 , 分类管理 , 菜品管理 , 套餐管理 , 菜品口味管理 , 订单管理 。</p>
<h3 id="2-5-角色"><a href="#2-5-角色" class="headerlink" title="2.5 角色"></a>2.5 角色</h3><p>在瑞吉外卖这个项目中，存在以下三种用户，这三种用户对应三个角色： 后台系统管理员、后台系统普通员工、C端(移动端)用户。</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>权限操作</th>
</tr>
</thead>
<tbody><tr>
<td>后台系统管理员</td>
<td>登录后台管理系统，拥有后台系统中的所有操作权限</td>
</tr>
<tr>
<td>后台系统普通员工</td>
<td>登录后台管理系统，对菜品、套餐、订单等进行管理 (不包含员工管理)</td>
</tr>
<tr>
<td>C端用户</td>
<td>登录移动端应用，可以浏览菜品、添加购物车、设置地址、在线下单等</td>
</tr>
</tbody></table>
<h2 id="3-开发环境搭建"><a href="#3-开发环境搭建" class="headerlink" title="3. 开发环境搭建"></a>3. 开发环境搭建</h2><h3 id="3-1-数据库环境搭建"><a href="#3-1-数据库环境搭建" class="headerlink" title="3.1 数据库环境搭建"></a>3.1 数据库环境搭建</h3><h4 id="3-1-1-创建数据库"><a href="#3-1-1-创建数据库" class="headerlink" title="3.1.1 创建数据库"></a>3.1.1 创建数据库</h4><p>可以通过以下两种方式中的任意一种, 来创建项目的数据库:</p>
<p><strong>1).图形界面</strong></p>
<img src="assets/image-20210726123903694.png" alt="image-20210726123903694" style="zoom:80%;" /> 

<p>注意: 本项目数据库的字符串, 选择 utf8mb4</p>
<p><strong>2).命令行</strong></p>
<p><img src="/assets/image-20210726123942443.png" alt="image-20210726123942443"> </p>
<h4 id="3-1-2-数据库表导入"><a href="#3-1-2-数据库表导入" class="headerlink" title="3.1.2 数据库表导入"></a>3.1.2 数据库表导入</h4><p>项目的数据库创建好了之后, 可以直接将 资料&#x2F;数据模型&#x2F;db_reggie.sql 直接导入到数据库中, 也可以通过两种方式实现:</p>
<p><strong>1).图形界面</strong></p>
<p><img src="/assets/image-20210726124752975.png" alt="image-20210726124752975"> </p>
<p><strong>2).命令行</strong></p>
<p><img src="/assets/image-20210726124818880.png" alt="image-20210726124818880"> </p>
<blockquote>
<p><strong><font color='red'>注意:</font></strong> 通过命令导入表结构时，注意sql文件不要放在中文目录中</p>
</blockquote>
<h4 id="3-1-3-数据库表介绍"><a href="#3-1-3-数据库表介绍" class="headerlink" title="3.1.3 数据库表介绍"></a>3.1.3 数据库表介绍</h4><p>数据库表导入之后, 接下来介绍一下本项目中所涉及到的表结构: </p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>表名</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>employee</td>
<td>员工表</td>
</tr>
<tr>
<td>2</td>
<td>category</td>
<td>菜品和套餐分类表</td>
</tr>
<tr>
<td>3</td>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>4</td>
<td>setmeal</td>
<td>套餐表</td>
</tr>
<tr>
<td>5</td>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
</tr>
<tr>
<td>6</td>
<td>dish_flavor</td>
<td>菜品口味关系表</td>
</tr>
<tr>
<td>7</td>
<td>user</td>
<td>用户表（C端）</td>
</tr>
<tr>
<td>8</td>
<td>address_book</td>
<td>地址簿表</td>
</tr>
<tr>
<td>9</td>
<td>shopping_cart</td>
<td>购物车表</td>
</tr>
<tr>
<td>10</td>
<td>orders</td>
<td>订单表</td>
</tr>
<tr>
<td>11</td>
<td>order_detail</td>
<td>订单明细表</td>
</tr>
</tbody></table>
<p>上述的表结构, 我们目前先简单的结合页面原型了解一下, 大概有那些表, 每张表结构中存储什么样的数据, 有一个印象。对于具体的表结构, 以及表结构中的字段, 在讲解具体的功能开发时, 我们再详细介绍。</p>
<h3 id="3-2-Maven项目搭建"><a href="#3-2-Maven项目搭建" class="headerlink" title="3.2 Maven项目搭建"></a>3.2 Maven项目搭建</h3><h4 id="3-2-1-创建maven项目"><a href="#3-2-1-创建maven项目" class="headerlink" title="3.2.1 创建maven项目"></a>3.2.1 创建maven项目</h4><p><strong>1). 在idea中创建maven project, 项目名称 reggie_take_out</strong> </p>
<img src="assets/image-20210726172842675.png" alt="image-20210726172842675" style="zoom:80%;" /> 



<p><strong>2). 检查项目编码</strong></p>
<img src="assets/image-20210726173036263.png" alt="image-20210726173036263" style="zoom:80%;" /> 



<p><strong>3). 检查maven配置</strong></p>
<img src="assets/image-20210726173116359.png" alt="image-20210726173116359" style="zoom:80%;" /> 



<p><strong>4). 检查JDK版本</strong></p>
<img src="assets/image-20210726173237154.png" alt="image-20210726173237154" style="zoom:80%;" /> 

<p>JDK的版本选择1.8;</p>
<h4 id="3-2-2-搭建基础环境"><a href="#3-2-2-搭建基础环境" class="headerlink" title="3.2.2 搭建基础环境"></a>3.2.2 搭建基础环境</h4><p>1).在pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2).在工程的resources目录下创建application.yml文件,并引入配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  	<span class="comment">#应用名称 , 可选</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射 address_book ---&gt; AddressBook</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#日志输出</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>



<p>3).创建包 com.itheima.reggie , 并编写启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>@Slf4j : </p>
<p>​	是lombok中提供的注解, 用来通过slf4j记录日志。</p>
</blockquote>
<p>当搭建完上述的基础环境之后, 就可以通过引导类, 启动该项目。</p>
<h4 id="3-2-3-前端静态资源导入"><a href="#3-2-3-前端静态资源导入" class="headerlink" title="3.2.3 前端静态资源导入"></a>3.2.3 前端静态资源导入</h4><p>我们作为服务端开发工程师， 我们课程学习的重心应该放在后端的业务代码上， 前端的页面我们只需要导入课程资料中的前端资源， 前端页面的代码我们只需要能看懂即可。</p>
<p><strong>1). 导入静态资源</strong></p>
<p>前端资源存放位置为  资料&#x2F;前端资源 : <img src="assets/image-20210726225948411.png" alt="image-20210726225948411" style="zoom:80%;" /> </p>
<p>将上述两个目录中的静态资源文件, 导入到项目的resources目录下: </p>
<p><img src="/assets/image-20210726230327313.png" alt="image-20210726230327313"> </p>
<p><strong>2). 创建配置类WebMvcConfig，设置静态资源映射</strong></p>
<p>用于在Springboot项目中, 默认静态资源的存放目录为 : “classpath:&#x2F;resources&#x2F;“, “classpath:&#x2F;static&#x2F;“, “classpath:&#x2F;public&#x2F;“ ; 而在我们的项目中静态资源存放在 backend, front 目录中, 那么这个时候要想访问到静态资源, 就需要设置静态资源映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 访问测试</strong></p>
<p><a href="http://localhost:8080/backend/index.html">http://localhost:8080/backend/index.html</a></p>
<p><img src="/assets/image-20210726232859596.png" alt="image-20210726232859596"> </p>
<h2 id="4-后台系统登录功能"><a href="#4-后台系统登录功能" class="headerlink" title="4. 后台系统登录功能"></a>4. 后台系统登录功能</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p><strong>1). 页面原型展示</strong></p>
<img src="assets/image-20210726233540703.png" alt="image-20210726233540703" style="zoom: 67%;" />   



<p><strong>2). 登录页面成品展示</strong></p>
<p>登录页面存放目录 &#x2F;resources&#x2F;backend&#x2F;page&#x2F;login&#x2F;login.html</p>
<img src="assets/image-20210726233631409.png" alt="image-20210726233631409" style="zoom:80%;" /> 



<p><strong>3). 查看登录请求</strong></p>
<p>通过浏览器调试工具（F12），可以发现，点击登录按钮时，页面会发送请求（请求地址为<a href="http://localhost:8080/employee/login%EF%BC%89%E5%B9%B6%E6%8F%90%E4%BA%A4%E5%8F%82%E6%95%B0">http://localhost:8080/employee/login）并提交参数</a> username和password, 请求参数为json格式数据 {“username”:”admin”,”password”:”123456”}。</p>
<p><img src="/assets/image-20210726234439684.png" alt="image-20210726234439684"> </p>
<blockquote>
<p>此时报404，是因为我们的后台系统还没有响应此请求的处理器，所以我们需要创建相关类来处理登录请求 ；</p>
<img src="assets/image-20210726234548093.png" alt="image-20210726234548093" style="zoom:80%;" /> 
</blockquote>
<p><strong>4). 数据模型(employee表)</strong></p>
<img src="assets/image-20210726234915737.png" alt="image-20210726234915737" style="zoom:80%;" /> 



<p><strong>5). 前端页面分析</strong></p>
<p><img src="/assets/image-20210727000040403.png" alt="image-20210727000040403"> </p>
<p>当点击 “登录” 按钮, 会触发Vue中定义的 handleLogin 方法:</p>
<img src="assets/image-20210727000329958.png" alt="image-20210727000329958" style="zoom:80%;" /> 

<p>在上述的前端代码中, 大家可以看到, 发送登录的异步请求之后, 获取到响应结果, 在响应结果中至少包含三个属性: code、data、msg 。</p>
<p>由前端代码，我们也可以看到，在用户登录成功之后，服务端会返回用户信息，而前端是将这些用户信息，存储在客户端的 localStorage 中了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userInfo&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br></pre></td></tr></table></figure>



<h3 id="4-2-代码开发"><a href="#4-2-代码开发" class="headerlink" title="4.2 代码开发"></a>4.2 代码开发</h3><h4 id="4-2-1-基础准备工作"><a href="#4-2-1-基础准备工作" class="headerlink" title="4.2.1 基础准备工作"></a>4.2.1 基础准备工作</h4><p>在进行登录功能的代码实现之前， 首先在我们的工程下创建包结构： </p>
<p><img src="/assets/image-20210727001117783.png" alt="image-20210727001117783"> </p>
<p><strong>1). 创建实体类Employee</strong></p>
<p>该实体类主要用于和员工表 employee 进行映射。 该实体类， 也可以直接从资料( 资料&#x2F;实体类 )中拷贝工程中。</p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber; <span class="comment">//驼峰命名法 ---&gt; 映射的字段名为 id_number</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 定义Mapper接口</strong></p>
<p>在MybatisPlus中, 自定义的Mapper接口, 需要继承自 BaseMapper。</p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3).Service接口</strong></p>
<p>本项目的Service接口, 在定义时需要继承自MybatisPlus提供的Service层接口 IService, 这样就可以直接调用 父接口的方法直接执行业务操作, 简化业务层代码实现。</p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). Service实现类</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper,Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). Controller基础代码</strong></p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">	</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>



<p><strong>6). 导入通用结果类R</strong></p>
<p>此类是一个通用结果类，服务端响应的所有结果最终都会包装成此种类型返回给前端页面。</p>
<p>所属包: com.itheima.reggie.common</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A. 如果业务执行结果为成功, 构建R对象时, 只需要调用 success 方法; 如果需要返回数据传递 object 参数, 如果无需返回, 可以直接传递null。</p>
<p>B. 如果业务执行结果为失败, 构建R对象时, 只需要调用error 方法, 传递错误提示信息即可。</p>
<h4 id="4-2-2-登录逻辑分析"><a href="#4-2-2-登录逻辑分析" class="headerlink" title="4.2.2 登录逻辑分析"></a>4.2.2 登录逻辑分析</h4><img src="assets/image-20210727003101031.png" alt="image-20210727003101031" style="zoom:80%;" /> 

<p>处理逻辑如下：</p>
<p>①. 将页面提交的密码password进行md5加密处理, 得到加密后的字符串</p>
<p>②. 根据页面提交的用户名username查询数据库中员工数据信息</p>
<p>③. 如果没有查询到, 则返回登录失败结果</p>
<p>④. 密码比对，如果不一致, 则返回登录失败结果</p>
<p>⑤. 查看员工状态，如果为已禁用状态，则返回员工已禁用结果</p>
<p>⑥. 登录成功，将员工id存入Session, 并返回登录成功结果</p>
<h4 id="4-2-3-代码实现"><a href="#4-2-3-代码实现" class="headerlink" title="4.2.3 代码实现"></a>4.2.3 代码实现</h4><p><strong>技术点说明:</strong> </p>
<p>A. 由于需求分析时, 我们看到前端发起的请求为post请求, 所以服务端需要使用注解 @PostMapping</p>
<p>B. 由于前端传递的请求参数为json格式的数据, 这里使用Employee对象接收, 但是将json格式数据封装到实体类中, 在形参前需要加注解@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、将页面提交的密码password进行md5加密处理</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">    password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、根据页面提交的用户名username查询数据库</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、如果没有查询到则返回登录失败结果</span></span><br><span class="line">    <span class="keyword">if</span>(emp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、密码比对，如果不一致则返回登录失败结果</span></span><br><span class="line">    <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">    <span class="keyword">if</span>(emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、登录成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">    request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="4-3-功能测试"><a href="#4-3-功能测试" class="headerlink" title="4.3 功能测试"></a>4.3 功能测试</h3><p>代码实现完毕后, 启动项目, 访问url: <a href="http://localhost:8080/backend/page/login/login.html">http://localhost:8080/backend/page/login/login.html</a> , 进行登录测试。</p>
<p>在测试过程中， 可以通过debug断点调试的方式来跟踪程序的执行过程，并且可以查看程序运行时各个对象的具体赋值情况。而且需要注意, 在测试过程中，需要将所有的情况都覆盖到。</p>
<p><strong>1). 问题说明</strong></p>
<p>当我们在进行debug端点调试时, 前端可能会出现如下问题: 前端页面的控制台报出错误-超时;</p>
<img src="assets/image-20210727004455855.png" alt="image-20210727004455855" style="zoom:80%;" /> 



<p><strong>2). 解决方案</strong></p>
<p>前端进行异步请求时, 默认超时10000ms , 可以将该值调大一些。</p>
<img src="assets/image-20210727004706639.png" alt="image-20210727004706639" style="zoom:80%;" /> 



<p>&#x3D;&#x3D;由于修改了JS文件，需要手动清理一下浏览器缓存，避免缓存影响，JS不能及时生效。&#x3D;&#x3D;</p>
<h2 id="5-后台系统退出功能"><a href="#5-后台系统退出功能" class="headerlink" title="5. 后台系统退出功能"></a>5. 后台系统退出功能</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>在后台管理系统中，管理员或者员工，登录进入系统之后，页面跳转到后台系统首页面(backend&#x2F;index.html)，此时会在系统的右上角显示当前登录用户的姓名。</p>
<p>如果员工需要退出系统，直接点击右侧的退出按钮即可退出系统，退出系统后页面应跳转回登录页面。</p>
<p><strong>1). 退出页面展示</strong></p>
<img src="assets/image-20210727005437531.png" alt="image-20210727005437531" style="zoom:80%;" /> 



<p><strong>2).前端页面分析</strong></p>
<img src="assets/image-20210727010054851.png" alt="image-20210727010054851" style="zoom:90%;" />   

<p>点击 <img src="/assets/image-20210727010150207.png" alt="image-20210727010150207"> 将会调用一个js方法logout, 在logout的方法中执行如下逻辑: </p>
<p><img src="/assets/image-20210727010422199.png" alt="image-20210727010422199"> </p>
<p>A. 发起post请求, 调用服务端接口 &#x2F;employee&#x2F;logout 执行退出操作 ;</p>
<p>B. 删除客户端 localStorage 中存储的用户登录信息, 跳转至登录页面 ;</p>
<h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><p>需要在Controller中创建对应的处理方法, 接收页面发送的POST请求 &#x2F;employee&#x2F;logout ，具体的处理逻辑：</p>
<p>A. 清理Session中的用户id</p>
<p>B. 返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 员工退出</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//清理Session中保存的当前登录员工的id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5-3-功能测试"><a href="#5-3-功能测试" class="headerlink" title="5.3 功能测试"></a>5.3 功能测试</h3><p>1). 代码实现完毕后, 重启服务, 访问登录界面 <a href="http://localhost:8080/backend/page/login/login.html">http://localhost:8080/backend/page/login/login.html</a> ;</p>
<p>2). 登录完成之后, 进入到系统首页 backend&#x2F;index.html, 点击右上角 <img src="/assets/image-20210727011020244.png" alt="image-20210727011020244"> 按钮 执行退出操作, 完成后看看是否可以跳转到登录页面 , 并检查localStorage。</p>
<p><img src="/assets/image-20210727011215186.png" alt="image-20210727011215186"> </p>
<p><img src="/assets/image-20210727011259297.png" alt="image-20210727011259297"> </p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day02</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day02/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-Day02"><a href="#瑞吉外卖-Day02" class="headerlink" title="瑞吉外卖-Day02"></a>瑞吉外卖-Day02</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li><p>完善登录功能</p>
</li>
<li><p>新增员工</p>
</li>
<li><p>员工信息分页查询</p>
</li>
<li><p>启用&#x2F;禁用员工账号</p>
</li>
<li><p>编辑员工信息</p>
</li>
</ul>
<span id="more"></span>











<h2 id="1-完善登录功能"><a href="#1-完善登录功能" class="headerlink" title="1. 完善登录功能"></a>1. 完善登录功能</h2><h3 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h3><p>前面我们已经完成了后台系统的员工登录功能开发，但是目前还存在一个问题，接下来我们来说明一个这个问题， 以及如何处理。</p>
<p><strong>1). 目前现状</strong></p>
<p>用户如果不登录，直接访问系统首页面，照样可以正常访问。 </p>
<p><img src="/assets/image-20210727232226862.png" alt="image-20210727232226862"> </p>
<p><strong>2). 理想效果</strong></p>
<p>上述这种设计并不合理，我们希望看到的效果应该 是，只有登录成功后才可以访问系统中的页面，如果没有登录, 访问系统中的任何界面都直接跳转到登录页面。</p>
<img src="assets/image-20210727232747276.png" alt="image-20210727232747276" style="zoom:80%;" /> 



<p><strong>那么，具体应该怎么实现呢？</strong></p>
<p>可以使用我们之前讲解过的 过滤器、拦截器来实现，在过滤器、拦截器中拦截前端发起的请求，判断用户是否已经完成登录，如果没有登录则返回提示信息，跳转到登录页面。</p>
<h3 id="1-2-思路分析"><a href="#1-2-思路分析" class="headerlink" title="1.2 思路分析"></a>1.2 思路分析</h3><img src="assets/image-20210727233554707.png" alt="image-20210727233554707" style="zoom:80%;" /> 

<p><strong>过滤器具体的处理逻辑如下：</strong></p>
<p>A. 获取本次请求的URI</p>
<p>B. 判断本次请求, 是否需要登录, 才可以访问</p>
<p>C. 如果不需要，则直接放行</p>
<p>D. 判断登录状态，如果已登录，则直接放行</p>
<p>E. 如果未登录, 则返回未登录结果</p>
<p>如果未登录,我们需要给前端返回什么样的结果呢? 这个时候, 我们可以去看看前端是如何处理的 ?</p>
<img src="assets/image-20210728001324901.png" alt="image-20210728001324901" style="zoom:80%;" /> 





<h3 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h3><p><strong>1). 定义登录校验过滤器</strong></p>
<p>自定义一个过滤器 LoginCheckFilter 并实现 Filter 接口, 在doFilter方法中完成校验的逻辑。 那么接下来, 我们就根据上述分析的步骤, 来完成具体的功能代码实现: </p>
<p>所属包: com.itheima.reggie.filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls,String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color='red'><b>AntPathMatcher 拓展:</b></font></p>
<p><strong>介绍:</strong> Spring中提供的路径匹配器 ;</p>
<p><strong>通配符规则:</strong> 		</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个字符</td>
</tr>
<tr>
<td>**</td>
<td>匹配0个或多个目录&#x2F;字符</td>
</tr>
</tbody></table>
</blockquote>
<p><strong>2). 开启组件扫描</strong></p>
<p>需要在引导类上, 加上Servlet组件扫描的注解, 来扫描过滤器配置的@WebFilter注解， 扫描上之后， 过滤器在运行时就生效了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color='red'><b>@ServletComponentScan 的作用: </b></font></p>
<p>​	在SpringBoot项目中, 在引导类&#x2F;配置类上加了该注解后, 会自动扫描项目中(当前包及其子包下)的@WebServlet , @WebFilter , @WebListener 注解, 自动注册Servlet的相关组件 ;</p>
</blockquote>
<h3 id="1-4-功能测试"><a href="#1-4-功能测试" class="headerlink" title="1.4 功能测试"></a>1.4 功能测试</h3><p>代码编写完毕之后，我们需要将工程重启一下，然后在浏览器地址栏直接输入系统管理后台首页，然后看看是否可以跳转到登录页面即可。我们也可以通过debug的形式来跟踪一下代码执行的过程。</p>
<p><img src="/assets/image-20210728000838992.png" alt="image-20210728000838992"> </p>
<p>对于前端的代码, 也可以进行debug调试。</p>
<p>F12打开浏览器的调试工具, 找到我们前面提到的request.js, 在request.js的响应拦截器位置打上断点。</p>
<p><img src="/assets/image-20210728001929657.png" alt="image-20210728001929657"> </p>
<h2 id="2-新增员工"><a href="#2-新增员工" class="headerlink" title="2. 新增员工"></a>2. 新增员工</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>后台系统中可以管理员工信息，通过新增员工来添加后台系统用户。点击[添加员工]按钮跳转到新增页面，如下：</p>
<img src="assets/image-20210728002442334.png" alt="image-20210728002442334" style="zoom:80%;" /> 

<p>当填写完表单信息, 点击”保存”按钮后, 会提交该表单的数据到服务端, 在服务端中需要接受数据, 然后将数据保存至数据库中。</p>
<h3 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h3><p>新增员工，其实就是将我们新增页面录入的员工数据插入到employee表。employee表中的status字段已经设置了默认值1，表示状态正常。</p>
<img src="assets/image-20210728004144521.png" alt="image-20210728004144521" style="zoom:80%;" /> 



<p>需要注意，employee表中对username字段加入了唯一约束，因为username是员工的登录账号，必须是唯一的。</p>
<img src="assets/image-20210728004250254.png" alt="image-20210728004250254" style="zoom:80%;" /> 





<h3 id="2-3-程序执行流程"><a href="#2-3-程序执行流程" class="headerlink" title="2.3 程序执行流程"></a>2.3 程序执行流程</h3><p>在开发代码之前，我们需要结合着前端页面发起的请求， 梳理一下整个程序的执行过程：</p>
<img src="assets/image-20210728005638224.png" alt="image-20210728005638224" style="zoom:80%;" /> 



<p>A. 点击”保存”按钮, 页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端, 请求方式POST, 请求路径 &#x2F;employee</p>
<p>B. 服务端Controller接收页面提交的数据并调用Service将数据进行保存</p>
<p>C. Service调用Mapper操作数据库，保存数据</p>
<h3 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h3><p>在EmployeeController中增加save方法, 用于保存用户员工信息。</p>
<p>A. 在新增员工时， 按钮页面原型中的需求描述， 需要给员工设置初始默认密码 123456， 并对密码进行MD5加密。</p>
<p>B. 在组装员工信息时, 还需要封装创建时间、修改时间，创建人、修改人信息(从session中获取当前登录用户)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工，员工信息：&#123;&#125;&quot;</span>,employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始密码123456，需要进行md5加密处理</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">	</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//获得当前登录用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-5-功能测试"><a href="#2-5-功能测试" class="headerlink" title="2.5 功能测试"></a>2.5 功能测试</h3><p>代码编写完毕之后，我们需要将工程重启, 完毕之后直接访问管理系统首页, 点击 “员工管理” 页面中的 “添加员工” 按钮, 输入员工基本信息, 然后点击 “保存” 进行数据保存, 保存完毕后, 检查数据库中是否录入员工数据。</p>
<p>当我们在测试中，添加用户时， 输入了一个已存在的用户名时，前端界面出现错误提示信息： </p>
<img src="assets/image-20210728010841569.png" alt="image-20210728010841569" style="zoom:80%;" /> 

<p>而此时，服务端已经报错了， 报错信息如下： </p>
<p><img src="/assets/image-20210728010938086.png" alt="image-20210728010938086"> </p>
<p>出现上述的错误， 主要就是因为在 employee 表结构中，我们针对于username字段，建立了唯一索引，添加重复的username数据时，违背该约束，就会报错。但是此时前端提示的信息并不具体，用户并不知道是因为什么原因造成的该异常，我们需要给用户提示详细的错误信息 。</p>
<h3 id="2-6-全局异常处理"><a href="#2-6-全局异常处理" class="headerlink" title="2.6 全局异常处理"></a>2.6 全局异常处理</h3><h4 id="2-6-1-思路分析"><a href="#2-6-1-思路分析" class="headerlink" title="2.6.1 思路分析"></a>2.6.1 思路分析</h4><p>要想解决上述测试中存在的问题，我们需要对程序中可能出现的异常进行捕获，通常有两种处理方式：</p>
<p><strong>A. 在Controller方法中加入 try…catch 进行异常捕获</strong></p>
<p>形式如下： </p>
<img src="assets/image-20210729094125294.png" alt="image-20210729094125294" style="zoom:80%;" /> 

<p>如果采用这种方式，虽然可以解决，但是存在弊端，需要我们在保存其他业务数据时，也需要在Controller方法中加上try…catch进行处理，代码冗余，不通用。</p>
<p><strong>B. 使用异常处理器进行全局异常捕获</strong></p>
<p>采用这种方式来实现，我们只需要在项目中定义一个通用的全局异常处理器，就可以解决本项目的所有异常。</p>
<h4 id="2-6-2-全局异常处理器"><a href="#2-6-2-全局异常处理器" class="headerlink" title="2.6.2 全局异常处理器"></a>2.6.2 全局异常处理器</h4><p>在项目中自定义一个全局异常处理器，在异常处理器上加上注解 @ControllerAdvice,可以通过属性annotations指定拦截哪一类的Controller方法。 并在异常处理器的方法上加上注解 @ExceptionHandler 来指定拦截的是那一类型的异常。</p>
<blockquote>
<p>异常处理方法逻辑: </p>
<ul>
<li>指定捕获的异常类型为 SQLIntegrityConstraintViolationException</li>
<li>解析异常的提示信息, 获取出是那个值违背了唯一约束 </li>
<li>组装错误信息并返回</li>
</ul>
</blockquote>
<img src="assets/image-20210729100232642.png" alt="image-20210729100232642" style="zoom:80%;" /> 



<p>所属包: com.itheima.reggie.common</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color='red'><b>注解说明:</b></font></p>
<p>​	上述的全局异常处理器上使用了的两个注解 @ControllerAdvice , @ResponseBody , 他们的作用分别为: </p>
<p>​	@ControllerAdvice : 指定拦截那些类型的控制器;</p>
<p>​	@ResponseBody: 将方法的返回值 R 对象转换为json格式的数据, 响应给页面;</p>
<p>​	</p>
<p>​	上述使用的两个注解, 也可以合并成为一个注解 @RestControllerAdvice </p>
<p>​	<img src="assets/image-20210729100052940.png" alt="image-20210729100052940" style="zoom:80%;" /> </p>
</blockquote>
<h4 id="2-6-3-测试"><a href="#2-6-3-测试" class="headerlink" title="2.6.3 测试"></a>2.6.3 测试</h4><p>全局异常处理器编写完毕之后，我们需要将项目重启, 完毕之后直接访问管理系统首页, 点击 “员工管理” 页面中的 “添加员工” 按钮。当我们在测试中，添加用户时， 输入了一个已存在的用户名时，前端界面出现如下错误提示信息：</p>
<img src="assets/image-20210729102220135.png" alt="image-20210729102220135" style="zoom:80%;" /> 













<h2 id="3-员工分页查询"><a href="#3-员工分页查询" class="headerlink" title="3. 员工分页查询"></a>3. 员工分页查询</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>系统中的员工很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。而在我们的分页查询页面中, 除了分页条件以外，还有一个查询条件 “员工姓名”。</p>
<p><img src="/assets/image-20210729134904625.png" alt="image-20210729134904625"> </p>
<ul>
<li><p>请求参数</p>
<ul>
<li><p>搜索条件： 员工姓名(模糊查询)</p>
</li>
<li><p>分页条件： 每页展示条数 ， 页码</p>
</li>
</ul>
</li>
<li><p>响应数据</p>
<ul>
<li><p>总记录数</p>
</li>
<li><p>结果列表</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-程序执行流程"><a href="#3-2-程序执行流程" class="headerlink" title="3.2 程序执行流程"></a>3.2 程序执行流程</h3><h4 id="3-2-1-页面流程分析"><a href="#3-2-1-页面流程分析" class="headerlink" title="3.2.1 页面流程分析"></a>3.2.1 页面流程分析</h4><p>在开发代码之前，需要梳理一下整个程序的执行过程。</p>
<p>A. 点击菜单，打开员工管理页面时，执行查询： </p>
<img src="assets/image-20210729163400772.png" alt="image-20210729163400772" style="zoom:80%;" /> 



<p>B. 搜索栏输入员工姓名,回车,执行查询:</p>
<p><img src="/assets/image-20210729164259997.png" alt="image-20210729164259997"> </p>
<p>1). 页面发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据, 并组装条件调用Service查询数据</p>
<p>3). Service调用Mapper操作数据库，查询分页数据</p>
<p>4). Controller将查询到的分页数据, 响应给前端页面</p>
<p>5). 页面接收到分页数据, 并通过ElementUI的Table组件展示到页面上</p>
<h4 id="3-2-2-前端代码介绍"><a href="#3-2-2-前端代码介绍" class="headerlink" title="3.2.2 前端代码介绍"></a>3.2.2 前端代码介绍</h4><p>1). 访问员工列表页面&#x2F;member&#x2F;list.html时, 会触发Vuejs中的钩子方法, 在页面初始化时调用created方法</p>
<img src="assets/image-20210729231639034.png" alt="image-20210729231639034" style="zoom:80%;" /> 

<p>从上述的前端代码中我们可以看到, 执行完分页查询, 我们需要给前端返回的信息中需要包含两项 : records 中封装结果列表, total中封装总记录数 。</p>
<p>而在组装请求参数时 , page、pageSize 都是前端分页插件渲染时的参数；</p>
<img src="assets/image-20210729232916380.png" alt="image-20210729232916380" style="zoom:80%;" /> 





<p>2). 在getMemberList方法中, 通过axios发起异步请求</p>
<p><img src="/assets/image-20210729231745143.png" alt="image-20210729231745143"> </p>
<p>axios发起的异步请求会被声明在 request.js 中的request拦截器拦截, 在其中对get请求进行进一步的封装处理</p>
<p><img src="/assets/image-20210729232036767.png" alt="image-20210729232036767"> </p>
<p><strong>最终发送给服务端的请求为 :</strong> GET请求 , 请求链接 &#x2F;employee&#x2F;page?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</p>
<h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><h4 id="3-3-1-分页插件配置"><a href="#3-3-1-分页插件配置" class="headerlink" title="3.3.1 分页插件配置"></a>3.3.1 分页插件配置</h4><p>当前我们要实现的分页查询功能，而在MybatisPlus要实现分页功能，就需要用到MybatisPlus中提供的分页插件，要使用分页插件，就要在配置类中声明分页插件的bean对象。</p>
<p>所属包: com.itheima.reggie.config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-2-分页查询实现"><a href="#3-3-2-分页查询实现" class="headerlink" title="3.3.2 分页查询实现"></a>3.3.2 分页查询实现</h4><p>在上面我们已经分析了，页面在进行分页查询时， 具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>page , pageSize , name</td>
</tr>
</tbody></table>
<p>那么查询完毕后我们需要给前端返回什么样的结果呢? </p>
<p>在上述我们也分析了, 查询返回的结果数据data中应该封装两项信息, 分别为: records 封装分页列表数据, total 中封装符合条件的总记录数。 那么这个时候, 在定义controller方法的返回值类型R时, 我们可以直接将 MybatisPlus 分页查询的结果 Page 直接封装返回, 因为Page中的属性如下: </p>
<img src="assets/image-20210729235403154.png" alt="image-20210729235403154" style="zoom:80%;" /> 



<p>那么接下来就依据于这些已知的需求和条件完成分页查询的代码实现。 具体的逻辑如下: </p>
<p>A. 构造分页条件</p>
<p>B. 构建搜索条件 - name进行模糊匹配</p>
<p>C. 构建排序条件 - 更新时间倒序排序</p>
<p>D. 执行查询</p>
<p>E. 组装结果并返回</p>
<p>具体的代码实现如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工信息分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 当前查询页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每页展示记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 员工姓名 - 可选参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span> ,page,pageSize,name);</span><br><span class="line">    <span class="comment">//构造分页构造器</span></span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>代码编写完毕之后，我们需要将工程重启, 完毕之后直接访问管理系统首页, 默认就会打开员工管理的列表页面, 我们可以查看列表数据是否可以正常展示, 也可以通过分页插件来测试分页功能, 及员工姓名的模糊查询功能。</p>
<p>在进行测试时，可以使用浏览器的监控工具查看页面和服务端的数据交互细节。 并借助于debug的形式， 根据服务端参数接收及逻辑执行情况。</p>
<p><img src="/assets/image-20210730000855072.png" alt="image-20210730000855072"> </p>
<p>测试过程中可以发现，对于员工状态字段（status）服务端返回的是状态码（1或者0），但是页面上显示的则是“正常”或者“已禁用”，这是因为页面中在展示数据时进行了处理。</p>
<img src="assets/image-20210730010606005.png" alt="image-20210730010606005" style="zoom:80%;" /> 











<h2 id="4-启用-x2F-禁用员工账号"><a href="#4-启用-x2F-禁用员工账号" class="headerlink" title="4. 启用&#x2F;禁用员工账号"></a>4. 启用&#x2F;禁用员工账号</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>在员工管理列表页面，可以对某个员工账号进行<font color='gree'>启用</font>或者<font color='red'>禁用</font>操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。如果某个员工账号状态为正常，则按钮显示为 “禁用”，如果员工账号状态为已禁用，则按钮显示为”启用”。</p>
<p>&#x3D;&#x3D;需要注意，只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。&#x3D;&#x3D;</p>
<p><strong>A. admin 管理员登录</strong></p>
<img src="assets/image-20210730010858705.png" alt="image-20210730010858705" style="zoom:80%;" /> 



<p><strong>B. 普通用户登录</strong></p>
<img src="assets/image-20210730010941399.png" alt="image-20210730010941399" style="zoom:80%;" /> 





<h3 id="4-2-程序执行流程"><a href="#4-2-程序执行流程" class="headerlink" title="4.2 程序执行流程"></a>4.2 程序执行流程</h3><h4 id="4-2-1-页面按钮动态展示"><a href="#4-2-1-页面按钮动态展示" class="headerlink" title="4.2.1 页面按钮动态展示"></a>4.2.1 页面按钮动态展示</h4><p>在上述的需求中,我们提到需要实现的效果是 : <strong>只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示</strong> , 页面中是怎么做到只有管理员admin能够看到启用、禁用按钮的？</p>
<p>1). 在列表页面(list.html)加载时, 触发钩子函数created, 在钩子函数中, 会从localStorage中获取到用户登录信息, 然后获取到用户名</p>
<img src="assets/image-20210730012044171.png" alt="image-20210730012044171" style="zoom:80%;" /> 



<p>2). 在页面中, 通过Vue指令v-if进行判断,如果登录用户为admin将展示 启用&#x2F;禁用 按钮, 否则不展示</p>
<img src="assets/image-20210730012256779.png" alt="image-20210730012256779" style="zoom:80%;" /> 



<h4 id="4-2-2-执行流程分析"><a href="#4-2-2-执行流程分析" class="headerlink" title="4.2.2 执行流程分析"></a>4.2.2 执行流程分析</h4><p>1). 当管理员admin点击 “启用” 或 “禁用” 按钮时, 调用方法statusHandle</p>
<img src="assets/image-20210730012723560.png" alt="image-20210730012723560" style="zoom:80%;" /> 

<blockquote>
<p>scope.row : 获取到的是这一行的数据信息 ;</p>
</blockquote>
<p>2). statusHandle方法中进行二次确认, 然后发起ajax请求, 传递id、status参数</p>
<img src="assets/image-20210730013011861.png" alt="image-20210730013011861" style="zoom:80%;" /> 

<img src="assets/image-20210730013210948.png" alt="image-20210730013210948" style="zoom:80%;" /> 

<p>最终发起异步请求, 请求服务端, 请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“id”:xxx,”status”:xxx}</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>{…params}</strong> : 三点是ES6中出现的扩展运算符。作用是遍历当前使用的对象能够访问到的所有属性，并将属性放入当前对象中。</p>
</blockquote>
<h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 页面发送ajax请求，将参数(id、status)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service更新数据</p>
<p>3). Service调用Mapper操作数据库</p>
<p>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作。在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-4-功能测试"><a href="#4-4-功能测试" class="headerlink" title="4.4 功能测试"></a>4.4 功能测试</h3><p>代码编写完毕之后，我们需要将工程重启。 然后访问前端页面， 进行 “启用” 或 “禁用” 的测试。</p>
<p><img src="/assets/image-20210730123213103.png" alt="image-20210730123213103"> </p>
<p>测试过程中没有报错，但是功能并没有实现，查看数据库中的数据也没有变化。但是从控制台输出的日志， 可以看出确实没有更新成功。</p>
<p><img src="/assets/image-20210730123307452.png" alt="image-20210730123307452"> </p>
<p>而在我们的数据库表结构中， 并不存在该ID， 数据库中 风清扬 对应的ID为 1420038345634918401</p>
<p><img src="/assets/image-20210730123519468.png" alt="image-20210730123519468"> </p>
<h3 id="4-5-代码修复"><a href="#4-5-代码修复" class="headerlink" title="4.5 代码修复"></a>4.5 代码修复</h3><h4 id="4-5-1-原因分析"><a href="#4-5-1-原因分析" class="headerlink" title="4.5.1 原因分析"></a>4.5.1 原因分析</h4><p><img src="/assets/image-20210730123833129.png" alt="image-20210730123833129"> </p>
<p>通过观察控制台输出的SQL发现页面传递过来的员工id的值和数据库中的id值不一致，这是怎么回事呢？</p>
<p>在分页查询时，服务端会将返回的R对象进行json序列化，转换为json格式的数据，而员工的ID是一个Long类型的数据，而且是一个长度为 19 位的长整型数据， 该数据返回给前端是没有问题的。</p>
<p><img src="/assets/image-20210730124036415.png" alt="image-20210730124036415"> </p>
<p><strong>那么具体的问题出现在哪儿呢？</strong></p>
<p>问题实际上， 就出现在前端JS中， js在对长度较长的长整型数据进行处理时， 会损失精度， 从而导致提交的id和数据库中的id不一致。 这里，我们也可以做一个简单的测试，代码如下： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        alert(1420038345634918401);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-5-2-解决方案"><a href="#4-5-2-解决方案" class="headerlink" title="4.5.2 解决方案"></a>4.5.2 解决方案</h4><p>要想解决这个问题，也很简单，我们只需要让js处理的ID数据类型为字符串类型即可, 这样就不会损失精度了。同样， 大家也可以做一个测试： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;1420038345634918401&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>那么在我们的业务中, 我们只需要让分页查询返回的json格式数据库中, long类型的属性, 不直接转换为数字类型, 转换为字符串类型就可以解决这个问题了 , 最终返回的结果为 : </p>
<p><img src="/assets/image-20210730125138652.png" alt="image-20210730125138652"> </p>
<h4 id="4-5-3-代码修复"><a href="#4-5-3-代码修复" class="headerlink" title="4.5.3 代码修复"></a>4.5.3 代码修复</h4><p>由于在SpringMVC中, 将Controller方法返回值转换为json对象, 是通过jackson来实现的, 涉及到SpringMVC中的一个消息转换器MappingJackson2HttpMessageConverter, 所以我们要解决这个问题, 就需要对该消息转换器的功能进行拓展。</p>
<p><strong>具体实现步骤：</strong></p>
<p>1). 提供对象转换器JacksonObjectMapper，基于Jackson进行Java对象到json数据的转换（资料中已经提供，直接复制到项目中使用）</p>
<p>2). 在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换</p>
<p><strong>1). 引入JacksonObjectMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line"></span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该自定义的对象转换器, 主要指定了, 在进行json数据序列化及反序列化时, LocalDateTime、LocalDate、LocalTime的处理方式, 以及BigInteger及Long类型数据，直接转换为字符串。</p>
<p><strong>2). 在WebMvcConfig中重写方法extendMessageConverters</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">//创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="5-编辑员工信息"><a href="#5-编辑员工信息" class="headerlink" title="5. 编辑员工信息"></a>5. 编辑员工信息</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>在员工管理列表页面点击 “编辑” 按钮，跳转到编辑页面，在编辑页面回显员工信息并进行修改，最后点击 “保存” 按钮完成编辑操作。</p>
<p><img src="/assets/image-20210730181733784.png" alt="image-20210730181733784"> </p>
<p>那么从上述的分析中，我们可以看出当前实现的编辑功能,我们需要实现两个方法:</p>
<p>A. 根据ID查询, 用于页面数据回显</p>
<p>B. 保存修改</p>
<h3 id="5-2-程序执行流程"><a href="#5-2-程序执行流程" class="headerlink" title="5.2 程序执行流程"></a>5.2 程序执行流程</h3><p>在开发代码之前需要梳理一下操作过程和对应的程序的执行流程：</p>
<p>1). 点击编辑按钮时，页面跳转到add.html，并在url中携带参数[员工id]</p>
<p><img src="/assets/image-20210730225514330.png" alt="image-20210730225514330"> </p>
<p>2). 在add.html页面获取url中的参数[员工id]</p>
<p>3). 发送ajax请求，请求服务端，同时提交员工id参数</p>
<p>4). 服务端接收请求，根据员工id查询员工信息，将员工信息以json形式响应给页面</p>
<p><img src="/assets/image-20210730230005437.png" alt="image-20210730230005437"> </p>
<p>5). 页面接收服务端响应的json数据，通过VUE的数据绑定进行员工信息回显</p>
<p>6). 点击保存按钮，发送ajax请求，将页面中的员工信息以json方式提交给服务端</p>
<p>7). 服务端接收员工信息，并进行处理，完成后给页面响应</p>
<p>8). 页面接收到服务端响应信息后进行相应处理</p>
<img src="assets/image-20210730230533123.png" alt="image-20210730230533123" style="zoom:80%;" /> 



<blockquote>
<p>注意：add.html页面为公共页面，新增员工和编辑员工都是在此页面操作</p>
</blockquote>
<h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><h4 id="5-3-1-根据ID查询"><a href="#5-3-1-根据ID查询" class="headerlink" title="5.3.1 根据ID查询"></a>5.3.1 根据ID查询</h4><p>经过上述的分析,我们看到,在根据ID查询员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID查询员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应员工信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-3-2-修改员工"><a href="#5-3-2-修改员工" class="headerlink" title="5.3.2 修改员工"></a>5.3.2 修改员工</h4><p>经过上述的分析,我们看到,在修改员工信息时,请求信息如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;employee</td>
</tr>
<tr>
<td>请求参数</td>
<td>{…….} json格式数据</td>
</tr>
</tbody></table>
<p><strong>代码实现:</strong> </p>
<p>在EmployeeController中增加方法, 根据ID更新员工信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-功能测试"><a href="#5-4-功能测试" class="headerlink" title="5.4 功能测试"></a>5.4 功能测试</h3><p>代码编写完毕之后，我们需要将工程重启。 然后访问前端页面， 按照前面分析的操作流程进行测试，查看数据是否正常修改即可。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day04</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day04/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-Day04"><a href="#瑞吉外卖-Day04" class="headerlink" title="瑞吉外卖-Day04"></a>瑞吉外卖-Day04</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li>文件上传下载</li>
<li>菜品新增</li>
<li>菜品分页查询</li>
<li>菜品修改</li>
</ul>
<span id="more"></span>



<h2 id="1-文件上传下载"><a href="#1-文件上传下载" class="headerlink" title="1. 文件上传下载"></a>1. 文件上传下载</h2><h3 id="1-1-上传介绍"><a href="#1-1-上传介绍" class="headerlink" title="1.1 上传介绍"></a>1.1 上传介绍</h3><h4 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h4><p>文件上传，也称为upload，是指将本地图片、视频、音频等文件上传到服务器上，可以供其他用户浏览或下载的过程。文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>
<img src="assets/image-20210803081955246.png" alt="image-20210803081955246" style="zoom:80%;" /> 



<p>文件上传时，对页面的form表单有如下要求：</p>
<table>
<thead>
<tr>
<th>表单属性</th>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>method</td>
<td>post</td>
<td>必须选择post方式提交</td>
</tr>
<tr>
<td>enctype</td>
<td>multipart&#x2F;form-data</td>
<td>采用multipart格式上传文件</td>
</tr>
<tr>
<td>type</td>
<td>file</td>
<td>使用input的file控件上传</td>
</tr>
</tbody></table>
<h4 id="1-1-2-前端介绍"><a href="#1-1-2-前端介绍" class="headerlink" title="1.1.2 前端介绍"></a>1.1.2 前端介绍</h4><p><strong>1). 简单html页面表单</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). ElementUI中提供的upload上传组件</strong></p>
<p>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传。</p>
<p><img src="/assets/image-20210803084742416.png" alt="image-20210803084742416"> </p>
<h4 id="1-1-3-服务端介绍"><a href="#1-1-3-服务端介绍" class="headerlink" title="1.1.3 服务端介绍"></a>1.1.3 服务端介绍</h4><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件：</p>
<ul>
<li><p>commons-fileupload</p>
</li>
<li><p>commons-io</p>
</li>
</ul>
<p>而Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">    System.out.println(file);</span><br><span class="line">    <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-下载介绍"><a href="#1-2-下载介绍" class="headerlink" title="1.2 下载介绍"></a>1.2 下载介绍</h3><p>文件下载，也称为download，是指将文件从服务器传输到本地计算机的过程。通过浏览器进行文件下载，通常有两种表现形式：</p>
<p><strong>1). 以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录</strong></p>
<p><img src="/assets/image-20210803123858691.png" alt="image-20210803123858691"> </p>
<p><strong>2). 直接在浏览器中打开</strong></p>
<p>而我们在今天所需要实现的菜品展示，表现形式为在浏览器中直接打开。</p>
<p><img src="/assets/image-20210803124220869.png" alt="image-20210803124220869">  </p>
<p>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程。</p>
<h3 id="1-3-上传代码实现"><a href="#1-3-上传代码实现" class="headerlink" title="1.3 上传代码实现"></a>1.3 上传代码实现</h3><h4 id="1-3-1-前端代码"><a href="#1-3-1-前端代码" class="headerlink" title="1.3.1 前端代码"></a>1.3.1 前端代码</h4><p>文件上传，我们作为服务端工程师，主要关注服务端代码实现。对于前端页面，可以使用ElementUI提供的上传组件。可以直接使用资料中提供的上传页面，位置：资料&#x2F;文件上传下载页面&#x2F;upload.html，将其拷贝到项目的目录(resources&#x2F;backend&#x2F;page&#x2F;demo)下，启动项目，访问上传页面。</p>
<p><a href="http://localhost:8080/backend/page/demo/upload.html">http://localhost:8080/backend/page/demo/upload.html</a></p>
<img src="assets/image-20210803125619732.png" alt="image-20210803125619732" style="zoom:80%;" /> 



<p>在上述的浏览器抓取的网络请求中，上传文件的调用url，在哪里配置的呢，这个时候，我们需要去看一下前端上传组件。</p>
<img src="assets/image-20210803125942295.png" alt="image-20210803125942295" style="zoom:80%;" /> 

<p>虽然上述是ElementUI封装的代码，但是实际上最终还通过file域上传文件，如果未指定上传文件的参数名，默认为file。</p>
<img src="assets/image-20210803130455590.png" alt="image-20210803130455590" style="zoom:80%;" /> 





<h4 id="1-3-2-服务端实现"><a href="#1-3-2-服务端实现" class="headerlink" title="1.3.2 服务端实现"></a>1.3.2 服务端实现</h4><p><strong>1). application.yml</strong></p>
<p>需要在application.yml中定义文件存储路径</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\img\</span></span><br></pre></td></tr></table></figure>



<p><strong>2). CommonController</strong></p>
<p>编写文件上传的方法, 通过MultipartFile类型的参数即可接收上传的文件, 方法形参的名称需要与页面的file域的name属性一致。</p>
<p>所在包: com.itheima.reggie.controller</p>
<p>上传逻辑: </p>
<p>1). 获取文件的原始文件名, 通过原始文件名获取文件后缀</p>
<p>2). 通过UUID重新声明文件名, 文件名称重复造成文件覆盖</p>
<p>3). 创建文件存放目录</p>
<p>4). 将上传的临时文件转存到指定位置</p>
<p>代码实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//abc.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;<span class="comment">//dfsdfdfd.jpg</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>



<h4 id="1-3-3-测试"><a href="#1-3-3-测试" class="headerlink" title="1.3.3 测试"></a>1.3.3 测试</h4><p>代码编写完成之后，我们重新启动项目，访问上传页面 <a href="http://localhost:8080/backend/page/demo/upload.html%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E7%9A%84%E4%B8%8A%E4%BC%A0%EF%BC%8C%E8%80%8C%E4%B8%94%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%8A%93%E5%8F%96%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%BB%8E%E5%9B%BE%E4%B8%AD%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A4%E6%96%AD%E5%87%BA%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95%E6%89%8D%E5%8F%AF%E4%BB%A5%E6%93%8D%E4%BD%9C%E3%80%82">http://localhost:8080/backend/page/demo/upload.html，然后点击上传图片，选择图片上传时，会发现图片并不能正常的上传，而且在浏览器中可以抓取到响应的数据，从图中我们可以判断出需要登录才可以操作。</a></p>
<img src="assets/image-20210803232054156.png" alt="image-20210803232054156" style="zoom:80%;" /> 

<p>而这样的话，就要求我们在测试时，每一次都需要先登录，登录完成后在进行图片上传的测试，为了简化我们的测试，我们可以在 LoginCheckFilter 的doFilter方法中，在不需要处理的请求路径的数组中再加入请求路径 &#x2F;common&#x2F;** , 如下: </p>
<img src="assets/image-20210803232433983.png" alt="image-20210803232433983" style="zoom:80%;" /> 

<p>然后，我们在测试文件的上传功能时，就不需要登录就可以操作了。 </p>
<p>我们在测试文件上传时，可以通过debug的形式来跟踪上传的整个过程，验证一下临时文件是否存在，以及上传完成之后，临时文件是否会自动删除。</p>
<p><img src="/assets/image-20210805160234154.png" alt="image-20210805160234154"> </p>
<h3 id="1-4-下载代码实现"><a href="#1-4-下载代码实现" class="headerlink" title="1.4 下载代码实现"></a>1.4 下载代码实现</h3><h4 id="1-4-1-前端代码"><a href="#1-4-1-前端代码" class="headerlink" title="1.4.1 前端代码"></a>1.4.1 前端代码</h4><p>文件下载，前端页面可以使用<img>标签展示下载的图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>那么，通过<img>标签如何展示图片数据呢，接下来我们来解析一下具体的流程：</p>
<p><img src="/assets/image-20210803224818828.png" alt="image-20210803224818828"> </p>
<p>在文件上传成功后，在 handleAvatarSuccess 方法中获取文件上传成功之后返回的数据(文件名)，然后调用 &#x2F;common&#x2F;download?name&#x3D;xxx 进行文件的下载。在这里，我们想让上传的照片能够在页面展示出来，所以我们就需要在服务端将文件以流的形式写回浏览器。</p>
<h4 id="1-4-2-服务端代码"><a href="#1-4-2-服务端代码" class="headerlink" title="1.4.2 服务端代码"></a>1.4.2 服务端代码</h4><p>在 CommonController 中定义方法download，并接收页面传递的参数name，然后读取图片文件的数据，然后以流的形式写回浏览器。</p>
<p>具体逻辑如下： </p>
<p>1). 定义输入流，通过输入流读取文件内容</p>
<p>2). 通过response对象，获取到输出流</p>
<p>3). 通过response对象设置响应数据格式(image&#x2F;jpeg)</p>
<p>4). 通过输入流读取文件数据，然后通过上述的输出流写回浏览器</p>
<p>5). 关闭资源</p>
<p>代码实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-测试"><a href="#1-4-3-测试" class="headerlink" title="1.4.3 测试"></a>1.4.3 测试</h4><p>访问页面 <a href="http://localhost:8080/backend/page/demo/upload.html">http://localhost:8080/backend/page/demo/upload.html</a> , 点击上传图片 , 选择图片进行上传, 上传完毕之后, 查看图片是否可以展示出来。</p>
<img src="assets/image-20210803231134157.png" alt="image-20210803231134157"  /> 

<p>通过F12查询页面发起的请求及响应的数据：</p>
<p><img src="/assets/image-20210803231302464.png" alt="image-20210803231302464"> </p>
<h2 id="2-菜品新增"><a href="#2-菜品新增" class="headerlink" title="2. 菜品新增"></a>2. 菜品新增</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>后台系统中可以管理菜品信息，通过 新增功能来添加一个新的菜品，在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传菜品图片，在移动端会按照菜品分类来展示对应的菜品信息 。</p>
<p><img src="/assets/image-20210803234122966.png" alt="image-20210803234122966"> </p>
<h3 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h3><img src="assets/image-20210803235329340.png" alt="image-20210803235329340" style="zoom:80%;" /> 

<p>新增菜品，其实就是将新增页面录入的菜品信息插入到dish表，如果添加了口味做法，还需要向dish_flavor表插入数据。所以在新增菜品时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>dish_flavor</td>
<td>菜品口味表</td>
</tr>
</tbody></table>
<p><strong>1). 菜品表:dish</strong></p>
<img src="assets/image-20210803235459347.png" alt="image-20210803235459347" style="zoom:80%;" /> 



<p><strong>2). 菜品口味表:dish_flavor</strong></p>
<img src="assets/image-20210803235749393.png" alt="image-20210803235749393" style="zoom:80%;" /> 



<h3 id="2-3-准备工作"><a href="#2-3-准备工作" class="headerlink" title="2.3 准备工作"></a>2.3 准备工作</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p>
<p><strong>1). 实体类 DishFlavor</strong></p>
<p>直接从课程资料中导入即可，Dish实体前面课程中已经导入过了</p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口DishFlavorMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口 DishFlavorService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类 DishFlavorServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.DishFlavorMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishFlavorService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavorServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishFlavorMapper,DishFlavor&gt; <span class="keyword">implements</span> <span class="title class_">DishFlavorService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层 DishController</strong></p>
<p>菜品及菜品口味的相关操作，我们统一使用这一个controller即可。</p>
<p>所属包： com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishFlavorService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>





<h3 id="2-4-前端页面分析"><a href="#2-4-前端页面分析" class="headerlink" title="2.4 前端页面分析"></a>2.4 前端页面分析</h3><p>基本的准备工作我们已经做完了，那么接下来我们就需要来实现新增菜品功能，在开发代码之前，需要梳理一下新增菜品时前端页面和服务端的交互过程。</p>
<p>1). 点击新建菜品按钮, 访问页面(backend&#x2F;page&#x2F;food&#x2F;add.html), 页面加载时发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</p>
<p><img src="/assets/image-20210804003343531.png" alt="image-20210804003343531"> </p>
<p>2). 页面发送请求进行图片上传，请求服务端将图片保存到服务器(上传功能已实现)</p>
<p>3). 页面发送请求进行图片下载，将上传的图片进行回显(下载功能已实现)</p>
<img src="assets/image-20210804003752632.png" alt="image-20210804003752632" style="zoom:80%;" /> 



<p>4). 点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</p>
<p>页面代码:</p>
<img src="assets/image-20210804004529310.png" alt="image-20210804004529310" style="zoom:80%;" /> 

<p>浏览器抓取请求:</p>
<img src="assets/image-20210804005030527.png" alt="image-20210804005030527" style="zoom:80%;" /> 



<p>开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的这4次请求(上传、下载已实现)即可。经过上述的分析，我们还需要在服务端实现两块功能：</p>
<p>A. 菜品分类数据列表查询, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?type&#x3D;1</td>
</tr>
</tbody></table>
<p>B. 保存菜品信息, 具体请求信息整理如下 : </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式</td>
</tr>
</tbody></table>
<p>下面呢,我们就需要根据这里分析的结果,分别来实现菜品分类列表的展示功能、保存菜品的功能 。</p>
<h3 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h3><h4 id="2-5-1-菜品分类查询"><a href="#2-5-1-菜品分类查询" class="headerlink" title="2.5.1 菜品分类查询"></a>2.5.1 菜品分类查询</h4><p>在CategoryController中增加方法实现菜品分类查询，根据分类进行查询，并对查询的结果按照sort排序字段进行升序排序，如果sort相同，再按照修改时间倒序排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据条件查询分类数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>代码编写完毕之后，我们可以打开新增菜品页面，查看响应的数据，及页面下拉列表的渲染情况： </p>
<img src="assets/image-20210804180408584.png" alt="image-20210804180408584" style="zoom:80%;" /> 





<h4 id="2-5-2-保存菜品信息"><a href="#2-5-2-保存菜品信息" class="headerlink" title="2.5.2 保存菜品信息"></a>2.5.2 保存菜品信息</h4><p>在上述的分析中，我们可以看到在保存菜品时，页面传递过来的是json格式数据，格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在服务端我们应该如何来封装前端传递的数据呢，我们发现，如果使用菜品类Dish来封装，只能封装菜品的基本属性，flavors属性是无法封装的。那么这个时候，我们应该如何处理呢?</p>
<p>这个时候，我们需要自定义一个实体类，然后继承自 Dish，并对Dish的属性进行拓展，增加 flavors 集合属性(内部封装DishFlavor)。清楚了这一点之后,接下来就进行功能开发。</p>
<p><strong>1). 导入 DishDto 实体类</strong></p>
<p>封装页面传递的请求参数。</p>
<p>所属包: com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color='red'>拓展： 我们在做项目时，经常会涉及到各种类型的实体模型。基本包含以下几种</font> </p>
<table>
<thead>
<tr>
<th>实体模型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DTO</td>
<td>Data Transfer Object(数据传输对象)，一般用于展示层与服务层之间的数据传输。</td>
</tr>
<tr>
<td>Entity</td>
<td>最常用实体类，基本和数据表一一对应，一个实体类对应一张表。</td>
</tr>
<tr>
<td>VO</td>
<td>Value Object(值对象), 主要用于封装前端页面展示的数据对象，用一个VO对象来封装整个页面展示所需要的对象数据</td>
</tr>
<tr>
<td>PO</td>
<td>Persistant Object(持久层对象), 是ORM(Objevt Relational Mapping)框架中Entity，PO属性和数据库中表的字段形成一一对应关系</td>
</tr>
</tbody></table>
<p><strong>2). DishController定义方法新增菜品</strong></p>
<p>在该Controller的方法中，不仅需要保存菜品的基本信息，还需要保存菜品的口味信息，需要操作两张表，所以我们需要在DishService接口中定义接口方法，在这个方法中需要保存上述的两部分数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). DishService中增加方法saveWithFlavor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增菜品，同时插入菜品对应的口味数据，需要操作两张表：dish、dish_flavor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>4). DishServiceImpl中实现方法saveWithFlavor</strong></p>
<p>页面传递的菜品口味信息，仅仅包含name 和 value属性，缺少一个非常重要的属性dishId， 所以在保存完菜品的基本信息后，我们需要获取到菜品ID，然后为菜品口味对象属性dishId赋值。</p>
<p>具体逻辑如下：</p>
<p>①. 保存菜品基本信息 ;</p>
<p>②. 获取保存的菜品ID ;</p>
<p>③. 获取菜品口味列表，遍历列表，为菜品口味对象属性dishId赋值;</p>
<p>④. 批量保存菜品口味列表;</p>
<p>代码实现如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增菜品，同时保存对应的口味数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">    <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">	</span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品id</span></span><br><span class="line">    <span class="comment">//菜品口味</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishId);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存菜品口味数据到菜品口味表dish_flavor</span></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明: </p>
<p>​	由于在 saveWithFlavor 方法中，进行了两次数据库的保存操作，操作了两张表，那么为了保证数据的一致性，我们需要在方法上加上注解 @Transactional来控制事务。</p>
</blockquote>
<p><strong>5). 在引导类上加注解 @EnableTransactionManagement</strong></p>
<p>Service层方法上加的注解@Transactional要想生效，需要在引导类上加上注解 @EnableTransactionManagement， 开启对事务的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启对事物管理的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-6-功能测试"><a href="#2-6-功能测试" class="headerlink" title="2.6 功能测试"></a>2.6 功能测试</h3><p>代码编写完毕之后，我们重新启动服务，访问项目，然后登陆到系统中，进行菜品的新增测试，在测试时，我们可以通过debug断点跟踪的形式，查看我们传输的数据，及数据的封装。</p>
<img src="assets/image-20210804174956706.png" alt="image-20210804174956706" style="zoom:80%;" /> 

<p>debug跟踪数据的封装情况: </p>
<p><img src="/assets/image-20210804175034622.png" alt="image-20210804175034622"> </p>
<p>然后在测试完毕后, 我们可以检查一下数据库中的数据保存情况:</p>
<p><img src="/assets/image-20210804175658010.png" alt="image-20210804175658010"> </p>
<h2 id="3-菜品分页查询"><a href="#3-菜品分页查询" class="headerlink" title="3. 菜品分页查询"></a>3. 菜品分页查询</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<img src="assets/image-20210804223703893.png" alt="image-20210804223703893" style="zoom:80%;" /> 

<p>在菜品列表展示时，除了菜品的基本信息(名称、售价、售卖状态、更新时间)外，还有两个字段略微特殊，第一个是图片字段 ，我们从数据库查询出来的仅仅是图片的名字，图片要想在表格中回显展示出来，就需要下载这个图片。第二个是菜品分类，这里展示的是分类名称，而不是分类ID，此时我们就需要根据菜品的分类ID，去分类表中查询分类信息，然后在页面展示。</p>
<h3 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下菜品分页查询时前端页面和服务端的交互过程：</p>
<p>1). 访问页面(backend&#x2F;page&#x2F;food&#x2F;list.html)时，发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<p>2). 页面发送请求，请求服务端进行图片下载，用于页面图片展示</p>
<p><img src="/assets/image-20210804224842336.png" alt="image-20210804224842336"> </p>
<img src="assets/image-20210804225259854.png" alt="image-20210804225259854" style="zoom:94%;" /> 



<p>开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，而前端发起的请求中， 图片文件下载回显的代码，我们已经实现了。所以，我们只需要开发分页查询的功能即可，分页查询具体的请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><h4 id="3-3-1-分析"><a href="#3-3-1-分析" class="headerlink" title="3.3.1 分析"></a>3.3.1 分析</h4><p>上述我们已经分析了分页查询的请求信息，那么接下来，我们就需要在 DishController中开发方法，来完成菜品的条件分页查询，在分页查询时还需要给页面返回分类的名称，而分类的名称前端在接收的时候是通过 categoryName 属性获取的，那么对应的服务端也应该封装到 categoryName 属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;categoryName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;菜品分类&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>而在我们的实体类 Dish 中，仅仅包含 categoryId， 不包含 categoryName，那么我们应该如何封装查询的数据呢？ 其实，这里我们可以返回DishDto对象，在该对象中我们可以拓展一个属性 categoryName，来封装菜品分类名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String categoryName; <span class="comment">//菜品分类名称</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>具体逻辑为： </p>
<p>1). 构造分页条件对象</p>
<p>2). 构建查询及排序条件</p>
<p>3). 执行分页条件查询</p>
<p>4). 遍历分页查询列表数据，根据分类ID查询分类信息，从而获取该菜品的分类名称</p>
<p>5). 封装数据并返回</p>
<h4 id="3-3-2-实现"><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h4><p>分析了具体的实现思路之后，接下来就来完成具体的代码实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品信息分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//构造分页构造器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库查询菜品信息时，获取到的分页查询结果 Page 的泛型为 Dish，而我们最终需要给前端页面返回的类型为 DishDto，所以这个时候就要进行转换，基本属性我们可以直接通过属性拷贝的形式对Page中的属性进行复制，而对于结果列表 records属性，我们是需要进行特殊处理的(需要封装菜品分类名称);</p>
</blockquote>
<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>代码编写完毕之后，我们重新启动服务，访问项目，可以通过debug端点的形式跟踪，整个分页查询过程中，数据的转换和封装。 </p>
<p>在测试的过程中，我们发现有一些菜品图片并没有展示出来，如下： </p>
<p><img src="/assets/image-20210805100944028.png" alt="image-20210805100944028"> </p>
<p>这是因为我们在导入sql脚本时，导入了一部分菜品的数据，而菜品的图片在我们的磁盘目录中并不存在，所以才会出现图片展示不出来的情况，而我们后续自己添加的菜品信息是没有问题的。</p>
<h2 id="4-菜品修改"><a href="#4-菜品修改" class="headerlink" title="4. 菜品修改"></a>4. 菜品修改</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>在菜品管理列表页面点击修改按钮，跳转到修改菜品页面，在修改页面回显菜品相关信息并进行修改，最后点击确定按钮完成修改操作。</p>
<img src="assets/image-20210804232447587.png" alt="image-20210804232447587" style="zoom:80%;" /> 



<h3 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下修改菜品时前端页面（add.html）和服务端的交互过程：</p>
<p>1). 点击菜品列表的中的修改按钮，携带菜品id跳转至add.html</p>
<img src="assets/image-20210804233459252.png" alt="image-20210804233459252" style="zoom:80%;" /> 



<p>2). 进入add.html，页面发送ajax请求，请求服务端获取分类数据，用于菜品分类下拉框中数据展示(<strong>已实现</strong>)</p>
<p>3). add.html获取id, 发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</p>
<img src="assets/image-20210804234104633.png" alt="image-20210804234104633" style="zoom:80%;" /> 



<p>4). 页面发送请求，请求服务端进行图片下载，用于页图片回显(<strong>已实现</strong>)</p>
<p><img src="/assets/image-20210804234226201.png" alt="image-20210804234226201"> </p>
<p>5). 点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</p>
<img src="assets/image-20210804234442923.png" alt="image-20210804234442923" style="zoom:80%;" /> 



<p>经过上述的分析，我们发现，菜品分类下拉框的展示、图片的下载回显功能我们都已经实现了。我们只需要在这里实现两个功能即可，分别是： </p>
<p><strong>1). 根据ID查询菜品及菜品口味信息</strong></p>
<p>具体请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;{id}</td>
</tr>
</tbody></table>
<p><strong>2). 修改菜品及菜品口味信息</strong></p>
<p>具体请求信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>具体的json格式数据，我们可以通过浏览器抓取： </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397844357980663809&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">88800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;da9e1c70-fc32-4781-9510-a1c4ccd2ff59.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;佛跳墙&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914883235842&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;辣度&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不辣\&quot;,\&quot;微辣\&quot;,\&quot;中辣\&quot;,\&quot;重辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914895818754&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1422783914845487106&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;忌口&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;[\&quot;不要葱\&quot;,\&quot;不要蒜\&quot;,\&quot;不要香菜\&quot;,\&quot;不要辣\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-08-04 12:58:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span><span class="string">&quot;1412578435737350122&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDeleted&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showOption&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-功能实现"><a href="#4-3-功能实现" class="headerlink" title="4.3 功能实现"></a>4.3 功能实现</h3><h4 id="4-3-1-根据ID查询菜品信息"><a href="#4-3-1-根据ID查询菜品信息" class="headerlink" title="4.3.1 根据ID查询菜品信息"></a>4.3.1 根据ID查询菜品信息</h4><h5 id="4-3-1-1-代码实现"><a href="#4-3-1-1-代码实现" class="headerlink" title="4.3.1.1 代码实现"></a>4.3.1.1 代码实现</h5><p>页面发送ajax请求，请求服务端，根据id查询当前菜品信息和对应的口味信息，用于修改页面中菜品信息回显。</p>
<p>1). 在DishService接口中扩展getByIdWithFlavor方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<p>2). 在DishService实现类中实现此方法</p>
<p>具体逻辑为: </p>
<p>A. 根据ID查询菜品的基本信息 </p>
<p>B. 根据菜品的ID查询菜品口味列表数据</p>
<p>C. 组装数据并返回</p>
<p>代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询菜品基本信息，从dish表查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">	</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//查询当前菜品对应的口味信息，从dish_flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询菜品信息和对应的口味信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>@PathVariable : 该注解可以用来提取url路径中传递的请求参数。</p>
</blockquote>
<h5 id="4-3-1-2-功能测试"><a href="#4-3-1-2-功能测试" class="headerlink" title="4.3.1.2 功能测试"></a>4.3.1.2 功能测试</h5><p>编写完代码后，重启服务进行测试，点击列表的修改按钮，查询数据回显情况。</p>
<p><img src="/assets/image-20210805101812209.png" alt="image-20210805101812209"> </p>
<h4 id="4-3-2-修改菜品信息"><a href="#4-3-2-修改菜品信息" class="headerlink" title="4.3.2 修改菜品信息"></a>4.3.2 修改菜品信息</h4><h5 id="4-3-2-1-代码实现"><a href="#4-3-2-1-代码实现" class="headerlink" title="4.3.2.1 代码实现"></a>4.3.2.1 代码实现</h5><p>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端。在修改菜品信息时需要注意，除了要更新dish菜品表，还需要更新dish_flavor菜品口味表。</p>
<p>1). 在DishService接口中扩展方法updateWithFlavor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新菜品信息，同时更新对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure>



<p>2). 在DishServiceImpl中实现方法updateWithFlavor</p>
<p>在该方法中，我们既需要更新dish菜品基本信息表，还需要更新dish_flavor菜品口味表。而页面再操作时，关于菜品的口味，有修改，有新增，也有可能删除，我们应该如何更新菜品口味信息呢，其实，无论菜品口味信息如何变化，我们只需要保持一个原则： 先删除，后添加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">//更新dish表基本信息</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清理当前菜品对应口味数据---dish_flavor表的delete操作</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加当前提交过来的口味数据---dish_flavor表的insert操作</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 在DishController中创建update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改菜品</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-3-2-2-功能测试"><a href="#4-3-2-2-功能测试" class="headerlink" title="4.3.2.2 功能测试"></a>4.3.2.2 功能测试</h5><p>代码编写完成之后，重启服务，然后按照前面分析的操作流程进行测试，查看数据是否正常修改即可。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day03</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day03/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-Day03"><a href="#瑞吉外卖-Day03" class="headerlink" title="瑞吉外卖-Day03"></a>瑞吉外卖-Day03</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li>公共字段自动填充</li>
<li>新增分类</li>
<li>分类信息分页查询</li>
<li>删除分类</li>
<li>修改分类</li>
</ul>
<span id="more"></span>



<h2 id="1-公共字段自动填充"><a href="#1-公共字段自动填充" class="headerlink" title="1. 公共字段自动填充"></a>1. 公共字段自动填充</h2><h3 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h3><p>前面我们已经完成了后台系统的员工管理功能的开发，在新增员工时需要设置创建时间、创建人、修改时间、修改人等字段，在编辑员工时需要设置修改时间、修改人等字段。这些字段属于公共字段，也就是也就是在我们的系统中很多表中都会有这些字段，如下：</p>
<p><img src="/assets/image-20210801085103062.png" alt="image-20210801085103062"> </p>
<p>而针对于这些字段，我们的赋值方式为： </p>
<p>A. 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。</p>
<p>B. 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。</p>
<p>目前,在我们的项目中处理这些字段都是在每一个业务方法中进行赋值操作,如下:</p>
<img src="assets/image-20210801085615162.png" alt="image-20210801085615162" style="zoom:80%;" /> 

<img src="assets/image-20210801085715419.png" alt="image-20210801085715419" style="zoom:80%;" /> 



<p>如果都按照上述的操作方式来处理这些公共字段, 需要在每一个业务方法中进行操作, 编码相对冗余、繁琐，那能不能对于这些公共字段在某个地方统一处理，来简化开发呢？</p>
<p><strong>答案是可以的，我们使用Mybatis Plus提供的公共字段自动填充功能。</strong></p>
<h3 id="1-2-基本功能实现"><a href="#1-2-基本功能实现" class="headerlink" title="1.2 基本功能实现"></a>1.2 基本功能实现</h3><h4 id="1-2-1-思路分析"><a href="#1-2-1-思路分析" class="headerlink" title="1.2.1 思路分析"></a>1.2.1 思路分析</h4><p>Mybatis Plus公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。在上述的问题分析中，我们提到有四个公共字段，需要在新增&#x2F;更新中进行赋值操作, 具体情况如下: </p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>赋值时机</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>createTime</td>
<td>插入(INSERT)</td>
<td>当前时间</td>
</tr>
<tr>
<td>updateTime</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前时间</td>
</tr>
<tr>
<td>createUser</td>
<td>插入(INSERT)</td>
<td>当前登录用户ID</td>
</tr>
<tr>
<td>updateUser</td>
<td>插入(INSERT) , 更新(UPDATE)</td>
<td>当前登录用户ID</td>
</tr>
</tbody></table>
<p>实现步骤：</p>
<p>1、在实体类的属性上加入@TableField注解，指定自动填充的策略。</p>
<p>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</p>
<h4 id="1-2-2-代码实现"><a href="#1-2-2-代码实现" class="headerlink" title="1.2.2 代码实现"></a>1.2.2 代码实现</h4><p><strong>1). 实体类的属性上加入@TableField注解，指定自动填充的策略。</strong></p>
<p>在员工Employee实体类的公共字段属性上, 加上注解, 指定填充策略。(<font color='red'>ps.在资料中提供的实体类,已经添加了该注解,并指定了填充策略</font>)</p>
<img src="assets/image-20210801092157093.png" alt="image-20210801092157093" style="zoom:80%;" /> 

<blockquote>
<p>FieldFill.INSERT: 插入时填充该属性值</p>
<p>FieldFill.INSERT_UPDATE: 插入&#x2F;更新时填充该属性值</p>
</blockquote>
<p><strong>2). 按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口。</strong></p>
<p>所属包: com.itheima.reggie.common</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        </span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-3-功能测试"><a href="#1-2-3-功能测试" class="headerlink" title="1.2.3 功能测试"></a>1.2.3 功能测试</h4><p>编写完了元数据对象处理器之后，我们就可以将之前在新增和修改方法中手动赋值的代码删除或注释掉。</p>
<img src="assets/image-20210801093623217.png" alt="image-20210801093623217" style="zoom: 80%;" />  

<img src="assets/image-20210801093747896.png" alt="image-20210801093747896" style="zoom:80%;" /> 



<p>然后，我们启动项目，在员工管理模块中，测试增加&#x2F;更新员工信息功能，然后通过debug 或者 直接查询数据库数据变更的形式，看看我们在新增&#x2F;修改数据时，这些公共字段数据是否能够完成自动填充。</p>
<h3 id="1-3-功能完善"><a href="#1-3-功能完善" class="headerlink" title="1.3 功能完善"></a>1.3 功能完善</h3><h4 id="1-3-1-思路分析"><a href="#1-3-1-思路分析" class="headerlink" title="1.3.1 思路分析"></a>1.3.1 思路分析</h4><p>前面我们已经完成了公共字段自动填充功能的代码开发，但是还有一个问题没有解决，就是我们在自动填充createUser和updateUser时设置的用户id是固定值，现在我们需要完善，改造成动态获取当前登录用户的id。</p>
<p>大家可能想到，用户登录成功后我们将用户id存入了HttpSession中，现在我从HttpSession中获取不就行了？</p>
<img src="assets/image-20210801131449863.png" alt="image-20210801131449863" style="zoom:80%;" /> 

<p>注意，我们在MyMetaObjectHandler类中是不能直接获得HttpSession对象的，所以我们需要通过其他方式来获取登录用户id。</p>
<p>那么我先搞清楚一点,当我们在修改员工信息时, 我们业务的执行流程是什么样子的,如下图:</p>
<img src="assets/image-20210801133531663.png" alt="image-20210801133531663" style="zoom:80%;" />  

<p>客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程：</p>
<p>1). LoginCheckFilter的doFilter方法</p>
<p>2). EmployeeController的update方法</p>
<p>3). MyMetaObjectHandler的updateFill方法</p>
<p>我们可以在上述类的方法中加入如下代码(获取当前线程ID,并输出):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br></pre></td></tr></table></figure>

<p>执行编辑员工功能进行验证，通过观察控制台输出可以发现，一次请求对应的线程id是相同的：</p>
<img src="assets/image-20210801133827264.png" alt="image-20210801133827264" style="zoom:80%;" />  



<p>经过上述的分析之后,发现我们可以使用JDK提供的一个类, 来解决此问题,它是JDK中提供的 ThreadLocal。</p>
<h4 id="1-3-2-ThreadLocal"><a href="#1-3-2-ThreadLocal" class="headerlink" title="1.3.2 ThreadLocal"></a>1.3.2 ThreadLocal</h4><p>ThreadLocal并不是一个Thread，而是Thread的局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问当前线程对应的值。</p>
<p><strong>ThreadLocal常用方法：</strong></p>
<p>A. public void set(T value) : 设置当前线程的线程局部变量的值</p>
<p>B. public T get() : 返回当前线程所对应的线程局部变量的值</p>
<p>C. public void remove() : 删除当前线程所对应的线程局部变量的值 </p>
<p>我们可以在LoginCheckFilter的doFilter方法中获取当前登录用户id，并调用ThreadLocal的set方法来设置当前线程的线程局部变量的值（用户id），然后在MyMetaObjectHandler的updateFill方法中调用ThreadLocal的get方法来获得当前线程所对应的线程局部变量的值（用户id）。 如果在后续的操作中, 我们需要在Controller &#x2F; Service中要使用当前登录用户的ID, 可以直接从ThreadLocal直接获取。</p>
<h4 id="1-3-3-操作步骤"><a href="#1-3-3-操作步骤" class="headerlink" title="1.3.3 操作步骤"></a>1.3.3 操作步骤</h4><p>实现步骤：</p>
<p>1). 编写BaseContext工具类，基于ThreadLocal封装的工具类</p>
<p>2). 在LoginCheckFilter的doFilter方法中调用BaseContext来设置当前登录用户的id</p>
<p>3). 在MyMetaObjectHandler的方法中调用BaseContext获取登录用户的id</p>
<h4 id="1-3-4-代码实现"><a href="#1-3-4-代码实现" class="headerlink" title="1.3.4 代码实现"></a>1.3.4 代码实现</h4><p><strong>1). BaseContext工具类</strong></p>
<p>所属包: com.itheima.reggie.common</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2).LoginCheckFilter中存放当前登录用户到ThreadLocal</strong></p>
<p>在doFilter方法中, 判定用户是否登录, 如果用户登录, 在放行之前, 获取HttpSession中的登录用户信息, 调用BaseContext的setCurrentId方法将当前登录用户ID存入ThreadLocal。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">BaseContext.setCurrentId(empId);</span><br></pre></td></tr></table></figure>

<img src="assets/image-20210801162053581.png" alt="image-20210801162053581" style="zoom:80%;" /> 





<p><strong>3). MyMetaObjectHandler中从ThreadLocal中获取</strong></p>
<p>将之前在代码中固定的当前登录用户1， 修改为动态调用BaseContext中的getCurrentId方法获取当前登录用户ID</p>
<img src="assets/image-20210801162345846.png" alt="image-20210801162345846" style="zoom:80%;" /> 

<img src="assets/image-20210801162436740.png" alt="image-20210801162436740" style="zoom:80%;" /> 



<h4 id="1-3-5-功能测试"><a href="#1-3-5-功能测试" class="headerlink" title="1.3.5 功能测试"></a>1.3.5 功能测试</h4><p>完善了元数据对象处理器之后，我们就可以重新启动项目，完成登录操作后, 在员工管理模块中，测试增加&#x2F;更新员工信息功能, 直接查询数据库数据变更，看看我们在新增&#x2F;修改数据时，这些公共字段数据是否能够完成自动填充, 并且看看填充的create_user 及 update_user字段值是不是本地登录用户的ID。</p>
<h2 id="2-新增分类"><a href="#2-新增分类" class="headerlink" title="2. 新增分类"></a>2. 新增分类</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>后台系统中可以管理分类信息，分类包括两种类型，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。当我们在后台系统中添加菜品时需要选择一个菜品分类，当我们在后台系统中添加一个套餐时需要选择一个套餐分类，在移动端也会按照菜品分类和套餐分类来展示对应的菜品和套餐。</p>
<img src="assets/image-20210801163745391.png" alt="image-20210801163745391" style="zoom:80%;" /> 



<p>在分类管理中,我们新增分类时, 可以选择新增菜品分类(川菜、湘菜、粤菜…), 也可以选择新增套餐分类(营养早餐、超值午餐…)。 在添加套餐的时候, 输入的排序字段, 控制的是移动端套餐列表的展示顺序。</p>
<img src="assets/image-20210801165118745.png" alt="image-20210801165118745" style="zoom:80%;" /> 



<h3 id="2-2-数据模型"><a href="#2-2-数据模型" class="headerlink" title="2.2 数据模型"></a>2.2 数据模型</h3><p>新增分类，其实就是将我们新增窗口录入的分类数据,插入到category表，具体表结构如下：</p>
<p><img src="/assets/image-20210801165801665.png" alt="image-20210801165801665"> </p>
<p>我们添加的套餐名称，是唯一的，不能够重复的，所以在设计表结构时，已经针对于name字段建立了唯一索引，如下：</p>
<p><img src="/assets/image-20210801165921450.png" alt="image-20210801165921450"> </p>
<h3 id="2-3-前端页面分析"><a href="#2-3-前端页面分析" class="headerlink" title="2.3 前端页面分析"></a>2.3 前端页面分析</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 在页面(backend&#x2F;page&#x2F;category&#x2F;list.html)的新增分类表单中填写数据，点击 “确定” 发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service将数据进行保存</p>
<p>3). Service调用Mapper操作数据库，保存数据</p>
<p>可以看到新增菜品分类和新增套餐分类请求的服务端地址和提交的json数据结构相同，所以服务端只需要提供一个方法统一处理即可：</p>
<img src="assets/image-20210801171125255.png" alt="image-20210801171125255" style="zoom:80%;" /> 

<p>具体请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式 - {“name”:”川菜”,”type”:”1”,”sort”:2}</td>
</tr>
</tbody></table>
<h3 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h3><p>代码实现的具体步骤如下: </p>
<ul>
<li><p>实体类Category（直接从课程资料中导入即可）</p>
</li>
<li><p>Mapper接口CategoryMapper</p>
</li>
<li><p>业务层接口CategoryService</p>
</li>
<li><p>业务层实现类CategoryServiceImpl</p>
</li>
<li><p>控制层CategoryController</p>
</li>
</ul>
<p><strong>1). 实体类Category</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口CategoryMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 业务层接口CategoryService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层实现类CategoryServiceImpl</strong></p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper,Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 控制层CategoryController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>,category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>



<h3 id="2-5-功能测试"><a href="#2-5-功能测试" class="headerlink" title="2.5 功能测试"></a>2.5 功能测试</h3><p>新增分类的代码编写完毕之后, 我们需要重新启动项目，进入管理系统访问分类管理, 然后进行新增分类测试，需要将所有情况都覆盖全，例如：</p>
<p>1). 输入的分类名称不存在</p>
<p>2). 输入已存在的分类名称</p>
<p>3). 新增菜品分类</p>
<p>4). 新增套餐分类</p>
<h2 id="3-分类信息分页查询"><a href="#3-分类信息分页查询" class="headerlink" title="3. 分类信息分页查询"></a>3. 分类信息分页查询</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<img src="assets/image-20210801172259439.png" alt="image-20210801172259439" style="zoom:80%;" /> 





<h3 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p>
<p>1). 页面发送ajax请求，将分页查询参数(page、pageSize)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service查询数据</p>
<p>3). Service调用Mapper操作数据库，查询分页数据</p>
<p>4). Controller将查询到的分页数据响应给页面</p>
<p>5). 页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p>
<p>页面加载时,就会触发Vue声明周期的钩子方法,然后执行分页查询,发送异步请求到服务端,前端代码如下: </p>
<img src="assets/image-20210801172847501.png" alt="image-20210801172847501" style="zoom:80%;" />  

<p>页面中使用的是ElementUI提供的分页组件进行分页条的展示:</p>
<img src="assets/image-20210801173229949.png" alt="image-20210801173229949" style="zoom:80%;" />  



<p>我们通过浏览器,也可以抓取到分页查询的请求信息, 如下: </p>
<img src="assets/image-20210801172951915.png" alt="image-20210801172951915" style="zoom:80%;" /> 



<p>具体的请求信息整理如下: </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10</td>
</tr>
</tbody></table>
<h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><p>在CategoryController中增加分页查询的方法，在方法中传递分页条件进行查询，并且需要对查询到的结果，安排设置的套餐顺序字段sort进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加排序条件，根据sort进行排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>分页查询的代码编写完毕之后, 我们需要重新启动项目，然后登陆系统后台，点击分类管理，查询分类列表是否可以正常展示。测试过程中可以使用浏览器的监控工具查看页面和服务端的数据交互细节。</p>
<p>测试完毕后，大家会发现，我们查询数据库返回的类型为 1 或者 2， 但是实际展示到页面上的却是 “菜品分类” 或 “套餐分类”，这一块是在前端页面中进行处理的，处理代码如下： </p>
<img src="assets/image-20210801173758580.png" alt="image-20210801173758580" style="zoom:80%;" /> 

<img src="assets/image-20210801173850606.png" alt="image-20210801173850606" style="zoom:94%;" /> 





<h2 id="4-删除分类"><a href="#4-删除分类" class="headerlink" title="4. 删除分类"></a>4. 删除分类</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<img src="assets/image-20210801220637396.png" alt="image-20210801220637396" style="zoom:80%;" /> 



<h3 id="4-2-前端页面分析"><a href="#4-2-前端页面分析" class="headerlink" title="4.2 前端页面分析"></a>4.2 前端页面分析</h3><p>在前端页面中，点击 “删除” 按钮，就会触发定义的方法，然后往服务端发送异步请求，并传递参数id，执行删除分类操作。</p>
 <img src="assets/image-20210801221049176.png" alt="image-20210801221049176" style="zoom:80%;" />  

<p>删除操作的具体执行流程如下： </p>
<p>1). 点击删除，页面发送ajax请求，将参数(id)提交到服务端</p>
<p>2). 服务端Controller接收页面提交的数据并调用Service删除数据</p>
<p>3). Service调用Mapper操作数据库</p>
<img src="assets/image-20210801221343539.png" alt="image-20210801221343539" style="zoom:80%;" /> 



<p>从上述的分析中，我们可以得到请求的信息如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>?id&#x3D;1395291114922618881</td>
</tr>
</tbody></table>
<h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><p>在CategoryController中增加根据ID删除的方法，在方法中接收页面传递参数id，然后执行删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类，id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-4-功能测试"><a href="#4-4-功能测试" class="headerlink" title="4.4 功能测试"></a>4.4 功能测试</h3><p>基本的删除操作代码实现完毕后，重启项目，进行测试。可以通过debug断点调试进行测试，同时结合浏览器监控工具查看请求和响应的具体数据。</p>
<h3 id="4-5-功能完善"><a href="#4-5-功能完善" class="headerlink" title="4.5 功能完善"></a>4.5 功能完善</h3><h4 id="4-5-1-思路分析"><a href="#4-5-1-思路分析" class="headerlink" title="4.5.1 思路分析"></a>4.5.1 思路分析</h4><p>在上述的测试中，我们看到分类数据是可以正常删除的。但是并没有检查删除的分类是否关联了菜品或者套餐，所以我们需要进行功能完善。完善后的逻辑为：</p>
<ul>
<li>根据当前分类的ID，查询该分类下是否存在菜品，如果存在，则提示错误信息</li>
<li>根据当前分类的ID，查询该分类下是否存在套餐，如果存在，则提示错误信息</li>
<li>执行正常的删除分类操作</li>
</ul>
<p>那么在这里又涉及到我们后面要用到的两张表结构 dish(菜品表) 和 setmeal(套餐表)。具体的表结构，我们目前先了解一下： </p>
<img src="assets/image-20210802001302912.png" alt="image-20210802001302912" style="zoom:80%;" /> 

<img src="assets/image-20210802001348928.png" alt="image-20210802001348928" style="zoom:80%;" /> 





<h4 id="4-5-2-准备工作"><a href="#4-5-2-准备工作" class="headerlink" title="4.5.2 准备工作"></a>4.5.2 准备工作</h4><p><strong>1). 准备菜品(Dish)及套餐(Setmeal)实体类(课程资料中直接拷贝)</strong></p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). Mapper接口DishMapper和SetmealMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). Service接口DishService和SetmealService</strong></p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). Service实现类DishServiceImpl和SetmealServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.DishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper,Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper,Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-5-3-代码实现"><a href="#4-5-3-代码实现" class="headerlink" title="4.5.3 代码实现"></a>4.5.3 代码实现</h4><p><strong>1). 创建自定义异常</strong></p>
<p>在业务逻辑操作过程中,如果遇到一些业务参数、操作异常的情况下，我们直接抛出此异常。</p>
<p>所在包: com.itheima.reggie.common</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 在CategoryService中扩展remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">	<span class="comment">//根据ID删除分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 在CategoryServiceImpl中实现remove方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DishService dishService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类，删除之前需要进行判断</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//添加查询条件，根据分类id进行查询菜品数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    dishLambdaQueryWrapper.eq(Dish::getCategoryId,id);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">    <span class="comment">//如果已经关联，抛出一个业务异常</span></span><br><span class="line">    <span class="keyword">if</span>(count1 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);<span class="comment">//已经关联菜品，抛出一个业务异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前分类是否关联了套餐，如果已经关联，抛出一个业务异常</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId,id);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count2 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);<span class="comment">//已经关联套餐，抛出一个业务异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常删除分类</span></span><br><span class="line">    <span class="built_in">super</span>.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>那么在上述的业务逻辑中，当分类下关联的有菜品或者套餐时，我们在业务代码中抛出了自定义异常，并且在异常中封装了错误提示信息，那这个错误提示信息如何提示给页面呢？</p>
<p>异常抛出之后，会被异常处理器捕获，我们只需要在异常处理器中捕获这一类的异常，然后给页面返回对应的提示信息即可。</p>
<p><strong>4). 在GlobalExceptionHandler中处理自定义异常</strong></p>
<p>在全局异常处理器中增加方法，用于捕获我们自定义的异常 CustomException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 改造CategoryController的delete方法</strong></p>
<p>注释掉原有的代码，在delete方法中直接调用categoryService中我们自定义的remove方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id删除分类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除分类，id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//categoryService.removeById(id);</span></span><br><span class="line">    categoryService.remove(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-5-4-功能测试"><a href="#4-5-4-功能测试" class="headerlink" title="4.5.4 功能测试"></a>4.5.4 功能测试</h4><p>功能完善的代码编写完毕之后, 我们需要重新启动项目，进入管理系统访问分类管理, 然后进行删除分类的测试，需要将所有情况都覆盖全，例如：</p>
<p>1). 新增一个分类，然后再直接删除，检查是否可以正常删除成功。(新增的分类时没有关联菜品和套餐的)</p>
<p>2). 在数据库表(dish&#x2F;setmeal)中，找到一个与菜品或套餐关联的分类，然后在页面中执行删除操作，检查是否可以正常的提示出对应的错误信息。</p>
<img src="assets/image-20210801235124007.png" alt="image-20210801235124007" style="zoom:80%;" /> 





<h2 id="5-修改分类"><a href="#5-修改分类" class="headerlink" title="5. 修改分类"></a>5. 修改分类</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作。</p>
<img src="assets/image-20210801235311435.png" alt="image-20210801235311435" style="zoom:80%;" /> 



<h3 id="5-2-前端页面分析"><a href="#5-2-前端页面分析" class="headerlink" title="5.2 前端页面分析"></a>5.2 前端页面分析</h3><p>这里面大家会发现，修改功能我们还没有实现，但是当点击 “修改” 按钮的时候，我们并没有开发根据ID查询数据，进行页面回显的功能，但是页面的分类数据确实回显回来了。这是怎么做到的呢，我们来解析一下前端的代码实现(前端代码已经实现)：</p>
<img src="assets/image-20210802000227359.png" alt="image-20210802000227359" style="zoom:80%;" /> 

<p>那么回显这一步的操作前端已经实现，我们就只需要开发一个方法，修改操作的方法即可。我们可以通过浏览器来抓取一下修改操作的请求信息，如图：</p>
<img src="assets/image-20210802000605946.png" alt="image-20210802000605946" style="zoom:80%;" /> 



<p>具体的请求信息，整理如下：</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>PUT</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;category</td>
</tr>
<tr>
<td>请求参数</td>
<td>{id: “1399923597874081794”, name: “超值午餐”, sort: 0}</td>
</tr>
</tbody></table>
<h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><p>html页面中相关的代码都已经提供好了，我们已经分析了请求的信息，接下来就可以来创建服务端的CategoryController方法update方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>,category);</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类信息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-功能测试"><a href="#5-4-功能测试" class="headerlink" title="5.4 功能测试"></a>5.4 功能测试</h3><p>按照前面分析的操作流程进行测试，查看数据是否正常修改即可。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day05</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day05/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-第五天"><a href="#瑞吉外卖-第五天" class="headerlink" title="瑞吉外卖-第五天"></a>瑞吉外卖-第五天</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li><p>新增套餐</p>
</li>
<li><p>套餐分页查询</p>
</li>
<li><p>删除套餐</p>
</li>
<li><p>短信发送</p>
</li>
<li><p>手机验证码登录</p>
</li>
</ul>
<span id="more"></span>



<h2 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h2><h3 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h3><p>套餐就是菜品的集合。</p>
<p>后台系统中可以管理套餐信息，通过新增套餐功能来添加一个新的套餐，在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片，在移动端会按照套餐分类来展示对应的套餐。</p>
<img src="assets/image-20210805232711418.png" alt="image-20210805232711418" style="zoom:80%;" /> 



<h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表，还需要向setmeal_dish表插入套餐和菜品关联数据。所以在新增套餐时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>setmeal</td>
<td>套餐表</td>
<td>存储套餐的基本信息</td>
</tr>
<tr>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
<td>存储套餐关联的菜品的信息(一个套餐可以关联多个菜品)</td>
</tr>
</tbody></table>
<p>两张表具体的表结构如下: </p>
<p><strong>1). 套餐表setmeal</strong></p>
<p><img src="/assets/image-20210805233615067.png" alt="image-20210805233615067"> </p>
<p>在该表中，套餐名称name字段是不允许重复的，在建表时，已经创建了唯一索引。</p>
<p><img src="/assets/image-20210805234059563.png" alt="image-20210805234059563"> </p>
<p><strong>2). 套餐菜品关系表setmeal_dish</strong></p>
<p><img src="/assets/image-20210805233807009.png" alt="image-20210805233807009"> </p>
<p>在该表中，菜品的名称name,菜品的原价price 实际上都是冗余字段,因为我们在这张表中存储了菜品的ID(dish_id),根据该ID我们就可以查询出name,price的数据信息,而这里我们又存储了name,price,这样的话,我们在后续的查询展示操作中,就不需要再去查询数据库获取菜品名称和原价了,这样可以简化我们的操作。</p>
<h3 id="1-3-准备工作"><a href="#1-3-准备工作" class="headerlink" title="1.3 准备工作"></a>1.3 准备工作</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好，在做这一块儿的准备工作时，我们无需准备Setmeal的相关实体类、Mapper接口、Service接口及实现，因为之前在做分类管理的时候，我们已经引入了Setmeal的相关基础代码。 接下来，我们就来完成以下的几步准备工作： </p>
<p><strong>1). 实体类 SetmealDish</strong></p>
<p>ps.直接从课程资料中导入即可，Setmeal实体前面课程中已经导入过了。</p>
<p>所属包： com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). DTO SetmealDto</strong></p>
<p>该数据传输对象DTO,主要用于封装页面在新增套餐时传递过来的json格式的数据,其中包含套餐的基本信息,还包含套餐关联的菜品集合。直接从课程资料中导入即可。</p>
<p>所属包： com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;<span class="comment">//套餐关联的菜品集合</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). Mapper接口 SetmealDishMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层接口 SetmealDishService</strong></p>
<p>所属包： com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 业务层实现类 SetmealDishServiceImpl</strong></p>
<p>所属包： com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.SetmealDishMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper,SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6). 控制层 SetmealController</strong></p>
<p>套餐管理的相关业务，我们都统一在 SetmealController 中进行统一处理操作。</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>





<h3 id="1-4-前端页面分析"><a href="#1-4-前端页面分析" class="headerlink" title="1.4 前端页面分析"></a>1.4 前端页面分析</h3><p>服务端的基础准备工作我们准备完毕之后，在进行代码开发之前，需要梳理一下新增套餐时前端页面和服务端的交互过程：</p>
<p>1). 点击新建套餐按钮，访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载发送ajax请求，请求服务端获取<strong>套餐分类</strong>数据并展示到下拉框中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806002144537.png" alt="image-20210806002144537"> </p>
<p>获取套餐分类列表的功能我们不用开发，之前已经开发完成了，之前查询时type传递的是1，查询菜品分类; 本次查询时，传递的type为2，查询套餐分类列表。</p>
<p>2). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载时发送ajax请求，请求服务端获取<strong>菜品分类</strong>数据并展示到添加菜品窗口中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806002730820.png" alt="image-20210806002730820"> </p>
<p>本次查询分类列表，传递的type为1，表示需要查询的是菜品的分类。查询菜品分类的目的，是添加套餐关联的菜品时，我们需要根据菜品分类，来过滤查询菜品信息。查询菜品分类列表的代码已经实现， 具体展示效果如下： </p>
<p><img src="/assets/image-20210806003318531.png" alt="image-20210806003318531">  </p>
<p>3). 当点击添加菜品窗口左侧菜单的某一个分类, 页面发送ajax请求，请求服务端，根据菜品分类查询对应的<strong>菜品</strong>数据并展示到添加菜品窗口中</p>
<p><img src="/assets/image-20210806004116496.png" alt="image-20210806004116496"> </p>
<p>4). 页面发送请求进行<strong>图片上传</strong>，请求服务端将图片保存到服务器(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p>5). 页面发送请求进行<strong>图片下载</strong>，将上传的图片进行回显(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806004434277.png" alt="image-20210806004434277"> </p>
<p>6). 点击保存按钮，发送ajax请求，将<strong>套餐</strong>相关数据以json形式提交到服务端</p>
<p><img src="/assets/image-20210806005028874.png" alt="image-20210806005028874"> </p>
<p>经过上述的页面解析及流程分析，我们发送这里需要发送的请求有5个，分别是 ：</p>
<p>A. 根据传递的参数,查询套餐分类列表</p>
<p>B. 根据传递的参数,查询菜品分类列表</p>
<p>C. 图片上传</p>
<p>D. 图片下载展示</p>
<p>E. 根据菜品分类ID,查询菜品列表</p>
<p>F. 保存套餐信息</p>
<p>而对于以上的前4个功能我们都已经实现, 所以我们接下来需要开发的功能主要是最后两项, 具体的请求信息如下:</p>
<p><strong>1). 根据分类ID查询菜品列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?categoryId&#x3D;1397844263642378242</td>
</tr>
</tbody></table>
<p><strong>2). 保存套餐信息</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>传递的json格式数据如下: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dishList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;idType&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329009705463809&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;米饭&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423328152549109762&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;可乐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">500</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397853890262118402&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;鱼香肉丝&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-代码开发"><a href="#1-5-代码开发" class="headerlink" title="1.5 代码开发"></a>1.5 代码开发</h3><p>上面我们已经分析了接下来我们需要实现的两个功能，接下来我们就需要根据上述的分析，来完成具体的功能实现。</p>
<h4 id="1-5-1-根据分类查询菜品"><a href="#1-5-1-根据分类查询菜品" class="headerlink" title="1.5.1 根据分类查询菜品"></a>1.5.1 根据分类查询菜品</h4><h5 id="1-5-1-1-功能实现"><a href="#1-5-1-1-功能实现" class="headerlink" title="1.5.1.1 功能实现"></a>1.5.1.1 功能实现</h5><p>在当前的需求中，我们只需要根据页面传递的菜品分类的ID(categoryId)来查询菜品列表即可，我们可以直接定义一个DishController的方法，声明一个Long类型的categoryId，这样做是没问题的。但是考虑到该方法的拓展性，我们在这里定义方法时，通过Dish这个实体来接收参数。</p>
<p>在DishController中定义方法list，接收Dish类型的参数：</p>
<p>在查询时，需要根据菜品分类categoryId进行查询，并且还要限定菜品的状态为起售状态(status为1)，然后对查询的结果进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据条件查询对应的菜品数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span> ,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">	</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-5-1-2-功能测试"><a href="#1-5-1-2-功能测试" class="headerlink" title="1.5.1.2 功能测试"></a>1.5.1.2 功能测试</h5><p>代码编写完毕，我们重新启动服务器，进行测试，可以通过debug断点跟踪的形式查看页面传递的参数封装情况，及响应给页面的数据信息。</p>
<p><img src="/assets/image-20210806012153982.png" alt="image-20210806012153982"> </p>
<h4 id="1-5-2-保存套餐"><a href="#1-5-2-保存套餐" class="headerlink" title="1.5.2 保存套餐"></a>1.5.2 保存套餐</h4><h5 id="1-5-2-1-功能实现"><a href="#1-5-2-1-功能实现" class="headerlink" title="1.5.2.1 功能实现"></a>1.5.2.1 功能实现</h5><p>在进行套餐信息保存时，前端提交的数据，不仅包含套餐的基本信息，还包含套餐关联的菜品列表数据 setmealDishes。所以这个时候我们使用Setmeal就不能完成参数的封装了，我们需要在Setmeal的基本属性的基础上，再扩充一个属性 setmealDishes 来接收页面传递的套餐关联的菜品列表，而我们在准备工作中，导入进来的SetmealDto能够满足这个需求。</p>
<p>1). SetmealController中定义方法save，新增套餐</p>
<p>在该Controller的方法中,我们不仅需要保存套餐的基本信息，还需要保存套餐关联的菜品数据，所以我们需要再该方法中调用业务层方法,完成两块数据的保存。</p>
<p>页面传递的数据是json格式，需要在方法形参前面加上@RequestBody注解, 完成参数封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2). SetmealService中定义方法saveWithDish</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>



<p>3). SetmealServiceImpl实现方法saveWithDish</p>
<p>具体逻辑: </p>
<p>A. 保存套餐基本信息</p>
<p>B. 获取套餐关联的菜品集合，并为集合中的每一个元素赋值套餐ID(setmealId)</p>
<p>C. 批量保存套餐关联的菜品集合</p>
<p>代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-5-2-2-功能测试"><a href="#1-5-2-2-功能测试" class="headerlink" title="1.5.2.2 功能测试"></a>1.5.2.2 功能测试</h5><p>代码编写完毕，我们重新启动服务器，进行测试，可以通过debug断点跟踪的形式查看页面传递的参数封装情况，及套餐相关数据的保存情况。</p>
<p>录入表单数据: </p>
<p><img src="/assets/image-20210806014328575.png" alt="image-20210806014328575"> </p>
<p>debug跟踪数据封装:</p>
<p><img src="/assets/image-20210806014508310.png" alt="image-20210806014508310"> </p>
<p>跟踪数据库保存的数据:</p>
<p><img src="/assets/image-20210806014807017.png" alt="image-20210806014807017"> </p>
<h2 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="/assets/image-20210806073710653.png" alt="image-20210806073710653"> </p>
<p>在进行套餐数据的分页查询时，除了传递分页参数以外，还可以传递一个可选的条件(套餐名称)。查询返回的字段中，包含套餐的基本信息之外，还有一个套餐的分类名称，在查询时，需要关联查询这个字段。</p>
<h3 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下套餐分页查询时前端页面和服务端的交互过程：</p>
<p>1). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;list.html)，页面加载时，会自动发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<img src="assets/image-20210806074846550.png" alt="image-20210806074846550" style="zoom:80%;" /> 



<p>2). 在列表渲染展示时，页面发送请求，请求服务端进行图片下载，用于页面图片展示(<strong>已实现</strong>)</p>
<p><img src="/assets/image-20210806075231072.png" alt="image-20210806075231072"> </p>
<p>而对于以上的流程中涉及到2个功能,文件下载功能我们已经实现,本小节我们主要实现列表分页查询功能, 具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h3 id="2-3-代码开发"><a href="#2-3-代码开发" class="headerlink" title="2.3 代码开发"></a>2.3 代码开发</h3><h4 id="2-3-1-基本信息查询"><a href="#2-3-1-基本信息查询" class="headerlink" title="2.3.1 基本信息查询"></a>2.3.1 基本信息查询</h4><p>上述我们已经分析列表分页查询功能的请求信息，接下来我们就在SetmealController中创建套餐分页查询方法。</p>
<p>该方法的逻辑如下： </p>
<p>1). 构建分页条件对象</p>
<p>2). 构建查询条件对象，如果传递了套餐名称，根据套餐名称模糊查询， 并对结果按修改时间降序排序</p>
<p>3). 执行分页查询</p>
<p>4). 组装数据并返回</p>
<p>代码实现 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 套餐分页查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">	</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-问题分析"><a href="#2-3-2-问题分析" class="headerlink" title="2.3.2 问题分析"></a>2.3.2 问题分析</h4><p>基本分页查询代码编写完毕后，重启服务，测试列表查询，我们发现, 列表页面的数据可以展示出来, 但是套餐分类名称没有展示出来。</p>
<p><img src="/assets/image-20210806082542473.png" alt="image-20210806082542473"> </p>
<p>这是因为在服务端仅返回分类ID(categoryId), 而页面展示需要的是categoryName属性。 </p>
<h4 id="2-3-3-功能完善"><a href="#2-3-3-功能完善" class="headerlink" title="2.3.3 功能完善"></a>2.3.3 功能完善</h4><p>在查询套餐信息时, 只包含套餐的基本信息, 并不包含套餐的分类名称, 所以在这里查询到套餐的基本信息后, 还需要根据分类ID(categoryId), 查询套餐分类名称(categoryName)，并最终将套餐的基本信息及分类名称信息封装到SetmealDto(在第一小节已经导入)中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes; <span class="comment">//套餐关联菜品列表</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//套餐分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>完善后代码: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 套餐分页查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">//分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分类名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h3><p>代码完善后，重启服务，测试列表查询，我们发现, 抓取浏览器的请求响应数据，我们可以获取到套餐分类名称categoryName，也可以在列表页面展示出来 。</p>
<p><img src="/assets/image-20210806083346578.png" alt="image-20210806083346578"> </p>
<h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>在套餐管理列表页面,点击删除按钮，可以删除对应的套餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</p>
<p><img src="/assets/image-20210806214443507.png" alt="image-20210806214443507"> </p>
<h3 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下删除套餐时前端页面和服务端的交互过程：</p>
<p>1). 点击删除, 删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</p>
<p><img src="/assets/image-20210806215911878.png" alt="image-20210806215911878"> </p>
<p>2). 删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐</p>
<p><img src="/assets/image-20210806220406587.png" alt="image-20210806220406587"> </p>
<p>开发删除套餐功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，一次请求为根据ID删除，一次请求为根据ID批量删除。</p>
<p>观察删除单个套餐和批量删除套餐的请求信息可以发现，两种请求的<strong>地址</strong>和<strong>请求方式</strong>都是相同的，不同的则是传递的id个数，所以在服务端可以提供一个方法来统一处理。</p>
<p>具体的请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>?ids&#x3D;1423640210125656065,1423338765002256385</td>
</tr>
</tbody></table>
<h3 id="3-3-代码开发"><a href="#3-3-代码开发" class="headerlink" title="3.3 代码开发"></a>3.3 代码开发</h3><p>删除套餐的流程及请求信息，我们分析完毕之后，就来完成服务端的逻辑开发。在服务端的逻辑中, 删除套餐时, 我们不仅要删除套餐, 还要删除套餐与菜品的关联关系。</p>
<p><strong>1). 在SetmealController中创建delete方法</strong></p>
<p>我们可以先测试在delete方法中接收页面提交的参数，具体逻辑后续再完善：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完代码，我们重启服务之后，访问套餐列表页面，勾选复选框，然后点击”批量删除”,我们可以看到服务端可以接收到集合参数ids，并且在控制台也可以输出对应的数据 。</p>
<p><img src="/assets/image-20210806221603303.png" alt="image-20210806221603303"> </p>
<p><strong>2). SetmealService接口定义方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>3). SetmealServiceImpl中实现方法removeWithDish</strong></p>
<p>该业务层方法具体的逻辑为: </p>
<p>A. 查询该批次套餐中是否存在售卖中的套餐, 如果存在, 不允许删除</p>
<p>B. 删除套餐数据</p>
<p>C. 删除套餐关联的菜品数据</p>
<p>代码实现为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//select count(*) from setmeal where id in (1,2,3) and status = 1</span></span><br><span class="line">    <span class="comment">//查询套餐状态，确定是否可用删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   	 	<span class="comment">//如果不能删除，抛出一个业务异常</span></span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据----setmeal_dish</span></span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>由于当前的业务方法中存在多次数据库操作，为了保证事务的完整性，需要在方法上加注解 @Transactional 来控制事务。</p>
<p><strong>4). 完善SetmealController代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>代码完善后，重启服务，测试套餐的删除功能，主要测试以下几种情况。</p>
<p>1). 删除正在启用的套餐</p>
<p><img src="/assets/image-20210806224121877.png" alt="image-20210806224121877"> </p>
<p>2). 执行批量操作, 删除两条记录, 一个启售的, 一个停售的</p>
<p>由于当前我们并未实现启售&#x2F;停售功能，所以我们需要手动修改数据库表结构的status状态，将其中的一条记录status修改为0。</p>
<p><img src="/assets/image-20210806224603405.png" alt="image-20210806224603405"> </p>
<p>3). 删除已经停售的套餐信息，执行删除之后， 检查数据库表结构 setmeal ， setmeal_dish表中的数据</p>
<p><img src="/assets/image-20210806224807108.png" alt="image-20210806224807108"> </p>
<h2 id="4-短信发送"><a href="#4-短信发送" class="headerlink" title="4. 短信发送"></a>4. 短信发送</h2><img src="assets/image-20210806225505074.png" alt="image-20210806225505074" style="zoom:80%;" /> 

<p>在我们接下来要实现的移动端的业务开发中，第一块儿我们需要开发的功能就是移动端的登录功能，而移动端的登录功能，比较流行的方式就是基于短信验证码进行登录，那么这里涉及到了短信发送的知识，所以本章节，我们就来讲解，在项目开发中，我们如何发送短信。</p>
<h3 id="4-1-短信服务介绍"><a href="#4-1-短信服务介绍" class="headerlink" title="4.1 短信服务介绍"></a>4.1 短信服务介绍</h3><p>在项目中，如果我们要实现短信发送功能，我们无需自己实现，也无需和运营商直接对接，只需要调用第三方提供的短信服务即可。目前市面上有很多第三方提供的短信服务，这些第三方短信服务会和各个运营商（移动、联通、电信）对接，我们只需要注册成为会员，并且按照提供的开发文档进行调用就可以发送短信。需要说明的是，这些短信服务一般都是收费服务。</p>
<p>常用短信服务：</p>
<ul>
<li><p>阿里云</p>
</li>
<li><p>华为云</p>
</li>
<li><p>腾讯云</p>
</li>
<li><p>京东</p>
</li>
<li><p>梦网</p>
</li>
<li><p>乐信</p>
</li>
</ul>
<p>本项目在选择短信服务的第三方服务提供商时，选择的是阿里云短信服务。</p>
<h3 id="4-2-阿里云短信服务介绍"><a href="#4-2-阿里云短信服务介绍" class="headerlink" title="4.2 阿里云短信服务介绍"></a>4.2 阿里云短信服务介绍</h3><p>阿里云短信服务（Short Message Service）是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信；国内验证短信秒级触达，到达率最高可达99%；国际&#x2F;港澳台短信覆盖200多个国家和地区，安全稳定，广受出海企业选用。</p>
<p>应用场景： </p>
<table>
<thead>
<tr>
<th>场景</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>验证码</td>
<td>APP、网站注册账号，向手机下发验证码； 登录账户、异地登录时的安全提醒； 找回密码时的安全验证； 支付认证、身份校验、手机绑定等。</td>
</tr>
<tr>
<td>短信通知</td>
<td>向注册用户下发系统相关信息，包括： 升级或维护、服务开通、价格调整、 订单确认、物流动态、消费确认、 支付通知等普通通知短信。</td>
</tr>
<tr>
<td>推广短信</td>
<td>向注册用户和潜在客户发送通知和推广信息，包括促销活动通知、业务推广等商品与活动的推广信息。增加企业产品曝光率、提高产品的知名度。</td>
</tr>
</tbody></table>
<p><img src="/assets/image-20210806231422923.png" alt="image-20210806231422923"> </p>
<p>阿里云短信服务官方网站： <a href="https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf">https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf</a></p>
<p>可以访问官网，熟悉一下短信服务： </p>
<p><img src="/assets/image-20210806231821334.png" alt="image-20210806231821334">  </p>
<h3 id="4-3-阿里云短信服务准备"><a href="#4-3-阿里云短信服务准备" class="headerlink" title="4.3 阿里云短信服务准备"></a>4.3 阿里云短信服务准备</h3><h4 id="4-3-1-注册账号"><a href="#4-3-1-注册账号" class="headerlink" title="4.3.1 注册账号"></a>4.3.1 注册账号</h4><p>阿里云官网：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p>
<img src="assets/image-20210807074911618.png" alt="image-20210807074911618" style="zoom:80%;" /> 

<p>点击官网首页注册按钮，跳转到如下注册页面：</p>
<img src="assets/image-20210807074934251.png" alt="image-20210807074934251" style="zoom:80%;" /> 



<p>当我们把账号注册完毕之后，我们就可以登录到阿里云系统控制台。</p>
<h4 id="4-3-2-开通短信服务"><a href="#4-3-2-开通短信服务" class="headerlink" title="4.3.2 开通短信服务"></a>4.3.2 开通短信服务</h4><p>注册成功后，点击登录按钮进行登录。登录后进入控制台, 在左上角的菜单栏中搜索短信服务。第一次使用，需要点击，并开通短信服务。</p>
<p><img src="/assets/image-20210807075321250.png" alt="image-20210807075321250"> </p>
<img src="assets/image-20210807075620990.png" alt="image-20210807075620990" style="zoom:80%;" /> 



<h4 id="4-3-3-设置短信签名"><a href="#4-3-3-设置短信签名" class="headerlink" title="4.3.3 设置短信签名"></a>4.3.3 设置短信签名</h4><p>开通短信服务之后，进入短信服务管理页面，选择国内消息菜单，我们需要在这里添加短信签名。</p>
<p><img src="/assets/image-20210807080406104.png" alt="image-20210807080406104"> </p>
<p><strong>那么什么是短信签名呢?</strong></p>
<p>短信签名是短信发送者的署名，表示发送方的身份。我们要调用阿里云短信服务发送短信，签名是比不可少的部分。</p>
<img src="assets/image-20210807080659337.png" alt="image-20210807080659337" style="zoom:80%;" /> 



<p>那么接下来，我们就需要来添加短信签名。</p>
<p><img src="/assets/image-20210807081839908.png" alt="image-20210807081839908"> </p>
<blockquote>
<p><font color='red'>注意：</font> </p>
<p>​	<font color='red'>目前，阿里云短信服务申请签名主要针对企业开发，个人申请时有一定难度的，在审核时，会审核资质，需要上传营业执照 ；</font> </p>
<p>​	<font color='red'>所以，我们课程中，主要是演示一下短信验证码如何发送，大家只需要学习这块儿的开发流程、实现方式即可，无需真正的发送短信。如果以后在企业中做项目，需要发送短信，我们会以公司的资质去申请对应的签名。</font> </p>
</blockquote>
<h4 id="4-3-4-设置短信模板"><a href="#4-3-4-设置短信模板" class="headerlink" title="4.3.4 设置短信模板"></a>4.3.4 设置短信模板</h4><p>切换到【模板管理】标签页：</p>
<p><img src="/assets/image-20210807082453655.png" alt="image-20210807082453655"> </p>
<p><strong>那么什么是模板呢?</strong></p>
<p>短信模板包含短信发送内容、场景、变量信息。模板的详情如下:</p>
<img src="assets/image-20210807082639900.png" alt="image-20210807082639900" style="zoom: 80%;" /> 

<p>最终我们，给用户发送的短信中，具体的短信内容，就是上面配置的这个模板内容，将${code}占位符替换成对应的验证码数据即可。如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【xxxxx】您好,您的验证码为173822,5分钟之内有效,不要泄露给他人!</span><br></pre></td></tr></table></figure>



<p>我们可以点击右上角的按钮,添加模板,然后填写模板的基本信息及设置的模板内容:</p>
<img src="assets/image-20210807083306928.png" alt="image-20210807083306928" style="zoom:80%;" /> 

<p><font color='red'>添加的短信模板，也是需要进行审核的只有审核通过，才可以正常使用。</font></p>
<h4 id="4-3-5-设置AccessKey"><a href="#4-3-5-设置AccessKey" class="headerlink" title="4.3.5 设置AccessKey"></a>4.3.5 设置AccessKey</h4><p>AccessKey 是访问阿里云 API 的密钥，具有账户的完全权限，我们要想在后面通过API调用阿里云短信服务的接口发送短信，那么就必须要设置AccessKey。</p>
<p>我们点击右上角的用户头像，选择”AccessKey管理”，这时就可以进入到AccessKey的管理界面。</p>
<p><img src="/assets/image-20210807130218414.png" alt="image-20210807130218414"></p>
<p>进入到AccessKey的管理界面之后，提示两个选项 “继续使用AccessKey” 和 “开始使用子用户AccessKey”，两个区别如下:</p>
<p><strong>1). 继续使用AccessKey</strong></p>
<p>如果选择的是该选项，我们创建的是阿里云账号的AccessKey，是具有账户的完全权限，有了这个AccessKey以后，我们就可以通过API调用阿里云的服务，不仅是短信服务，其他服务(OSS，语音服务，内容安全服务，视频点播服务…等)也可以调用。 相对来说，并不安全，当前的AccessKey泄露，会影响到我当前账户的其他云服务。</p>
<p><strong>2). 开始使用子用户AccessKey</strong></p>
<p>可以创建一个子用户,这个子用户我们可以分配比较低的权限,比如仅分配短信发送的权限，不具备操作其他的服务的权限，即使这个AccessKey泄漏了,也不会影响其他的云服务, 相对安全。</p>
<p>接下来就来演示一下，如何创建子用户AccessKey。</p>
<p><img src="/assets/image-20210807131340003.png" alt="image-20210807131340003"> </p>
<h4 id="4-3-6-配置权限"><a href="#4-3-6-配置权限" class="headerlink" title="4.3.6 配置权限"></a>4.3.6 配置权限</h4><p>上述我们已经创建了子用户, 但是这个子用户,目前没有任何权限,接下来,我们需要为创建的这个用户来分配权限。</p>
<p><img src="/assets/image-20210807183735533.png" alt="image-20210807183735533"> </p>
<p><font color='red'>经过上述的权限配置之后，那么新创建的这个 reggie 用户，仅有短信服务操作的权限，不具备别的权限，即使当前的AccessKey泄漏了，也只会影响短信服务，其他服务是不受影响的。</font></p>
<h4 id="4-3-7-禁用-x2F-删除AccessKey"><a href="#4-3-7-禁用-x2F-删除AccessKey" class="headerlink" title="4.3.7 禁用&#x2F;删除AccessKey"></a>4.3.7 禁用&#x2F;删除AccessKey</h4><p>如果在使用的过程中 AccessKey 不小心泄漏了,我们可以在阿里云控制台中, 禁用或者删除该AccessKey。</p>
<p><img src="/assets/image-20210807190005367.png" alt="image-20210807190005367"> </p>
<p>然后再创建一个新的AccessKey, 保存好AccessKeyId和AccessKeySecret。</p>
<p><img src="/assets/image-20210807190304136.png" alt="image-20210807190304136"> </p>
<p>&#x3D;&#x3D;注意： 创建好了AccessKey后，请及时保存AccessKeyId 和 AccessKeySecret ，弹窗关闭后将无法再次获取该信息，但您可以随时创建新的 AccessKey。&#x3D;&#x3D;</p>
<h3 id="4-4-代码开发"><a href="#4-4-代码开发" class="headerlink" title="4.4 代码开发"></a>4.4 代码开发</h3><p>使用阿里云短信服务发送短信，可以参照官方提供的文档即可。</p>
<p>官方文档: <a href="https://help.aliyun.com/product/44282.html?spm=5176.12212571.help.dexternal.57a91cbewHHjKq">https://help.aliyun.com/product/44282.html?spm=5176.12212571.help.dexternal.57a91cbewHHjKq</a></p>
<p><img src="/assets/image-20210807193047220.png" alt="image-20210807193047220"> </p>
<p>我们根据官方文档的提示，引入对应的依赖，然后再引入对应的java代码，就可以发送消息了。</p>
<p><img src="/assets/image-20210807193829131.png" alt="image-20210807193829131"> </p>
<blockquote>
<p>SDK : SDK 就是 Software Development Kit 的缩写，翻译过来——软件开发工具包，辅助开发某一类软件的相关文档、范例和工具的集合都可以叫做SDK。在我们与第三方接口相互时， 一般都会提供对应的SDK，来简化我们的开发。</p>
</blockquote>
<p><strong>具体实现：</strong></p>
<p>1). pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 将官方提供的main方法封装为一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">      <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">      <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">      <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">      request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">      request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">      request.setSignName(signName);</span><br><span class="line">      request.setTemplateCode(templateCode);</span><br><span class="line">      request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">         System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注 : 由于我们个人目前无法申请阿里云短信服务，所以这里我们只需要把流程跑通，具体的短信发送可以实现。</p>
</blockquote>
<h2 id="5-手机验证码登录"><a href="#5-手机验证码登录" class="headerlink" title="5. 手机验证码登录"></a>5. 手机验证码登录</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。手机验证码登录有如下优点：</p>
<p>1). 方便快捷，无需注册，直接登录</p>
<p>2). 使用短信验证码作为登录凭证，无需记忆密码</p>
<p>3). 安全</p>
<img src="assets/image-20210807232653592.png" alt="image-20210807232653592" style="zoom:80%;" />  



<p><strong>登录流程：</strong></p>
<p>输入手机号 &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功</p>
<blockquote>
<p>注意：通过手机验证码登录，手机号是区分不同用户的标识。</p>
</blockquote>
<h3 id="5-2-数据模型"><a href="#5-2-数据模型" class="headerlink" title="5.2 数据模型"></a>5.2 数据模型</h3><p>通过手机验证码登录时，涉及的表为user表，即用户表。结构如下:</p>
<p><img src="/assets/image-20210807231948412.png" alt="image-20210807231948412"> </p>
<h3 id="5-3-前端页面分析"><a href="#5-3-前端页面分析" class="headerlink" title="5.3 前端页面分析"></a>5.3 前端页面分析</h3><p>在开发代码之前，需要梳理一下登录时前端页面和服务端的交互过程：</p>
<p>1). 在登录页面(front&#x2F;page&#x2F;login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信。</p>
<img src="assets/image-20210807233018171.png" alt="image-20210807233018171" style="zoom:80%;" /> 



<p>2). 在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求。</p>
<img src="assets/image-20210807233336029.png" alt="image-20210807233336029" style="zoom:80%;" /> 

<p>如果服务端返回的登录成功，页面将会把当前登录用户的手机号存储在sessionStorage中，并跳转到移动的首页页面。</p>
<p>开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，分别是获取短信验证码 和 登录请求，具体的请求信息如下： </p>
<p>1). 获取短信验证码</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;sendMsg</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”}</td>
</tr>
</tbody></table>
<p>2). 登录</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”, “code”:”1111”}</td>
</tr>
</tbody></table>
<h3 id="5-4-代码开发"><a href="#5-4-代码开发" class="headerlink" title="5.4 代码开发"></a>5.4 代码开发</h3><h4 id="5-4-1-准备工作"><a href="#5-4-1-准备工作" class="headerlink" title="5.4.1 准备工作"></a>5.4.1 准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p>
<p>1). 实体类 User（直接从课程资料中导入即可）</p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2). Mapper接口 UserMapper</p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 业务层接口 UserService</p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4). 业务层实现类 UserServiceImpl</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5). 控制层 UserController</p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6). 工具类SMSUtils、ValidateCodeUtils（直接从课程资料中导入即可）</p>
<p>所属包: com.itheima.reggie.utils</p>
<p><img src="/assets/image-20210807234828051.png" alt="image-20210807234828051"> </p>
<p>SMSUtils : 是我们上面改造的阿里云短信发送的工具类 ;</p>
<p>ValidateCodeUtils : 是验证码生成的工具类 ;</p>
<h4 id="5-4-2-功能实现"><a href="#5-4-2-功能实现" class="headerlink" title="5.4.2 功能实现"></a>5.4.2 功能实现</h4><h5 id="5-4-2-1-修改LoginCheckFilter"><a href="#5-4-2-1-修改LoginCheckFilter" class="headerlink" title="5.4.2.1 修改LoginCheckFilter"></a>5.4.2.1 修改LoginCheckFilter</h5><p>前面我们已经完成了LoginCheckFilter过滤器的开发，此过滤器用于检查用户的登录状态。我们在进行手机验证码登录时，发送的两个请求(获取验证码和登录)需要在此过滤器处理时直接放行。</p>
<p><img src="/assets/image-20210807235349089.png" alt="image-20210807235349089"> </p>
<p>对于移动的端的页面，也是用户登录之后，才可以访问的，那么这个时候就需要在 LoginCheckFilter 中进行判定，如果移动端用户已登录，我们获取到用户登录信息，存入ThreadLocal中(在后续的业务处理中，如果需要获取当前登录用户ID，直接从ThreadLocal中获取)，然后放行。</p>
<p>增加如下逻辑: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-4-2-2-发送短信验证码"><a href="#5-4-2-2-发送短信验证码" class="headerlink" title="5.4.2.2 发送短信验证码"></a>5.4.2.2 发送短信验证码</h5><p>在UserController中创建方法，处理登录页面的请求，为指定手机号发送短信验证码，同时需要将手机号对应的验证码保存到Session，方便后续登录时进行比对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机短信验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">        <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line">			</span><br><span class="line">        <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//需要将生成的验证码保存到Session</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'>备注: </font></p>
<p>​	<font color='red'>这里发送短信我们只需要调用封装的工具类中的方法即可，我们这个功能流程跑通，在测试中我们不用真正的发送短信，只需要将验证码信息，通过日志输出，登录时，我们直接从控制台就可以看到生成的验证码(实际上也就是发送到我们手机上的验证码)</font></p>
</blockquote>
<h5 id="5-4-2-3-验证码登录"><a href="#5-4-2-3-验证码登录" class="headerlink" title="5.4.2.3 验证码登录"></a>5.4.2.3 验证码登录</h5><p>在UserController中增加登录的方法 login，该方法的具体逻辑为： </p>
<p>1). 获取前端传递的手机号和验证码</p>
<p>2). 从Session中获取到手机号对应的正确的验证码</p>
<p>3). 进行验证码的比对 , 如果比对失败, 直接返回错误信息</p>
<p>4). 如果比对成功, 需要根据手机号查询当前用户, 如果用户不存在, 则自动注册一个新用户</p>
<p>5). 将登录用户的ID存储Session中</p>
<p>具体代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动端用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从Session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">        <span class="comment">//如果能够比对成功，说明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5-5-功能测试"><a href="#5-5-功能测试" class="headerlink" title="5.5 功能测试"></a>5.5 功能测试</h3><p>代码完成后，重启服务，测试短信验证码的发送及登录功能。</p>
<p>1). 测试错误验证码的情况</p>
<img src="assets/image-20210808001952043.png" alt="image-20210808001952043" style="zoom:80%;" /> 



<p>2). 测试正确验证码的情况</p>
<p><img src="/assets/image-20210808002356092.png" alt="image-20210808002356092"> </p>
<p>检查user表，用户的数据也插入进来了： </p>
<p><img src="/assets/image-20210808002501618.png" alt="image-20210808002501618"> </p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖-Day05</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96-Day06/</url>
    <content><![CDATA[<h1 id="瑞吉外卖-第五天"><a href="#瑞吉外卖-第五天" class="headerlink" title="瑞吉外卖-第五天"></a>瑞吉外卖-第五天</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li><p>新增套餐</p>
</li>
<li><p>套餐分页查询</p>
</li>
<li><p>删除套餐</p>
</li>
<li><p>短信发送</p>
</li>
<li><p>手机验证码登录</p>
</li>
</ul>
<span id="more"></span>



<h2 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h2><h3 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h3><p>套餐就是菜品的集合。</p>
<p>后台系统中可以管理套餐信息，通过新增套餐功能来添加一个新的套餐，在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片，在移动端会按照套餐分类来展示对应的套餐。</p>
<img src="assets/image-20210805232711418.png" alt="image-20210805232711418" style="zoom:80%;" /> 



<h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表，还需要向setmeal_dish表插入套餐和菜品关联数据。所以在新增套餐时，涉及到两个表：</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>setmeal</td>
<td>套餐表</td>
<td>存储套餐的基本信息</td>
</tr>
<tr>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
<td>存储套餐关联的菜品的信息(一个套餐可以关联多个菜品)</td>
</tr>
</tbody></table>
<p>两张表具体的表结构如下: </p>
<p><strong>1). 套餐表setmeal</strong></p>
<p><img src="/assets/image-20210805233615067.png" alt="image-20210805233615067"> </p>
<p>在该表中，套餐名称name字段是不允许重复的，在建表时，已经创建了唯一索引。</p>
<p><img src="/assets/image-20210805234059563.png" alt="image-20210805234059563"> </p>
<p><strong>2). 套餐菜品关系表setmeal_dish</strong></p>
<p><img src="/assets/image-20210805233807009.png" alt="image-20210805233807009"> </p>
<p>在该表中，菜品的名称name,菜品的原价price 实际上都是冗余字段,因为我们在这张表中存储了菜品的ID(dish_id),根据该ID我们就可以查询出name,price的数据信息,而这里我们又存储了name,price,这样的话,我们在后续的查询展示操作中,就不需要再去查询数据库获取菜品名称和原价了,这样可以简化我们的操作。</p>
<h3 id="1-3-准备工作"><a href="#1-3-准备工作" class="headerlink" title="1.3 准备工作"></a>1.3 准备工作</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好，在做这一块儿的准备工作时，我们无需准备Setmeal的相关实体类、Mapper接口、Service接口及实现，因为之前在做分类管理的时候，我们已经引入了Setmeal的相关基础代码。 接下来，我们就来完成以下的几步准备工作： </p>
<p><strong>1). 实体类 SetmealDish</strong></p>
<p>ps.直接从课程资料中导入即可，Setmeal实体前面课程中已经导入过了。</p>
<p>所属包： com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). DTO SetmealDto</strong></p>
<p>该数据传输对象DTO,主要用于封装页面在新增套餐时传递过来的json格式的数据,其中包含套餐的基本信息,还包含套餐关联的菜品集合。直接从课程资料中导入即可。</p>
<p>所属包： com.itheima.reggie.dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;<span class="comment">//套餐关联的菜品集合</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). Mapper接口 SetmealDishMapper</strong></p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 业务层接口 SetmealDishService</strong></p>
<p>所属包： com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 业务层实现类 SetmealDishServiceImpl</strong></p>
<p>所属包： com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.SetmealDishMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper,SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6). 控制层 SetmealController</strong></p>
<p>套餐管理的相关业务，我们都统一在 SetmealController 中进行统一处理操作。</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>





<h3 id="1-4-前端页面分析"><a href="#1-4-前端页面分析" class="headerlink" title="1.4 前端页面分析"></a>1.4 前端页面分析</h3><p>服务端的基础准备工作我们准备完毕之后，在进行代码开发之前，需要梳理一下新增套餐时前端页面和服务端的交互过程：</p>
<p>1). 点击新建套餐按钮，访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载发送ajax请求，请求服务端获取<strong>套餐分类</strong>数据并展示到下拉框中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806002144537.png" alt="image-20210806002144537"> </p>
<p>获取套餐分类列表的功能我们不用开发，之前已经开发完成了，之前查询时type传递的是1，查询菜品分类; 本次查询时，传递的type为2，查询套餐分类列表。</p>
<p>2). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;add.html)，页面加载时发送ajax请求，请求服务端获取<strong>菜品分类</strong>数据并展示到添加菜品窗口中(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806002730820.png" alt="image-20210806002730820"> </p>
<p>本次查询分类列表，传递的type为1，表示需要查询的是菜品的分类。查询菜品分类的目的，是添加套餐关联的菜品时，我们需要根据菜品分类，来过滤查询菜品信息。查询菜品分类列表的代码已经实现， 具体展示效果如下： </p>
<p><img src="/assets/image-20210806003318531.png" alt="image-20210806003318531">  </p>
<p>3). 当点击添加菜品窗口左侧菜单的某一个分类, 页面发送ajax请求，请求服务端，根据菜品分类查询对应的<strong>菜品</strong>数据并展示到添加菜品窗口中</p>
<p><img src="/assets/image-20210806004116496.png" alt="image-20210806004116496"> </p>
<p>4). 页面发送请求进行<strong>图片上传</strong>，请求服务端将图片保存到服务器(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p>5). 页面发送请求进行<strong>图片下载</strong>，将上传的图片进行回显(&#x3D;&#x3D;已实现&#x3D;&#x3D;)</p>
<p><img src="/assets/image-20210806004434277.png" alt="image-20210806004434277"> </p>
<p>6). 点击保存按钮，发送ajax请求，将<strong>套餐</strong>相关数据以json形式提交到服务端</p>
<p><img src="/assets/image-20210806005028874.png" alt="image-20210806005028874"> </p>
<p>经过上述的页面解析及流程分析，我们发送这里需要发送的请求有5个，分别是 ：</p>
<p>A. 根据传递的参数,查询套餐分类列表</p>
<p>B. 根据传递的参数,查询菜品分类列表</p>
<p>C. 图片上传</p>
<p>D. 图片下载展示</p>
<p>E. 根据菜品分类ID,查询菜品列表</p>
<p>F. 保存套餐信息</p>
<p>而对于以上的前4个功能我们都已经实现, 所以我们接下来需要开发的功能主要是最后两项, 具体的请求信息如下:</p>
<p><strong>1). 根据分类ID查询菜品列表</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;dish&#x2F;list</td>
</tr>
<tr>
<td>请求参数</td>
<td>?categoryId&#x3D;1397844263642378242</td>
</tr>
</tbody></table>
<p><strong>2). 保存套餐信息</strong></p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>json格式数据</td>
</tr>
</tbody></table>
<p>传递的json格式数据如下: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;9cd7a80a-da54-4f46-bf33-af3576514cec.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;营养超值工作餐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dishList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;idType&quot;</span><span class="punctuation">:</span><span class="string">&quot;1399923597874081794&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423329009705463809&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;米饭&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1423328152549109762&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;可乐&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">500</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span><span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1397853890262118402&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;鱼香肉丝&quot;</span><span class="punctuation">,</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">3800</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-代码开发"><a href="#1-5-代码开发" class="headerlink" title="1.5 代码开发"></a>1.5 代码开发</h3><p>上面我们已经分析了接下来我们需要实现的两个功能，接下来我们就需要根据上述的分析，来完成具体的功能实现。</p>
<h4 id="1-5-1-根据分类查询菜品"><a href="#1-5-1-根据分类查询菜品" class="headerlink" title="1.5.1 根据分类查询菜品"></a>1.5.1 根据分类查询菜品</h4><h5 id="1-5-1-1-功能实现"><a href="#1-5-1-1-功能实现" class="headerlink" title="1.5.1.1 功能实现"></a>1.5.1.1 功能实现</h5><p>在当前的需求中，我们只需要根据页面传递的菜品分类的ID(categoryId)来查询菜品列表即可，我们可以直接定义一个DishController的方法，声明一个Long类型的categoryId，这样做是没问题的。但是考虑到该方法的拓展性，我们在这里定义方法时，通过Dish这个实体来接收参数。</p>
<p>在DishController中定义方法list，接收Dish类型的参数：</p>
<p>在查询时，需要根据菜品分类categoryId进行查询，并且还要限定菜品的状态为起售状态(status为1)，然后对查询的结果进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据条件查询对应的菜品数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span> ,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">	</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-5-1-2-功能测试"><a href="#1-5-1-2-功能测试" class="headerlink" title="1.5.1.2 功能测试"></a>1.5.1.2 功能测试</h5><p>代码编写完毕，我们重新启动服务器，进行测试，可以通过debug断点跟踪的形式查看页面传递的参数封装情况，及响应给页面的数据信息。</p>
<p><img src="/assets/image-20210806012153982.png" alt="image-20210806012153982"> </p>
<h4 id="1-5-2-保存套餐"><a href="#1-5-2-保存套餐" class="headerlink" title="1.5.2 保存套餐"></a>1.5.2 保存套餐</h4><h5 id="1-5-2-1-功能实现"><a href="#1-5-2-1-功能实现" class="headerlink" title="1.5.2.1 功能实现"></a>1.5.2.1 功能实现</h5><p>在进行套餐信息保存时，前端提交的数据，不仅包含套餐的基本信息，还包含套餐关联的菜品列表数据 setmealDishes。所以这个时候我们使用Setmeal就不能完成参数的封装了，我们需要在Setmeal的基本属性的基础上，再扩充一个属性 setmealDishes 来接收页面传递的套餐关联的菜品列表，而我们在准备工作中，导入进来的SetmealDto能够满足这个需求。</p>
<p>1). SetmealController中定义方法save，新增套餐</p>
<p>在该Controller的方法中,我们不仅需要保存套餐的基本信息，还需要保存套餐关联的菜品数据，所以我们需要再该方法中调用业务层方法,完成两块数据的保存。</p>
<p>页面传递的数据是json格式，需要在方法形参前面加上@RequestBody注解, 完成参数封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2). SetmealService中定义方法saveWithDish</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure>



<p>3). SetmealServiceImpl实现方法saveWithDish</p>
<p>具体逻辑: </p>
<p>A. 保存套餐基本信息</p>
<p>B. 获取套餐关联的菜品集合，并为集合中的每一个元素赋值套餐ID(setmealId)</p>
<p>C. 批量保存套餐关联的菜品集合</p>
<p>代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-5-2-2-功能测试"><a href="#1-5-2-2-功能测试" class="headerlink" title="1.5.2.2 功能测试"></a>1.5.2.2 功能测试</h5><p>代码编写完毕，我们重新启动服务器，进行测试，可以通过debug断点跟踪的形式查看页面传递的参数封装情况，及套餐相关数据的保存情况。</p>
<p>录入表单数据: </p>
<p><img src="/assets/image-20210806014328575.png" alt="image-20210806014328575"> </p>
<p>debug跟踪数据封装:</p>
<p><img src="/assets/image-20210806014508310.png" alt="image-20210806014508310"> </p>
<p>跟踪数据库保存的数据:</p>
<p><img src="/assets/image-20210806014807017.png" alt="image-20210806014807017"> </p>
<h2 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
<p><img src="/assets/image-20210806073710653.png" alt="image-20210806073710653"> </p>
<p>在进行套餐数据的分页查询时，除了传递分页参数以外，还可以传递一个可选的条件(套餐名称)。查询返回的字段中，包含套餐的基本信息之外，还有一个套餐的分类名称，在查询时，需要关联查询这个字段。</p>
<h3 id="2-2-前端页面分析"><a href="#2-2-前端页面分析" class="headerlink" title="2.2 前端页面分析"></a>2.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下套餐分页查询时前端页面和服务端的交互过程：</p>
<p>1). 访问页面(backend&#x2F;page&#x2F;combo&#x2F;list.html)，页面加载时，会自动发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</p>
<img src="assets/image-20210806074846550.png" alt="image-20210806074846550" style="zoom:80%;" /> 



<p>2). 在列表渲染展示时，页面发送请求，请求服务端进行图片下载，用于页面图片展示(<strong>已实现</strong>)</p>
<p><img src="/assets/image-20210806075231072.png" alt="image-20210806075231072"> </p>
<p>而对于以上的流程中涉及到2个功能,文件下载功能我们已经实现,本小节我们主要实现列表分页查询功能, 具体的请求信息如下:</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>GET</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal&#x2F;page</td>
</tr>
<tr>
<td>请求参数</td>
<td>?page&#x3D;1&amp;pageSize&#x3D;10&amp;name&#x3D;xxx</td>
</tr>
</tbody></table>
<h3 id="2-3-代码开发"><a href="#2-3-代码开发" class="headerlink" title="2.3 代码开发"></a>2.3 代码开发</h3><h4 id="2-3-1-基本信息查询"><a href="#2-3-1-基本信息查询" class="headerlink" title="2.3.1 基本信息查询"></a>2.3.1 基本信息查询</h4><p>上述我们已经分析列表分页查询功能的请求信息，接下来我们就在SetmealController中创建套餐分页查询方法。</p>
<p>该方法的逻辑如下： </p>
<p>1). 构建分页条件对象</p>
<p>2). 构建查询条件对象，如果传递了套餐名称，根据套餐名称模糊查询， 并对结果按修改时间降序排序</p>
<p>3). 执行分页查询</p>
<p>4). 组装数据并返回</p>
<p>代码实现 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 套餐分页查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">	</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-问题分析"><a href="#2-3-2-问题分析" class="headerlink" title="2.3.2 问题分析"></a>2.3.2 问题分析</h4><p>基本分页查询代码编写完毕后，重启服务，测试列表查询，我们发现, 列表页面的数据可以展示出来, 但是套餐分类名称没有展示出来。</p>
<p><img src="/assets/image-20210806082542473.png" alt="image-20210806082542473"> </p>
<p>这是因为在服务端仅返回分类ID(categoryId), 而页面展示需要的是categoryName属性。 </p>
<h4 id="2-3-3-功能完善"><a href="#2-3-3-功能完善" class="headerlink" title="2.3.3 功能完善"></a>2.3.3 功能完善</h4><p>在查询套餐信息时, 只包含套餐的基本信息, 并不包含套餐的分类名称, 所以在这里查询到套餐的基本信息后, 还需要根据分类ID(categoryId), 查询套餐分类名称(categoryName)，并最终将套餐的基本信息及分类名称信息封装到SetmealDto(在第一小节已经导入)中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes; <span class="comment">//套餐关联菜品列表</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//套餐分类名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>完善后代码: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 套餐分页查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">//分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分类名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-功能测试"><a href="#2-4-功能测试" class="headerlink" title="2.4 功能测试"></a>2.4 功能测试</h3><p>代码完善后，重启服务，测试列表查询，我们发现, 抓取浏览器的请求响应数据，我们可以获取到套餐分类名称categoryName，也可以在列表页面展示出来 。</p>
<p><img src="/assets/image-20210806083346578.png" alt="image-20210806083346578"> </p>
<h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>在套餐管理列表页面,点击删除按钮，可以删除对应的套餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</p>
<p><img src="/assets/image-20210806214443507.png" alt="image-20210806214443507"> </p>
<h3 id="3-2-前端页面分析"><a href="#3-2-前端页面分析" class="headerlink" title="3.2 前端页面分析"></a>3.2 前端页面分析</h3><p>在开发代码之前，需要梳理一下删除套餐时前端页面和服务端的交互过程：</p>
<p>1). 点击删除, 删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</p>
<p><img src="/assets/image-20210806215911878.png" alt="image-20210806215911878"> </p>
<p>2). 删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐</p>
<p><img src="/assets/image-20210806220406587.png" alt="image-20210806220406587"> </p>
<p>开发删除套餐功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，一次请求为根据ID删除，一次请求为根据ID批量删除。</p>
<p>观察删除单个套餐和批量删除套餐的请求信息可以发现，两种请求的<strong>地址</strong>和<strong>请求方式</strong>都是相同的，不同的则是传递的id个数，所以在服务端可以提供一个方法来统一处理。</p>
<p>具体的请求信息如下： </p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>DELETE</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;setmeal</td>
</tr>
<tr>
<td>请求参数</td>
<td>?ids&#x3D;1423640210125656065,1423338765002256385</td>
</tr>
</tbody></table>
<h3 id="3-3-代码开发"><a href="#3-3-代码开发" class="headerlink" title="3.3 代码开发"></a>3.3 代码开发</h3><p>删除套餐的流程及请求信息，我们分析完毕之后，就来完成服务端的逻辑开发。在服务端的逻辑中, 删除套餐时, 我们不仅要删除套餐, 还要删除套餐与菜品的关联关系。</p>
<p><strong>1). 在SetmealController中创建delete方法</strong></p>
<p>我们可以先测试在delete方法中接收页面提交的参数，具体逻辑后续再完善：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完代码，我们重启服务之后，访问套餐列表页面，勾选复选框，然后点击”批量删除”,我们可以看到服务端可以接收到集合参数ids，并且在控制台也可以输出对应的数据 。</p>
<p><img src="/assets/image-20210806221603303.png" alt="image-20210806221603303"> </p>
<p><strong>2). SetmealService接口定义方法removeWithDish</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>



<p><strong>3). SetmealServiceImpl中实现方法removeWithDish</strong></p>
<p>该业务层方法具体的逻辑为: </p>
<p>A. 查询该批次套餐中是否存在售卖中的套餐, 如果存在, 不允许删除</p>
<p>B. 删除套餐数据</p>
<p>C. 删除套餐关联的菜品数据</p>
<p>代码实现为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除套餐，同时需要删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//select count(*) from setmeal where id in (1,2,3) and status = 1</span></span><br><span class="line">    <span class="comment">//查询套餐状态，确定是否可用删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   	 	<span class="comment">//如果不能删除，抛出一个业务异常</span></span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据----setmeal_dish</span></span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>由于当前的业务方法中存在多次数据库操作，为了保证事务的完整性，需要在方法上加注解 @Transactional 来控制事务。</p>
<p><strong>4). 完善SetmealController代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>代码完善后，重启服务，测试套餐的删除功能，主要测试以下几种情况。</p>
<p>1). 删除正在启用的套餐</p>
<p><img src="/assets/image-20210806224121877.png" alt="image-20210806224121877"> </p>
<p>2). 执行批量操作, 删除两条记录, 一个启售的, 一个停售的</p>
<p>由于当前我们并未实现启售&#x2F;停售功能，所以我们需要手动修改数据库表结构的status状态，将其中的一条记录status修改为0。</p>
<p><img src="/assets/image-20210806224603405.png" alt="image-20210806224603405"> </p>
<p>3). 删除已经停售的套餐信息，执行删除之后， 检查数据库表结构 setmeal ， setmeal_dish表中的数据</p>
<p><img src="/assets/image-20210806224807108.png" alt="image-20210806224807108"> </p>
<h2 id="4-短信发送"><a href="#4-短信发送" class="headerlink" title="4. 短信发送"></a>4. 短信发送</h2><img src="assets/image-20210806225505074.png" alt="image-20210806225505074" style="zoom:80%;" /> 

<p>在我们接下来要实现的移动端的业务开发中，第一块儿我们需要开发的功能就是移动端的登录功能，而移动端的登录功能，比较流行的方式就是基于短信验证码进行登录，那么这里涉及到了短信发送的知识，所以本章节，我们就来讲解，在项目开发中，我们如何发送短信。</p>
<h3 id="4-1-短信服务介绍"><a href="#4-1-短信服务介绍" class="headerlink" title="4.1 短信服务介绍"></a>4.1 短信服务介绍</h3><p>在项目中，如果我们要实现短信发送功能，我们无需自己实现，也无需和运营商直接对接，只需要调用第三方提供的短信服务即可。目前市面上有很多第三方提供的短信服务，这些第三方短信服务会和各个运营商（移动、联通、电信）对接，我们只需要注册成为会员，并且按照提供的开发文档进行调用就可以发送短信。需要说明的是，这些短信服务一般都是收费服务。</p>
<p>常用短信服务：</p>
<ul>
<li><p>阿里云</p>
</li>
<li><p>华为云</p>
</li>
<li><p>腾讯云</p>
</li>
<li><p>京东</p>
</li>
<li><p>梦网</p>
</li>
<li><p>乐信</p>
</li>
</ul>
<p>本项目在选择短信服务的第三方服务提供商时，选择的是阿里云短信服务。</p>
<h3 id="4-2-阿里云短信服务介绍"><a href="#4-2-阿里云短信服务介绍" class="headerlink" title="4.2 阿里云短信服务介绍"></a>4.2 阿里云短信服务介绍</h3><p>阿里云短信服务（Short Message Service）是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信；国内验证短信秒级触达，到达率最高可达99%；国际&#x2F;港澳台短信覆盖200多个国家和地区，安全稳定，广受出海企业选用。</p>
<p>应用场景： </p>
<table>
<thead>
<tr>
<th>场景</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>验证码</td>
<td>APP、网站注册账号，向手机下发验证码； 登录账户、异地登录时的安全提醒； 找回密码时的安全验证； 支付认证、身份校验、手机绑定等。</td>
</tr>
<tr>
<td>短信通知</td>
<td>向注册用户下发系统相关信息，包括： 升级或维护、服务开通、价格调整、 订单确认、物流动态、消费确认、 支付通知等普通通知短信。</td>
</tr>
<tr>
<td>推广短信</td>
<td>向注册用户和潜在客户发送通知和推广信息，包括促销活动通知、业务推广等商品与活动的推广信息。增加企业产品曝光率、提高产品的知名度。</td>
</tr>
</tbody></table>
<p><img src="/assets/image-20210806231422923.png" alt="image-20210806231422923"> </p>
<p>阿里云短信服务官方网站： <a href="https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf">https://www.aliyun.com/product/sms?spm=5176.19720258.J_8058803260.52.5c432c4a11Dcwf</a></p>
<p>可以访问官网，熟悉一下短信服务： </p>
<p><img src="/assets/image-20210806231821334.png" alt="image-20210806231821334">  </p>
<h3 id="4-3-阿里云短信服务准备"><a href="#4-3-阿里云短信服务准备" class="headerlink" title="4.3 阿里云短信服务准备"></a>4.3 阿里云短信服务准备</h3><h4 id="4-3-1-注册账号"><a href="#4-3-1-注册账号" class="headerlink" title="4.3.1 注册账号"></a>4.3.1 注册账号</h4><p>阿里云官网：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p>
<img src="assets/image-20210807074911618.png" alt="image-20210807074911618" style="zoom:80%;" /> 

<p>点击官网首页注册按钮，跳转到如下注册页面：</p>
<img src="assets/image-20210807074934251.png" alt="image-20210807074934251" style="zoom:80%;" /> 



<p>当我们把账号注册完毕之后，我们就可以登录到阿里云系统控制台。</p>
<h4 id="4-3-2-开通短信服务"><a href="#4-3-2-开通短信服务" class="headerlink" title="4.3.2 开通短信服务"></a>4.3.2 开通短信服务</h4><p>注册成功后，点击登录按钮进行登录。登录后进入控制台, 在左上角的菜单栏中搜索短信服务。第一次使用，需要点击，并开通短信服务。</p>
<p><img src="/assets/image-20210807075321250.png" alt="image-20210807075321250"> </p>
<img src="assets/image-20210807075620990.png" alt="image-20210807075620990" style="zoom:80%;" /> 



<h4 id="4-3-3-设置短信签名"><a href="#4-3-3-设置短信签名" class="headerlink" title="4.3.3 设置短信签名"></a>4.3.3 设置短信签名</h4><p>开通短信服务之后，进入短信服务管理页面，选择国内消息菜单，我们需要在这里添加短信签名。</p>
<p><img src="/assets/image-20210807080406104.png" alt="image-20210807080406104"> </p>
<p><strong>那么什么是短信签名呢?</strong></p>
<p>短信签名是短信发送者的署名，表示发送方的身份。我们要调用阿里云短信服务发送短信，签名是比不可少的部分。</p>
<img src="assets/image-20210807080659337.png" alt="image-20210807080659337" style="zoom:80%;" /> 



<p>那么接下来，我们就需要来添加短信签名。</p>
<p><img src="/assets/image-20210807081839908.png" alt="image-20210807081839908"> </p>
<blockquote>
<p><font color='red'>注意：</font> </p>
<p>​	<font color='red'>目前，阿里云短信服务申请签名主要针对企业开发，个人申请时有一定难度的，在审核时，会审核资质，需要上传营业执照 ；</font> </p>
<p>​	<font color='red'>所以，我们课程中，主要是演示一下短信验证码如何发送，大家只需要学习这块儿的开发流程、实现方式即可，无需真正的发送短信。如果以后在企业中做项目，需要发送短信，我们会以公司的资质去申请对应的签名。</font> </p>
</blockquote>
<h4 id="4-3-4-设置短信模板"><a href="#4-3-4-设置短信模板" class="headerlink" title="4.3.4 设置短信模板"></a>4.3.4 设置短信模板</h4><p>切换到【模板管理】标签页：</p>
<p><img src="/assets/image-20210807082453655.png" alt="image-20210807082453655"> </p>
<p><strong>那么什么是模板呢?</strong></p>
<p>短信模板包含短信发送内容、场景、变量信息。模板的详情如下:</p>
<img src="assets/image-20210807082639900.png" alt="image-20210807082639900" style="zoom: 80%;" /> 

<p>最终我们，给用户发送的短信中，具体的短信内容，就是上面配置的这个模板内容，将${code}占位符替换成对应的验证码数据即可。如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【xxxxx】您好,您的验证码为173822,5分钟之内有效,不要泄露给他人!</span><br></pre></td></tr></table></figure>



<p>我们可以点击右上角的按钮,添加模板,然后填写模板的基本信息及设置的模板内容:</p>
<img src="assets/image-20210807083306928.png" alt="image-20210807083306928" style="zoom:80%;" /> 

<p><font color='red'>添加的短信模板，也是需要进行审核的只有审核通过，才可以正常使用。</font></p>
<h4 id="4-3-5-设置AccessKey"><a href="#4-3-5-设置AccessKey" class="headerlink" title="4.3.5 设置AccessKey"></a>4.3.5 设置AccessKey</h4><p>AccessKey 是访问阿里云 API 的密钥，具有账户的完全权限，我们要想在后面通过API调用阿里云短信服务的接口发送短信，那么就必须要设置AccessKey。</p>
<p>我们点击右上角的用户头像，选择”AccessKey管理”，这时就可以进入到AccessKey的管理界面。</p>
<p><img src="/assets/image-20210807130218414.png" alt="image-20210807130218414"></p>
<p>进入到AccessKey的管理界面之后，提示两个选项 “继续使用AccessKey” 和 “开始使用子用户AccessKey”，两个区别如下:</p>
<p><strong>1). 继续使用AccessKey</strong></p>
<p>如果选择的是该选项，我们创建的是阿里云账号的AccessKey，是具有账户的完全权限，有了这个AccessKey以后，我们就可以通过API调用阿里云的服务，不仅是短信服务，其他服务(OSS，语音服务，内容安全服务，视频点播服务…等)也可以调用。 相对来说，并不安全，当前的AccessKey泄露，会影响到我当前账户的其他云服务。</p>
<p><strong>2). 开始使用子用户AccessKey</strong></p>
<p>可以创建一个子用户,这个子用户我们可以分配比较低的权限,比如仅分配短信发送的权限，不具备操作其他的服务的权限，即使这个AccessKey泄漏了,也不会影响其他的云服务, 相对安全。</p>
<p>接下来就来演示一下，如何创建子用户AccessKey。</p>
<p><img src="/assets/image-20210807131340003.png" alt="image-20210807131340003"> </p>
<h4 id="4-3-6-配置权限"><a href="#4-3-6-配置权限" class="headerlink" title="4.3.6 配置权限"></a>4.3.6 配置权限</h4><p>上述我们已经创建了子用户, 但是这个子用户,目前没有任何权限,接下来,我们需要为创建的这个用户来分配权限。</p>
<p><img src="/assets/image-20210807183735533.png" alt="image-20210807183735533"> </p>
<p><font color='red'>经过上述的权限配置之后，那么新创建的这个 reggie 用户，仅有短信服务操作的权限，不具备别的权限，即使当前的AccessKey泄漏了，也只会影响短信服务，其他服务是不受影响的。</font></p>
<h4 id="4-3-7-禁用-x2F-删除AccessKey"><a href="#4-3-7-禁用-x2F-删除AccessKey" class="headerlink" title="4.3.7 禁用&#x2F;删除AccessKey"></a>4.3.7 禁用&#x2F;删除AccessKey</h4><p>如果在使用的过程中 AccessKey 不小心泄漏了,我们可以在阿里云控制台中, 禁用或者删除该AccessKey。</p>
<p><img src="/assets/image-20210807190005367.png" alt="image-20210807190005367"> </p>
<p>然后再创建一个新的AccessKey, 保存好AccessKeyId和AccessKeySecret。</p>
<p><img src="/assets/image-20210807190304136.png" alt="image-20210807190304136"> </p>
<p>&#x3D;&#x3D;注意： 创建好了AccessKey后，请及时保存AccessKeyId 和 AccessKeySecret ，弹窗关闭后将无法再次获取该信息，但您可以随时创建新的 AccessKey。&#x3D;&#x3D;</p>
<h3 id="4-4-代码开发"><a href="#4-4-代码开发" class="headerlink" title="4.4 代码开发"></a>4.4 代码开发</h3><p>使用阿里云短信服务发送短信，可以参照官方提供的文档即可。</p>
<p>官方文档: <a href="https://help.aliyun.com/product/44282.html?spm=5176.12212571.help.dexternal.57a91cbewHHjKq">https://help.aliyun.com/product/44282.html?spm=5176.12212571.help.dexternal.57a91cbewHHjKq</a></p>
<p><img src="/assets/image-20210807193047220.png" alt="image-20210807193047220"> </p>
<p>我们根据官方文档的提示，引入对应的依赖，然后再引入对应的java代码，就可以发送消息了。</p>
<p><img src="/assets/image-20210807193829131.png" alt="image-20210807193829131"> </p>
<blockquote>
<p>SDK : SDK 就是 Software Development Kit 的缩写，翻译过来——软件开发工具包，辅助开发某一类软件的相关文档、范例和工具的集合都可以叫做SDK。在我们与第三方接口相互时， 一般都会提供对应的SDK，来简化我们的开发。</p>
</blockquote>
<p><strong>具体实现：</strong></p>
<p>1). pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 将官方提供的main方法封装为一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">      <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">      <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">      <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">      request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">      request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">      request.setSignName(signName);</span><br><span class="line">      request.setTemplateCode(templateCode);</span><br><span class="line">      request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">         System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注 : 由于我们个人目前无法申请阿里云短信服务，所以这里我们只需要把流程跑通，具体的短信发送可以实现。</p>
</blockquote>
<h2 id="5-手机验证码登录"><a href="#5-手机验证码登录" class="headerlink" title="5. 手机验证码登录"></a>5. 手机验证码登录</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>为了方便用户登录，移动端通常都会提供通过手机验证码登录的功能。手机验证码登录有如下优点：</p>
<p>1). 方便快捷，无需注册，直接登录</p>
<p>2). 使用短信验证码作为登录凭证，无需记忆密码</p>
<p>3). 安全</p>
<img src="assets/image-20210807232653592.png" alt="image-20210807232653592" style="zoom:80%;" />  



<p><strong>登录流程：</strong></p>
<p>输入手机号 &gt; 获取验证码 &gt; 输入验证码 &gt; 点击登录 &gt; 登录成功</p>
<blockquote>
<p>注意：通过手机验证码登录，手机号是区分不同用户的标识。</p>
</blockquote>
<h3 id="5-2-数据模型"><a href="#5-2-数据模型" class="headerlink" title="5.2 数据模型"></a>5.2 数据模型</h3><p>通过手机验证码登录时，涉及的表为user表，即用户表。结构如下:</p>
<p><img src="/assets/image-20210807231948412.png" alt="image-20210807231948412"> </p>
<h3 id="5-3-前端页面分析"><a href="#5-3-前端页面分析" class="headerlink" title="5.3 前端页面分析"></a>5.3 前端页面分析</h3><p>在开发代码之前，需要梳理一下登录时前端页面和服务端的交互过程：</p>
<p>1). 在登录页面(front&#x2F;page&#x2F;login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信。</p>
<img src="assets/image-20210807233018171.png" alt="image-20210807233018171" style="zoom:80%;" /> 



<p>2). 在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求。</p>
<img src="assets/image-20210807233336029.png" alt="image-20210807233336029" style="zoom:80%;" /> 

<p>如果服务端返回的登录成功，页面将会把当前登录用户的手机号存储在sessionStorage中，并跳转到移动的首页页面。</p>
<p>开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可，分别是获取短信验证码 和 登录请求，具体的请求信息如下： </p>
<p>1). 获取短信验证码</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;sendMsg</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”}</td>
</tr>
</tbody></table>
<p>2). 登录</p>
<table>
<thead>
<tr>
<th>请求</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>请求方式</td>
<td>POST</td>
</tr>
<tr>
<td>请求路径</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>请求参数</td>
<td>{“phone”:”13100001111”, “code”:”1111”}</td>
</tr>
</tbody></table>
<h3 id="5-4-代码开发"><a href="#5-4-代码开发" class="headerlink" title="5.4 代码开发"></a>5.4 代码开发</h3><h4 id="5-4-1-准备工作"><a href="#5-4-1-准备工作" class="headerlink" title="5.4.1 准备工作"></a>5.4.1 准备工作</h4><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p>
<p>1). 实体类 User（直接从课程资料中导入即可）</p>
<p>所属包: com.itheima.reggie.entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2). Mapper接口 UserMapper</p>
<p>所属包: com.itheima.reggie.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3). 业务层接口 UserService</p>
<p>所属包: com.itheima.reggie.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4). 业务层实现类 UserServiceImpl</p>
<p>所属包: com.itheima.reggie.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5). 控制层 UserController</p>
<p>所属包: com.itheima.reggie.controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>6). 工具类SMSUtils、ValidateCodeUtils（直接从课程资料中导入即可）</p>
<p>所属包: com.itheima.reggie.utils</p>
<p><img src="/assets/image-20210807234828051.png" alt="image-20210807234828051"> </p>
<p>SMSUtils : 是我们上面改造的阿里云短信发送的工具类 ;</p>
<p>ValidateCodeUtils : 是验证码生成的工具类 ;</p>
<h4 id="5-4-2-功能实现"><a href="#5-4-2-功能实现" class="headerlink" title="5.4.2 功能实现"></a>5.4.2 功能实现</h4><h5 id="5-4-2-1-修改LoginCheckFilter"><a href="#5-4-2-1-修改LoginCheckFilter" class="headerlink" title="5.4.2.1 修改LoginCheckFilter"></a>5.4.2.1 修改LoginCheckFilter</h5><p>前面我们已经完成了LoginCheckFilter过滤器的开发，此过滤器用于检查用户的登录状态。我们在进行手机验证码登录时，发送的两个请求(获取验证码和登录)需要在此过滤器处理时直接放行。</p>
<p><img src="/assets/image-20210807235349089.png" alt="image-20210807235349089"> </p>
<p>对于移动的端的页面，也是用户登录之后，才可以访问的，那么这个时候就需要在 LoginCheckFilter 中进行判定，如果移动端用户已登录，我们获取到用户登录信息，存入ThreadLocal中(在后续的业务处理中，如果需要获取当前登录用户ID，直接从ThreadLocal中获取)，然后放行。</p>
<p>增加如下逻辑: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-4-2-2-发送短信验证码"><a href="#5-4-2-2-发送短信验证码" class="headerlink" title="5.4.2.2 发送短信验证码"></a>5.4.2.2 发送短信验证码</h5><p>在UserController中创建方法，处理登录页面的请求，为指定手机号发送短信验证码，同时需要将手机号对应的验证码保存到Session，方便后续登录时进行比对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机短信验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">        <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line">			</span><br><span class="line">        <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//需要将生成的验证码保存到Session</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'>备注: </font></p>
<p>​	<font color='red'>这里发送短信我们只需要调用封装的工具类中的方法即可，我们这个功能流程跑通，在测试中我们不用真正的发送短信，只需要将验证码信息，通过日志输出，登录时，我们直接从控制台就可以看到生成的验证码(实际上也就是发送到我们手机上的验证码)</font></p>
</blockquote>
<h5 id="5-4-2-3-验证码登录"><a href="#5-4-2-3-验证码登录" class="headerlink" title="5.4.2.3 验证码登录"></a>5.4.2.3 验证码登录</h5><p>在UserController中增加登录的方法 login，该方法的具体逻辑为： </p>
<p>1). 获取前端传递的手机号和验证码</p>
<p>2). 从Session中获取到手机号对应的正确的验证码</p>
<p>3). 进行验证码的比对 , 如果比对失败, 直接返回错误信息</p>
<p>4). 如果比对成功, 需要根据手机号查询当前用户, 如果用户不存在, 则自动注册一个新用户</p>
<p>5). 将登录用户的ID存储Session中</p>
<p>具体代码实现: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动端用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从Session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span></span><br><span class="line">    <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">        <span class="comment">//如果能够比对成功，说明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5-5-功能测试"><a href="#5-5-功能测试" class="headerlink" title="5.5 功能测试"></a>5.5 功能测试</h3><p>代码完成后，重启服务，测试短信验证码的发送及登录功能。</p>
<p>1). 测试错误验证码的情况</p>
<img src="assets/image-20210808001952043.png" alt="image-20210808001952043" style="zoom:80%;" /> 



<p>2). 测试正确验证码的情况</p>
<p><img src="/assets/image-20210808002356092.png" alt="image-20210808002356092"> </p>
<p>检查user表，用户的数据也插入进来了： </p>
<p><img src="/assets/image-20210808002501618.png" alt="image-20210808002501618"> </p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目优化-Day01</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96-Day01/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目优化-Day01"><a href="#瑞吉外卖项目优化-Day01" class="headerlink" title="瑞吉外卖项目优化-Day01"></a>瑞吉外卖项目优化-Day01</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li>环境搭建</li>
<li>缓存短信验证码</li>
<li>缓存菜品信息</li>
<li>SpringCache</li>
<li>缓存套餐数据</li>
</ul>
<span id="more"></span>









<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>1). 当前系统存在的问题</p>
</blockquote>
<p>之前我们已经实现了移动端菜品展示、点餐、购物车、下单等功能，但是由于移动端是面向所有的消费者的，请求压力相对比较大，而我们当前所有的数据查询都是从数据库MySQL中直接查询的，那么可能就存在如下问题： &#x3D;&#x3D;频繁访问数据库，数据库访问压力大，系统性能下降，用户体验较差。&#x3D;&#x3D;</p>
<p><img src="/assets/image-20210819232120838.png" alt="image-20210819232120838"> </p>
<blockquote>
<p>2). 解决该问题的方法</p>
</blockquote>
<p>要解决我们上述提到的问题，就可以使用我们前面学习的一个技术：Redis，通过Redis来做缓存，从而降低数据库的访问压力，提高系统的访问性能，从而提升用户体验。加入Redis做缓存之后，我们在进行数据查询时，就需要先查询缓存，如果缓存中有数据，直接返回，如果缓存中没有数据，则需要查询数据库，再将数据库查询的结果，缓存在redis中。</p>
<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><h3 id="1-1-版本控制"><a href="#1-1-版本控制" class="headerlink" title="1.1 版本控制"></a>1.1 版本控制</h3><p>接下来，我们就需要对我们的功能进行优化，但是需要说明的是，我们不仅仅要对上述提到的缓存进行优化，还需要对我们程序的各个方面进行优化。我们本章节主要是针对于缓存进行优化，为了方便的对我们各个优化版本的代码进行管理，我们使用Git来控制代码版本。 那么此时我们就需要将我们之前开发完成的代码提交到Git，并且推送到码云Gitee的远程仓库，执行步骤如下： </p>
<p><strong>1). 创建Gitee远程仓库</strong></p>
<img src="assets/image-20210820000329886.png" alt="image-20210820000329886" style="zoom:80%;" /> 



<p><strong>2). idea-创建本地仓库</strong></p>
<p><img src="/assets/image-20210820000700459.png" alt="image-20210820000700459"> </p>
<p><strong>3). 准备忽略文件.gitignore</strong></p>
<p>在我们的项目中, 有一些文件是无需提交的到git，比如: .idea，target&#x2F;，*.iml等。我们可以直接将今天课程资料中提供的.gitignore 文件导入到我们的项目中。</p>
<p><img src="/assets/image-20210820001119649.png" alt="image-20210820001119649"> </p>
<p><strong>4). idea-提交并推送本地代码</strong></p>
<p>A. 添加项目文件进暂存区</p>
<img src="assets/image-20210820001232154.png" alt="image-20210820001232154"  /> 



<p>B. 提交代码</p>
<img src="assets/image-20210820001805504.png" alt="image-20210820001805504"  /> 

<p><img src="/assets/image-20210820002006653.png" alt="image-20210820002006653"> </p>
<p>C. 推送代码到远程仓库 </p>
<p><img src="/assets/image-20210820002159587.png" alt="image-20210820002159587"> </p>
<p><strong>5). 查看gitee远程仓库</strong></p>
<p><img src="/assets/image-20210820002723619.png" alt="image-20210820002723619"> </p>
<p><strong>6). 创建分支</strong></p>
<p>目前默认git中只有一个主分支master，我们接下来进行缓存的优化，就不在master分支来操作了，我们需要在git上创建一个单独的分支v1.0，缓存的优化，我们就在该分支上进行操作。</p>
<p><img src="/assets/image-20210820003303544.png" alt="image-20210820003303544">  </p>
<p>当前创建的v1.0分支，是基于master分支创建出来的，所以目前master分支的代码， 和v1.0分支的代码是完全一样的，接下来把v1.0的代码也推送至远程仓库。</p>
<p><strong>7). 推送分支代码到远程</strong></p>
<p><img src="/assets/image-20210820003516900.png" alt="image-20210820003516900"> </p>
<p><img src="/assets/image-20210820003545764.png" alt="image-20210820003545764"> </p>
<h3 id="1-2-环境准备"><a href="#1-2-环境准备" class="headerlink" title="1.2 环境准备"></a>1.2 环境准备</h3><p><strong>1). 在项目的pom.xml文件中导入spring data redis的maven坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 在项目的application.yml中加入redis相关配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.200</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root@123456</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意: 引入上述依赖时,需要注意yml文件前面的缩进,上述配置应该配置在spring层级下面。&#x3D;&#x3D;</p>
<p><strong>3). 编写Redis的配置类RedisConfig,定义RedisTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解释说明:</strong> </p>
<p>1). 在SpringBoot工程启动时, 会加载一个自动配置类 RedisAutoConfiguration, 在里面已经声明了RedisTemplate这个bean</p>
<img src="assets/image-20210821091441695.png" alt="image-20210821091441695" style="zoom:80%;" /> 

<p>上述框架默认声明的RedisTemplate用的key和value的序列化方式是默认的 JdkSerializationRedisSerializer，如果key采用这种方式序列化，最终我们在测试时通过redis的图形化界面查询不是很方便，如下形式：</p>
<p><img src="/assets/image-20210822003112692.png" alt="image-20210822003112692"> </p>
<p>2). 如果使用我们自定义的RedisTemplate, key的序列化方式使用的是StringRedisSerializer, 也就是字符串形式, 最终效果如下: </p>
<p><img src="/assets/image-20210822003408377.png" alt="image-20210822003408377"> </p>
<p>3). 定义了两个bean会不会出现冲突呢? 答案是不会, 因为源码如下:</p>
<img src="assets/image-20210821092401172.png" alt="image-20210821092401172" style="zoom:80%;" /> 











<h2 id="2-缓存短信验证码"><a href="#2-缓存短信验证码" class="headerlink" title="2. 缓存短信验证码"></a>2. 缓存短信验证码</h2><h3 id="2-1-思路分析"><a href="#2-1-思路分析" class="headerlink" title="2.1 思路分析"></a>2.1 思路分析</h3><p>前面我们已经实现了移动端手机验证码登录，随机生成的验证码我们是保存在HttpSession中的。但是在我们实际的业务场景中，一般验证码都是需要设置过期时间的，如果存在HttpSession中就无法设置过期时间，此时我们就需要对这一块的功能进行优化。</p>
<p>现在需要改造为将验证码缓存在Redis中，具体的实现思路如下：</p>
<p>1). 在服务端UserController中注入RedisTemplate对象，用于操作Redis;</p>
<p>2). 在服务端UserController的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟;</p>
<p>3). 在服务端UserController的login方法中，从Redis中获取缓存的验证码，如果登录成功则删除Redis中的验证码;</p>
<h3 id="2-2-代码改造"><a href="#2-2-代码改造" class="headerlink" title="2.2 代码改造"></a>2.2 代码改造</h3><p>1). 在UserController中注入RedisTemplate对象，用于操作Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>



<p>2). 在UserController的sendMsg方法中，将生成的验证码保存到Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要将生成的验证码保存到Redis,设置过期时间</span></span><br><span class="line">redisTemplate.opsForValue().set(phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>

<img src="assets/image-20210821194944557.png" alt="image-20210821194944557"  /> 



<p>3). 在UserController的login方法中，从Redis中获取生成的验证码，如果登录成功则删除Redis中缓存的验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Redis中获取缓存的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Redis中删除缓存的验证码</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210821195329342.png" alt="image-20210821195329342"> </p>
<h3 id="2-3-功能测试"><a href="#2-3-功能测试" class="headerlink" title="2.3 功能测试"></a>2.3 功能测试</h3><p>代码编写完毕之后,重启服务。</p>
<p><strong>1). 访问前端工程，获取验证码</strong></p>
<p><img src="/assets/image-20210821200212767.png" alt="image-20210821200212767"> </p>
<p>通过控制台的日志，我们可以看到生成的验证码：</p>
<p><img src="/assets/image-20210822002439892.png" alt="image-20210822002439892">  </p>
<p><strong>2). 通过Redis的图形化界面工具查看Redis中的数据</strong></p>
<img src="assets/image-20210822003550941.png" alt="image-20210822003550941" style="zoom:97%;" /> 



<p><strong>3). 在登录界面填写验证码登录完成后,查看Redis中的数据是否删除</strong></p>
<p><img src="/assets/image-20210822003732542.png" alt="image-20210822003732542"> </p>
<h2 id="3-缓存菜品信息"><a href="#3-缓存菜品信息" class="headerlink" title="3. 缓存菜品信息"></a>3. 缓存菜品信息</h2><h3 id="3-1-实现思路"><a href="#3-1-实现思路" class="headerlink" title="3.1 实现思路"></a>3.1 实现思路</h3><p>前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件(categoryId)进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>
<p>那么,我们又需要思考一个问题, 具体缓存几份数据呢, 所有的菜品缓存一份 , 还是说需要缓存多份呢? 我们可以看一下我们之前做的移动端效果: </p>
<img src="assets/image-20210822010136819.png" alt="image-20210822010136819" style="zoom:80%;" /> 

<p>我们点击哪一个分类,展示的就是该分类下的菜品, 其他菜品无需展示。所以，这里面我们在缓存时，可以根据菜品的分类，缓存多份数据，页面在查询时，点击的是哪个分类，我们就查询该分类下的菜品缓存数据。</p>
<p><strong>具体的实现思路如下：</strong></p>
<p>1). 改造DishController的list方法，先从Redis中获取分类对应的菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据存入Redis。</p>
<p>2). 改造DishController的save和update方法，加入清理缓存的逻辑。</p>
<blockquote>
<p>注意： </p>
<p>​	在使用缓存过程中，要注意保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。否则就会造成缓存数据与数据库数据不一致的情况。</p>
</blockquote>
<h3 id="3-2-代码改造"><a href="#3-2-代码改造" class="headerlink" title="3.2 代码改造"></a>3.2 代码改造</h3><p>需要改造的代码为： DishController</p>
<h4 id="3-2-1-查询菜品缓存"><a href="#3-2-1-查询菜品缓存" class="headerlink" title="3.2.1 查询菜品缓存"></a>3.2.1 查询菜品缓存</h4><table>
<thead>
<tr>
<th>改造的方法</th>
<th>redis的数据类型</th>
<th>redis缓存的key</th>
<th>redis缓存的value</th>
</tr>
</thead>
<tbody><tr>
<td>list</td>
<td>string</td>
<td>dish_分类Id_状态 , 比如: dish_12323232323_1</td>
<td>List<DishDto></td>
</tr>
</tbody></table>
<p><strong>1). 在DishController中注入RedisTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>



<p><strong>2). 在list方法中,查询数据库之前,先查询缓存, 缓存中有数据, 直接返回</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//动态构造key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();<span class="comment">//dish_1397844391040167938_1</span></span><br><span class="line"><span class="comment">//先从redis中获取缓存数据</span></span><br><span class="line">dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"><span class="keyword">if</span>(dishDtoList != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//如果存在，直接返回，无需查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="assets/image-20210822011323316.png" alt="image-20210822011323316" style="zoom:90%;" /> 



<p><strong>3). 如果redis不存在，查询数据库，并将数据库查询结果，缓存在redis，并设置过期时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果不存在，需要查询数据库，将查询到的菜品数据缓存到Redis</span></span><br><span class="line">redisTemplate.opsForValue().set(key,dishDtoList,<span class="number">60</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>

<img src="assets/image-20210822011714110.png" alt="image-20210822011714110" style="zoom:90%;" /> 







<h4 id="3-2-2-清理菜品缓存"><a href="#3-2-2-清理菜品缓存" class="headerlink" title="3.2.2 清理菜品缓存"></a>3.2.2 清理菜品缓存</h4><p>为了保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。所以，我们需要在添加菜品、更新菜品时清空缓存数据。</p>
<p><strong>1). 保存菜品,清空缓存</strong></p>
<p>在保存菜品的方法save中，当菜品数据保存完毕之后，需要清空菜品的缓存。那么这里清理菜品缓存的方式存在两种：</p>
<p>A. 清理所有分类下的菜品缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;dish_*&quot;</span>); <span class="comment">//获取所有以dish_xxx开头的key</span></span><br><span class="line">redisTemplate.delete(keys); <span class="comment">//删除这些key</span></span><br></pre></td></tr></table></figure>



<p>B. 清理当前添加菜品分类下的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure>

<p>此处, 我们推荐使用第二种清理的方式, 只清理当前菜品关联的分类下的菜品数据。</p>
<img src="assets/image-20210822013114996.png" alt="image-20210822013114996" style="zoom:80%;" /> 





<p><strong>2). 更新菜品,清空缓存</strong></p>
<p>在更新菜品的方法update中，当菜品数据更新完毕之后，需要清空菜品的缓存。这里清理缓存的方式和上述基本一致。</p>
<p>A. 清理所有分类下的菜品缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理所有菜品的缓存数据</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;dish_*&quot;</span>); <span class="comment">//获取所有以dish_xxx开头的key</span></span><br><span class="line">redisTemplate.delete(keys); <span class="comment">//删除这些key</span></span><br></pre></td></tr></table></figure>



<p>B. 清理当前添加菜品分类下的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理某个分类下面的菜品缓存数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210822013609299.png" alt="image-20210822013609299"> </p>
<p>&#x3D;&#x3D;注意: 在这里我们推荐使用第一种方式进行清理，这样逻辑更加严谨。 因为对于修改操作，用户是可以修改菜品的分类的，如果用户修改了菜品的分类，那么原来分类下将少一个菜品，新的分类下将多一个菜品，这样的话，两个分类下的菜品列表数据都发生了变化。&#x3D;&#x3D;</p>
<h3 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h3><p>代码编写完毕之后,重新启动服务。</p>
<p>1). 访问移动端，根据分类查询菜品列表，然后再检查Redis的缓存数据，是否可以正常缓存；</p>
<p><img src="/assets/image-20210822221038509.png" alt="image-20210822221038509"> </p>
<p>我们也可以在服务端，通过debug断点的形式一步一步的跟踪代码的执行。</p>
<p>2). 当我们在进行新增及修改菜品时, 查询Redis中的缓存数据, 是否被清除;</p>
<h3 id="3-4-提交并推送代码"><a href="#3-4-提交并推送代码" class="headerlink" title="3.4 提交并推送代码"></a>3.4 提交并推送代码</h3><p><strong>1). 提交并推送代码</strong></p>
<p>在v1.0分支中, 将我们已经实现并且测试通过的使用redis缓存验证码和菜品信息的代码,提交并推送至Gitee</p>
<img src="assets/image-20210822222206452.png" alt="image-20210822222206452" style="zoom:80%;" /> 

<img src="assets/image-20210822222244727.png" alt="image-20210822222244727" style="zoom:80%;" /> 



<p><strong>2). 合并代码到master分支</strong></p>
<p>A. 将代码切换到master分支</p>
<img src="assets/image-20210822222756572.png" alt="image-20210822222756572" style="zoom:80%;" /> 



<p>B. 将v1.0分支的代码合并到当前master分支</p>
<img src="assets/image-20210822223314087.png" alt="image-20210822223314087" style="zoom:80%;" /> 



<p>C. 将master分支合并后代码推送到Gitee</p>
<img src="assets/image-20210822223837020.png" alt="image-20210822223837020" style="zoom:80%;" /> 

<img src="assets/image-20210822223912803.png" alt="image-20210822223912803" style="zoom:80%;" /> 









<h2 id="4-SpringCache"><a href="#4-SpringCache" class="headerlink" title="4. SpringCache"></a>4. SpringCache</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p><strong>Spring Cache</strong>是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能，大大简化我们在业务中操作缓存的代码。</p>
<p>Spring Cache只是提供了一层抽象，底层可以切换不同的cache实现。具体就是通过<strong>CacheManager</strong>接口来统一不同的缓存技术。CacheManager是Spring提供的各种缓存技术抽象接口。</p>
<p>针对不同的缓存技术需要实现不同的CacheManager：</p>
<table>
<thead>
<tr>
<th><strong>CacheManager</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>EhCacheCacheManager</td>
<td>使用EhCache作为缓存技术</td>
</tr>
<tr>
<td>GuavaCacheManager</td>
<td>使用Google的GuavaCache作为缓存技术</td>
</tr>
<tr>
<td>RedisCacheManager</td>
<td>使用Redis作为缓存技术</td>
</tr>
</tbody></table>
<h3 id="4-2-注解"><a href="#4-2-注解" class="headerlink" title="4.2 注解"></a>4.2 注解</h3><p>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody></table>
<p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可。</p>
<p>例如，使用Redis作为缓存技术，只需要导入Spring data Redis的maven坐标即可。</p>
<h3 id="4-3-入门程序"><a href="#4-3-入门程序" class="headerlink" title="4.3 入门程序"></a>4.3 入门程序</h3><p>接下来，我们将通过一个入门案例来演示一下SpringCache的常见用法。 上面我们提到，SpringCache可以集成不同的缓存技术，如Redis、Ehcache甚至我们可以使用Map来缓存数据， 接下来我们在演示的时候，就先通过一个Map来缓存数据，最后我们再换成Redis来缓存。</p>
<h4 id="4-3-1-环境准备"><a href="#4-3-1-环境准备" class="headerlink" title="4.3.1 环境准备"></a>4.3.1 环境准备</h4><p><strong>1). 数据库准备</strong></p>
<p>将今天资料中的SQL脚本直接导入数据库中。</p>
<p><img src="/assets/image-20210822230236957.png" alt="image-20210822230236957"> </p>
<p><strong>2). 导入基础工程</strong></p>
<p>基础环境的代码，在我们今天的资料中已经准备好了， 大家只需要将这个工程导入进来就可以了。导入进来的工程结构如下： </p>
<p><img src="/assets/image-20210822225934512.png" alt="image-20210822225934512"> </p>
<p>由于SpringCache的基本功能是Spring核心(spring-context)中提供的，所以目前我们进行简单的SpringCache测试，是可以不用额外引入其他依赖的。</p>
<p><strong>3). 注入CacheManager</strong></p>
<p>我们可以在UserController注入一个CacheManager，在Debug时，我们可以通过CacheManager跟踪缓存中数据的变化。</p>
<img src="assets/image-20210822231333527.png" alt="image-20210822231333527" style="zoom:80%;" /> 



<p>我们可以看到CacheManager是一个接口，默认的实现有以下几种 ；</p>
<p><img src="/assets/image-20210822231217450.png" alt="image-20210822231217450"> </p>
<p>而在上述的这几个实现中，默认使用的是 ConcurrentMapCacheManager。稍后我们可以通过断点的形式跟踪缓存数据的变化。</p>
<p><strong>4). 引导类上加@EnableCaching</strong></p>
<p>在引导类上加该注解，就代表当前项目开启缓存注解功能。</p>
<p><img src="/assets/image-20210822231616569.png" alt="image-20210822231616569"> </p>
<h4 id="4-3-2-CachePut注解"><a href="#4-3-2-CachePut注解" class="headerlink" title="4.3.2 @CachePut注解"></a>4.3.2 @CachePut注解</h4><blockquote>
<p>@CachePut 说明： </p>
<p>​	作用: 将方法返回值，放入缓存</p>
<p>​	value: 缓存的名称, 每个缓存名称下面可以有很多key</p>
<p>​	key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p>
</blockquote>
<p><strong>1). 在save方法上加注解@CachePut</strong></p>
<p>当前UserController的save方法是用来保存用户信息的，我们希望在该用户信息保存到数据库的同时，也往缓存中缓存一份数据，我们可以在save方法上加上注解 @CachePut，用法如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CachePut：将方法返回值放入缓存</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CachePut(value = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>key的写法如下： </p>
<p>​	#user.id : #user指的是方法形参的名称, id指的是user的id属性 , 也就是使用user的id属性作为key ;</p>
<p>​	#user.name: #user指的是方法形参的名称, name指的是user的name属性 ,也就是使用user的name属性作为key ;</p>
<p>​	</p>
<p>​	#result.id : #result代表方法返回值，该表达式 代表以返回对象的id属性作为key ；</p>
<p>​	#result.name : #result代表方法返回值，该表达式 代表以返回对象的name属性作为key ；</p>
</blockquote>
<p><strong>2). 测试</strong></p>
<p>启动服务,通过postman请求访问UserController的方法, 然后通过断点的形式跟踪缓存数据。</p>
<p><img src="/assets/image-20210822233438182.png" alt="image-20210822233438182"></p>
<p>第一次访问时，缓存中的数据是空的，因为save方法执行完毕后才会缓存数据。 </p>
<p><img src="/assets/image-20210822233724439.png" alt="image-20210822233724439"> </p>
<p>第二次访问时，我们通过debug可以看到已经有一条数据了，就是上次保存的数据，已经缓存了，缓存的key就是用户的id。</p>
<p><img src="/assets/image-20210822234105085.png" alt="image-20210822234105085"> </p>
<p>&#x3D;&#x3D;注意: 上述的演示，最终的数据，实际上是缓存在ConcurrentHashMap中，那么当我们的服务器重启之后，缓存中的数据就会丢失。 我们后面使用了Redis来缓存就不存在这样的问题了。&#x3D;&#x3D;</p>
<h4 id="4-3-3-CacheEvict注解"><a href="#4-3-3-CacheEvict注解" class="headerlink" title="4.3.3 @CacheEvict注解"></a>4.3.3 @CacheEvict注解</h4><blockquote>
<p>@CacheEvict 说明： </p>
<p>​	作用: 清理指定缓存</p>
<p>​	value: 缓存的名称，每个缓存名称下面可以有多个key</p>
<p>​	key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p>
</blockquote>
<p><strong>1). 在 delete 方法上加注解@CacheEvict</strong></p>
<p>当我们在删除数据库user表的数据的时候,我们需要删除缓存中对应的数据,此时就可以使用@CacheEvict注解, 具体的使用方式如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CacheEvict：清理指定缓存</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0&quot;)</span>  <span class="comment">//#p0 代表第一个参数</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0]&quot;) //#root.args[0] 代表第一个参数</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;) //#id 代表变量名为id的参数</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>2). 测试</strong></p>
<p>要测试缓存的删除，我们先访问save方法4次，保存4条数据到数据库的同时，也保存到缓存中，最终我们可以通过debug看到缓存中的数据信息。 然后我们在通过postman访问delete方法， 如下： </p>
<p><img src="/assets/image-20210823000431356.png" alt="image-20210823000431356"> </p>
<p>删除数据时，通过debug我们可以看到已经缓存的4条数据：</p>
<p><img src="/assets/image-20210823000458089.png" alt="image-20210823000458089"> </p>
<p>当执行完delete操作之后，我们再次保存一条数据，在保存的时候debug查看一下删除的ID值是否已经被删除。</p>
<p><img src="/assets/image-20210823000733218.png" alt="image-20210823000733218"> </p>
<p><strong>3). 在 update 方法上加注解@CacheEvict</strong></p>
<p>在更新数据之后，数据库的数据已经发生了变更，我们需要将缓存中对应的数据删除掉，避免出现数据库数据与缓存数据不一致的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)   //第一个参数的id属性</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;) //参数名为user参数的id属性</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0].id&quot;) //第一个参数的id属性</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#result.id&quot;)</span>         <span class="comment">//返回值的id属性</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userService.updateById(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加上注解之后，我们可以重启服务，然后测试方式，基本和上述相同，先缓存数据，然后再更新某一条数据，通过debug的形式查询缓存数据的情况。</p>
<h4 id="4-3-4-Cacheable注解"><a href="#4-3-4-Cacheable注解" class="headerlink" title="4.3.4 @Cacheable注解"></a>4.3.4 @Cacheable注解</h4><blockquote>
<p>@Cacheable 说明:</p>
<p>​	作用: 在方法执行前，spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</p>
<p>​	value: 缓存的名称，每个缓存名称下面可以有多个key</p>
<p>​	key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p>
</blockquote>
<p><strong>1). 在getById上加注解@Cacheable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 测试</strong></p>
<p>我们可以重启服务，然后通过debug断点跟踪程序执行。我们发现，第一次访问，会请求我们controller的方法，查询数据库。后面再查询相同的id，就直接获取到数据库，不用再查询数据库了，就说明缓存生效了。</p>
<p><img src="/assets/image-20210823002517941.png" alt="image-20210823002517941"> </p>
<p>当我们在测试时，查询一个数据库不存在的id值，第一次查询缓存中没有，也会查询数据库。而第二次再查询时，会发现，不再查询数据库了，而是直接返回，那也就是说如果根据ID没有查询到数据,那么会自动缓存一个null值。 我们可以通过debug，验证一下： </p>
<p><img src="/assets/image-20210823002907048.png" alt="image-20210823002907048"> </p>
<p>我们能不能做到，当查询到的值不为null时，再进行缓存，如果为null，则不缓存呢? 答案是可以的。</p>
<p><strong>3). 缓存非null值</strong></p>
<p>在@Cacheable注解中，提供了两个属性分别为： condition， unless 。</p>
<blockquote>
<p>condition : 表示满足什么条件, 再进行缓存 ;</p>
<p>unless : 表示满足条件则不缓存 ; 与上述的condition是反向的 ;</p>
</blockquote>
<p>具体实现方式如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="comment"> * value：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment"> * key：缓存的key</span></span><br><span class="line"><span class="comment"> * condition：条件，满足条件时才缓存数据</span></span><br><span class="line"><span class="comment"> * unless：满足条件则不缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;, unless = &quot;#result == null&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意： 此处，我们使用的时候只能够使用 unless， 因为在condition中，我们是无法获取到结果 #result的。&#x3D;&#x3D;</p>
<p><strong>4). 在list方法上加注解@Cacheable</strong></p>
<p>在list方法中进行查询时，有两个查询条件，如果传递了id，根据id查询； 如果传递了name， 根据name查询，那么我们缓存的key在设计的时候，就需要既包含id，又包含name。 具体的代码实现如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#user.id + &#x27;_&#x27; + #user.name&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(user.getId() != <span class="literal">null</span>,User::getId,user.getId());</span><br><span class="line">    queryWrapper.eq(user.getName() != <span class="literal">null</span>,User::getName,user.getName());</span><br><span class="line">    List&lt;User&gt; list = userService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后再次重启服务，进行测试。</p>
<p><img src="/assets/image-20210823005220230.png" alt="image-20210823005220230"> </p>
<p>第一次查询时，需要查询数据库，在后续的查询中，就直接查询了缓存，不再查询数据库了。</p>
<h3 id="4-4-集成Redis"><a href="#4-4-集成Redis" class="headerlink" title="4.4 集成Redis"></a>4.4 集成Redis</h3><p>在使用上述默认的ConcurrentHashMap做缓存时，服务重启之后，之前缓存的数据就全部丢失了，操作起来并不友好。在项目中使用，我们会选择使用redis来做缓存，主要需要操作以下几步： </p>
<p>1). pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.200</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root@123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span>   <span class="comment">#设置缓存过期时间，可选</span></span><br></pre></td></tr></table></figure>



<p>3). 测试</p>
<p>重新启动项目，通过postman发送根据id查询数据的请求，然后通过redis的图形化界面工具，查看redis中是否可以正常的缓存数据。</p>
<p><img src="/assets/image-20210823010810680.png" alt="image-20210823010810680">  </p>
<p><img src="/assets/image-20210823010742530.png" alt="image-20210823010742530"></p>
<h2 id="5-缓存套餐数据"><a href="#5-缓存套餐数据" class="headerlink" title="5. 缓存套餐数据"></a>5. 缓存套餐数据</h2><h3 id="5-1-实现思路"><a href="#5-1-实现思路" class="headerlink" title="5.1 实现思路"></a>5.1 实现思路</h3><p>前面我们已经实现了移动端套餐查看功能，对应的服务端方法为SetmealController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>
<p>具体的实现思路如下：</p>
<p>1). 导入Spring Cache和Redis相关maven坐标</p>
<p>2). 在application.yml中配置缓存数据的过期时间</p>
<p>3). 在启动类上加入@EnableCaching注解，开启缓存注解功能</p>
<p>4). 在SetmealController的list方法上加入@Cacheable注解</p>
<p>5). 在SetmealController的save和delete方法上加入CacheEvict注解</p>
<h3 id="5-2-缓存套餐数据"><a href="#5-2-缓存套餐数据" class="headerlink" title="5.2 缓存套餐数据"></a>5.2 缓存套餐数据</h3><h4 id="5-2-1-代码实现"><a href="#5-2-1-代码实现" class="headerlink" title="5.2.1 代码实现"></a>5.2.1 代码实现</h4><p>1). pom.xml中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;备注: spring-boot-starter-data-redis 这个依赖前面已经引入了, 无需再次引入。&#x3D;&#x3D;</p>
<p>2). application.yml中设置缓存过期时间</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment">#设置缓存数据的过期时间</span></span><br></pre></td></tr></table></figure>



<p>3). 启动类上加入@EnableCaching注解</p>
<p><img src="/assets/image-20210823232419408.png" alt="image-20210823232419408"> </p>
<p>4). SetmealController的list方法上加入@Cacheable注解</p>
<p>在进行套餐数据查询时，我们需要根据分类ID和套餐的状态进行查询，所以我们在缓存数据时，可以将套餐分类ID和套餐状态组合起来作为key，如： 1627182182_1 (1627182182为分类ID，1为状态)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;,key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="5-2-2-测试"><a href="#5-2-2-测试" class="headerlink" title="5.2.2 测试"></a>5.2.2 测试</h4><p>缓存数据的代码编写完毕之后，重新启动服务，访问移动端进行测试，我们登陆之后在点餐界面，点击某一个套餐分类，查询套餐列表数据时，服务端报错了，错误信息如下： </p>
<img src="assets/image-20210823233406888.png" alt="image-20210823233406888" style="zoom:80%;" /> 

<p><img src="/assets/image-20210823233514356.png" alt="image-20210823233514356"> </p>
<p>&#x3D;&#x3D;为什么会报出这个错误呢？&#x3D;&#x3D;</p>
<p>因为 @Cacheable 会将方法的返回值R缓存在Redis中，而在Redis中存储对象，该对象是需要被序列化的，而对象要想被成功的序列化，就必须得实现 Serializable 接口。而当前我们定义的R，并未实现 Serializable 接口。所以，要解决该异常，只需要让R实现  Serializable 接口即可。如下： </p>
<p><img src="/assets/image-20210823233904520.png" alt="image-20210823233904520"> </p>
<p>修复完毕之后，再次重新测试，访问套餐分类下对应的套餐列表数据后，我们会看到Redis中确实可以缓存对应的套餐列表数据。</p>
<p><img src="/assets/image-20210823234146526.png" alt="image-20210823234146526"> </p>
<h3 id="5-3-清理套餐数据"><a href="#5-3-清理套餐数据" class="headerlink" title="5.3 清理套餐数据"></a>5.3 清理套餐数据</h3><h4 id="5-3-1-代码实现"><a href="#5-3-1-代码实现" class="headerlink" title="5.3.1 代码实现"></a>5.3.1 代码实现</h4><p>为了保证数据库中数据与缓存数据的一致性，在我们添加套餐或者删除套餐数据之后，需要清空当前套餐缓存的全部数据。那么@CacheEvict注解如何清除某一份缓存下所有的数据呢，这里我们可以指定@CacheEvict中的一个属性 allEnties，将其设置为true即可。</p>
<p><strong>1). 在delete方法上加注解@CacheEvict</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span> <span class="comment">//清除setmealCache名称下,所有的缓存数据</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 在delete方法上加注解@CacheEvict</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span> <span class="comment">//清除setmealCache名称下,所有的缓存数据</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="5-3-2-测试"><a href="#5-3-2-测试" class="headerlink" title="5.3.2 测试"></a>5.3.2 测试</h4><p>代码编写完成之后,重启工程,然后访问后台管理系统,对套餐数据进行新增 以及 删除, 然后通过Redis的图形化界面工具,查看Redis中的套餐缓存是否已经被删除。</p>
<h3 id="5-4-提交推送代码"><a href="#5-4-提交推送代码" class="headerlink" title="5.4 提交推送代码"></a>5.4 提交推送代码</h3><p>到目前为止，我们已经在v1.0这个分支中完成了套餐数据的缓存，接下来我们就需要将代码提交并推送到远程仓库。</p>
<p><img src="/assets/image-20210823235612400.png" alt="image-20210823235612400"> </p>
<p>然后，在idea中切换到master分支，然后将v1.0分支的代码合并到master。</p>
<p><img src="/assets/image-20210823235822139.png" alt="image-20210823235822139"> </p>
<p>再将合并后的master分支的代码，推送到远程仓库。</p>
<p><img src="/assets/image-20210824000057260.png" alt="image-20210824000057260"> </p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目优化-Day02</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96-Day02/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目优化-Day02"><a href="#瑞吉外卖项目优化-Day02" class="headerlink" title="瑞吉外卖项目优化-Day02"></a>瑞吉外卖项目优化-Day02</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li>MySQL主从复制</li>
<li>读写分离案例</li>
<li>项目实现读写分离</li>
<li>Nginx-概述</li>
<li>Nginx-命令</li>
<li>Nginx-应用</li>
</ul>
<span id="more"></span>



<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>1). 存在的问题</p>
</blockquote>
<p>在前面基础功能实现的过程中，我们后台管理系统及移动端的用户，在进行数据访问时，都是直接操作数据库MySQL的。结构如下图： </p>
<img src="assets/image-20210825100741985.png" alt="image-20210825100741985" style="zoom:80%;" /> 

<p>而在当前，MySQL服务器只有一台，那么就可能会存在如下问题： </p>
<p>1). 读和写所有压力都由一台数据库承担，压力大</p>
<p>2). 数据库服务器磁盘损坏则数据丢失，单点故障</p>
<blockquote>
<p>2). 解决方案</p>
</blockquote>
<p>为了解决上述提到的两个问题，我们可以准备两台MySQL，一台主(Master)服务器，一台从(Slave)服务器，主库的数据变更，需要同步到从库中(主从复制)。而用户在访问我们项目时，如果是写操作(insert、update、delete)，则直接操作主库；如果是读(select)操作，则直接操作从库(在这种读写分离的结构中，从库是可以有多个的)，这种结构我们称为 读写分离 。</p>
<img src="assets/image-20210825101438683.png" alt="image-20210825101438683" style="zoom:80%;" /> 

<p>今天我们就需要实现上述的架构，来解决业务开发中所存在的问题。</p>
<h2 id="1-MySQL主从复制"><a href="#1-MySQL主从复制" class="headerlink" title="1. MySQL主从复制"></a>1. MySQL主从复制</h2><p>MySQL数据库默认是支持主从复制的，不需要借助于其他的技术，我们只需要在数据库中简单的配置即可。接下来，我们就从以下的几个方面，来介绍一下主从复制：</p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>MySQL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的 <strong>二进制日志</strong> 功能。就是一台或多台MySQL数据库（slave，即<strong>从库</strong>）从另一台MySQL数据库（master，即<strong>主库</strong>）进行日志的复制，然后再解析日志并应用到自身，最终实现 <strong>从库</strong> 的数据和 <strong>主库</strong> 的数据保持一致。MySQL主从复制是MySQL数据库自带功能，无需借助第三方工具。</p>
<blockquote>
<p><strong>二进制日志：</strong> </p>
<p>​	二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。默认MySQL是未开启该日志的。</p>
</blockquote>
<p><strong>MySQL的主从复制原理如下：</strong> </p>
<p><img src="/assets/image-20210825110417975.png" alt="image-20210825110417975"> </p>
<p><strong>MySQL复制过程分成三步：</strong></p>
<p>1). MySQL master 将数据变更写入二进制日志( binary log)</p>
<p>2). slave将master的binary log拷贝到它的中继日志（relay log）</p>
<p>3). slave重做中继日志中的事件，将数据变更反映它自己的数据</p>
<h3 id="1-2-搭建"><a href="#1-2-搭建" class="headerlink" title="1.2 搭建"></a>1.2 搭建</h3><h4 id="1-2-1-准备工作"><a href="#1-2-1-准备工作" class="headerlink" title="1.2.1 准备工作"></a>1.2.1 准备工作</h4><p>提前准备两台服务器，并且在服务器中安装MySQL，服务器的信息如下：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>IP</th>
<th>数据库版本</th>
</tr>
</thead>
<tbody><tr>
<td>Master</td>
<td>192.168.200.200</td>
<td>5.7.25</td>
</tr>
<tr>
<td>Slave</td>
<td>192.168.200.201</td>
<td>5.7.25</td>
</tr>
</tbody></table>
<p><strong>并在两台服务器上做如下准备工作:</strong> </p>
<p>1). 防火墙开放3306端口号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210825124800430.png" alt="image-20210825124800430"> </p>
<p>2). 并将两台数据库服务器启动起来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>登录MySQL，验证是否正常启动</p>
<p><img src="/assets/image-20210825111414157.png" alt="image-20210825111414157"> </p>
<h4 id="1-2-2-主库配置"><a href="#1-2-2-主库配置" class="headerlink" title="1.2.2 主库配置"></a>1.2.2 主库配置</h4><blockquote>
<p>服务器： 192.168.200.200</p>
</blockquote>
<p><strong>1). 修改Mysql数据库的配置文件&#x2F;etc&#x2F;my.cnf</strong></p>
<p>在最下面增加配置: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class="line">server-id=200       #[必须]服务器唯一ID(唯一即可)</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210825115719668.png" alt="image-20210825115719668"> </p>
<p><strong>2). 重启Mysql服务</strong></p>
<p>执行指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210825115853116.png" alt="image-20210825115853116"> </p>
<p><strong>3). 创建数据同步的用户并授权</strong></p>
<p>登录mysql，并执行如下指令，创建用户并授权：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;xiaoming&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;Root@123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注：上面SQL的作用是创建一个用户 xiaoming ，密码为 Root@123456 ，并且给xiaoming用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。&#x3D;&#x3D;</p>
<blockquote>
<p>MySQL密码复杂程度说明: </p>
<p>​	<img src="/assets/image-20210825144818269.png" alt="image-20210825144818269"> </p>
<p>​	目前mysql5.7默认密码校验策略等级为 MEDIUM , 该等级要求密码组成为: 数字、小写字母、大写字母 、特殊字符、长度至少8位</p>
</blockquote>
<p><strong>4). 登录Mysql数据库，查看master同步状态</strong></p>
<p>执行下面SQL，记录下结果中<strong>File</strong>和<strong>Position</strong>的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210825120355600.png" alt="image-20210825120355600"> </p>
<p>&#x3D;&#x3D;注：上面SQL的作用是查看Master的状态，执行完此SQL后不要再执行任何操作&#x3D;&#x3D;</p>
<h4 id="1-2-3-从库配置"><a href="#1-2-3-从库配置" class="headerlink" title="1.2.3 从库配置"></a>1.2.3 从库配置</h4><blockquote>
<p>服务器： 192.168.200.201</p>
</blockquote>
<p><strong>1). 修改Mysql数据库的配置文件&#x2F;etc&#x2F;my.cnf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=201 	#[必须]服务器唯一ID</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210825125156597.png" alt="image-20210825125156597"> </p>
<p><strong>2). 重启Mysql服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>



<p><strong>3). 登录Mysql数据库，设置主库地址及同步位置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.200.200&#x27;,master_user=&#x27;xiaoming&#x27;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=154;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明： </p>
<p>​	A. master_host : 主库的IP地址</p>
<p>​	B. master_user : 访问主库进行主从复制的用户名(上面在主库创建的)</p>
<p>​	C. master_password : 访问主库进行主从复制的用户名对应的密码</p>
<p>​	D. master_log_file : 从哪个日志文件开始同步(上述查询master状态中展示的有)</p>
<p>​	E. master_log_pos : 从指定日志文件的哪个位置开始同步(上述查询master状态中展示的有)</p>
</blockquote>
<p><strong>4). 查看从数据库的状态</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<p>然后通过状态信息中的 Slave_IO_running 和 Slave_SQL_running 可以看出主从同步是否就绪，如果这两个参数全为Yes，表示主从同步已经配置完成。</p>
<p> <img src="/assets/image-20210825142313382.png" alt="image-20210825142313382"></p>
<blockquote>
<p>MySQL命令行技巧： </p>
<p>​	\G : 在MySQL的sql语句后加上\G，表示将查询结果进行按列打印，可以使每个字段打印到单独的行。即将查到的结构旋转90度变成纵向；</p>
</blockquote>
<h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>主从复制的环境,已经搭建好了,接下来,我们可以通过Navicat连接上两台MySQL服务器,进行测试。测试时，我们只需要在主库Master执行操作，查看从库Slave中是否将数据同步过去即可。</p>
<p>1). 在master中创建数据库itcast, 刷新slave查看是否可以同步过去</p>
<p><img src="/assets/image-20210825143518383.png" alt="image-20210825143518383"> </p>
<p>2). 在master的itcast数据下创建user表, 刷新slave查看是否可以同步过去</p>
<p><img src="/assets/image-20210825143549689.png" alt="image-20210825143549689"> </p>
<p>3). 在master的user表中插入一条数据, 刷新slave查看是否可以同步过去</p>
<p><img src="/assets/image-20210825143658516.png" alt="image-20210825143658516"> </p>
<h2 id="2-读写分离案例"><a href="#2-读写分离案例" class="headerlink" title="2. 读写分离案例"></a>2. 读写分离案例</h2><h3 id="2-1-背景介绍"><a href="#2-1-背景介绍" class="headerlink" title="2.1 背景介绍"></a>2.1 背景介绍</h3><p>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为<strong>主库</strong>和<strong>从库</strong>，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</p>
<p><img src="/assets/image-20210825145647274.png" alt="image-20210825145647274"> </p>
<p>通过读写分离,就可以降低单台数据库的访问压力, 提高访问效率，也可以避免单机故障。</p>
<p>主从复制的结构，我们在第一节已经完成了，那么我们在项目中，如何通过java代码来完成读写分离呢，如何在执行select的时候查询从库，而在执行insert、update、delete的时候，操作主库呢？这个时候，我们就需要介绍一个新的技术 ShardingJDBC。</p>
<h3 id="2-2-ShardingJDBC介绍"><a href="#2-2-ShardingJDBC介绍" class="headerlink" title="2.2 ShardingJDBC介绍"></a>2.2 ShardingJDBC介绍</h3><p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p>
<p>使用Sharding-JDBC可以在程序中轻松的实现数据库读写分离。</p>
<p>Sharding-JDBC具有以下几个特点： </p>
<p>1). 适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</p>
<p>2). 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</p>
<p>3). 支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</p>
<p>依赖: </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-数据库环境"><a href="#2-3-数据库环境" class="headerlink" title="2.3 数据库环境"></a>2.3 数据库环境</h3><p>在主库中创建一个数据库rw, 并且创建一张表， 该数据库及表结构创建完毕后会自动同步至从数据库，SQL语句如下： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database rw <span class="keyword">default</span> charset utf8mb4;</span><br><span class="line"></span><br><span class="line">use rw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>



<p><img src="/assets/image-20210825160658477.png" alt="image-20210825160658477"> </p>
<h3 id="2-4-初始工程导入"><a href="#2-4-初始工程导入" class="headerlink" title="2.4 初始工程导入"></a>2.4 初始工程导入</h3><p>我们本案例主要是演示一下读写分离操作，对于基本的增删改查的业务操作，我们就不再去编写了，我们可以直接导入资料中提供的demo工程（rw_demo），在demo工程中，我们已经完成了user的增删改查操作，具体的工程结构如下： </p>
<p><img src="/assets/image-20210825161155163.png" alt="image-20210825161155163"> </p>
<h3 id="2-5-读写分离配置"><a href="#2-5-读写分离配置" class="headerlink" title="2.5 读写分离配置"></a>2.5 读写分离配置</h3><p>1). 在pom.xml中增加shardingJdbc的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2). 在application.yml中增加数据源的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.200:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.201:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br></pre></td></tr></table></figure>



<p>配置解析: </p>
<p><img src="/assets/image-20210825162910711.png" alt="image-20210825162910711"> </p>
<p>3). 在application.yml中增加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>该配置项的目的,就是如果当前项目中存在同名的bean,后定义的bean会覆盖先定义的。</p>
<p>&#x3D;&#x3D;如果不配置该项，项目启动之后将会报错：&#x3D;&#x3D; </p>
<p><img src="/assets/image-20210825163737687.png" alt="image-20210825163737687"> </p>
<p>报错信息表明，在声明 org.apache.shardingsphere.shardingjdbc.spring.boot 包下的SpringBootConfiguration中的dataSource这个bean时出错, 原因是有一个同名的 dataSource 的bean在com.alibaba.druid.spring.boot.autoconfigure包下的DruidDataSourceAutoConfigure类加载时已经声明了。</p>
<p><img src="/assets/image-20210825164147056.png" alt="image-20210825164147056"> </p>
<p><img src="/assets/image-20210825164227927.png" alt="image-20210825164227927"> </p>
<p>而我们需要用到的是 shardingjdbc包下的dataSource，所以我们需要配置上述属性，让后加载的覆盖先加载的。</p>
<h3 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6 测试"></a>2.6 测试</h3><p>我们使用shardingjdbc来实现读写分离，直接通过上述简单的配置就可以了。配置完毕之后，我们就可以重启服务，通过postman来访问controller的方法，来完成用户信息的增删改查，我们可以通过debug及日志的方式来查看每一次执行增删改查操作，使用的是哪个数据源，连接的是哪个数据库。</p>
<p><strong>1). 保存数据</strong></p>
<p><img src="/assets/image-20210825170601641.png" alt="image-20210825170601641"> </p>
<p>控制台输出日志，可以看到操作master主库：</p>
<p><img src="/assets/image-20210825172748209.png" alt="image-20210825172748209">  </p>
<p><strong>2). 修改数据</strong></p>
<p><img src="/assets/image-20210825171507059.png" alt="image-20210825171507059"> </p>
<p>控制台输出日志，可以看到操作master主库：</p>
<p><img src="/assets/image-20210825172534790.png" alt="image-20210825172534790">  </p>
<p><strong>3). 查询数据</strong></p>
<p><img src="/assets/image-20210825171609997.png" alt="image-20210825171609997"> </p>
<p>控制台输出日志，可以看到操作slave主库： </p>
<p><img src="/assets/image-20210825171623011.png" alt="image-20210825171623011"> </p>
<p><strong>4). 删除数据</strong></p>
<p><img src="/assets/image-20210825172329600.png" alt="image-20210825172329600"> </p>
<p>控制台输出日志，可以看到操作master主库：</p>
<p><img src="/assets/image-20210825172353414.png" alt="image-20210825172353414"> </p>
<h2 id="3-项目实现读写分离"><a href="#3-项目实现读写分离" class="headerlink" title="3. 项目实现读写分离"></a>3. 项目实现读写分离</h2><h3 id="3-1-数据库环境准备"><a href="#3-1-数据库环境准备" class="headerlink" title="3.1 数据库环境准备"></a>3.1 数据库环境准备</h3><p>直接使用我们前面在虚拟机中搭建的主从复制的数据库环境即可。在主库中创建瑞吉外卖项目的业务数据库reggie, 并导入相关表结构和数据(我们可以将自己之前在本地开发时使用的数据库数据导出, 然后导入到服务器中的主库即可)。</p>
<p><strong>1). 将自己本地的reggie数据库的数据导出SQL文件</strong></p>
<p><img src="/assets/image-20210825175039571.png" alt="image-20210825175039571"> </p>
<p>这样做的话，我们之前自己开发时，添加的测试数据都还在的，便于测试。</p>
<p><strong>2). 在主数据库master中，创建数据库reggie，并导入该SQL文件</strong></p>
<p>master中创建数据库，会自动同步至slave从库</p>
<p><img src="/assets/image-20210825175416295.png" alt="image-20210825175416295"> </p>
<p>在master的reggie中导入sql文件</p>
<p><img src="/assets/image-20210825175747138.png" alt="image-20210825175747138"> </p>
<h3 id="3-2-创建Git分支"><a href="#3-2-创建Git分支" class="headerlink" title="3.2 创建Git分支"></a>3.2 创建Git分支</h3><p>目前默认git中有两个分支master 和 v1.0 ，我们接下来进行读写分离的优化，就不在master和v1.0分支来操作了，我们需要在git上创建一个单独的分支v1.1，读写分离的优化，我们就在该分支上进行操作。具体创建分支的操作，和前面演示的一致。</p>
<p>当前创建的v1.1分支，是基于master分支创建出来的，所以目前master分支的代码， 和v1.1分支的代码是完全一样的，接下来把v1.1的代码也推送至远程仓库。</p>
<h3 id="3-3-读写分离配置"><a href="#3-3-读写分离配置" class="headerlink" title="3.3 读写分离配置"></a>3.3 读写分离配置</h3><p><strong>1). 在项目的pom.xml增加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 在项目的application.yml中配置数据源相关信息</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.200:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.201:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-功能测试"><a href="#3-4-功能测试" class="headerlink" title="3.4 功能测试"></a>3.4 功能测试</h3><p>配置完毕之后，我们启动项目进行测试，直接访问系统管理后台的页面，然后执行相关业务操作，看控制台输出的日志信息即可。</p>
<p>查询操作： </p>
<p><img src="/assets/image-20210825181207319.png" alt="image-20210825181207319"> </p>
<p>更新操作：</p>
<img src="assets/image-20210825181524065.png" alt="image-20210825181524065" style="zoom:80%;" /> 



<p>插入操作：</p>
<img src="assets/image-20210825181915511.png" alt="image-20210825181915511" style="zoom:80%;" /> 



<p>删除操作：</p>
<img src="assets/image-20210825182259837.png" alt="image-20210825182259837" style="zoom:80%;" /> 





<h3 id="3-5-Git合并代码"><a href="#3-5-Git合并代码" class="headerlink" title="3.5 Git合并代码"></a>3.5 Git合并代码</h3><p>读写分离的功能我们已经实现完毕了，那么接下来，我们就可以将当前分支v1.1代码提交并推送到远程仓库。</p>
<img src="assets/image-20210825183830252.png" alt="image-20210825183830252" style="zoom:80%;" /> 

<p><img src="/assets/image-20210825183900307.png" alt="image-20210825183900307"> </p>
<p>然后，再将v1.1的代码，合并到master分支，然后推送至远程仓库。</p>
<p><img src="/assets/image-20210825184018801.png" alt="image-20210825184018801"> </p>
<h2 id="4-Nginx-概述"><a href="#4-Nginx-概述" class="headerlink" title="4. Nginx-概述"></a>4. Nginx-概述</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p><img src="/assets/image-20210829234142590.png" alt="image-20210829234142590"> </p>
<p>Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>Nginx是由<strong>伊戈尔·赛索耶夫</strong>为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>
<p>官网：<a href="https://nginx.org/">https://nginx.org/</a></p>
<h3 id="4-2-下载和安装"><a href="#4-2-下载和安装" class="headerlink" title="4.2 下载和安装"></a>4.2 下载和安装</h3><h4 id="4-2-1-下载"><a href="#4-2-1-下载" class="headerlink" title="4.2.1 下载"></a>4.2.1 下载</h4><p>在Nginx的官网的下载页面中(<a href="http://nginx.org/en/download.html)%EF%BC%8C%E5%B0%B1%E5%B1%95%E7%A4%BA%E4%BA%86%E5%BD%93%E5%89%8DNginx%E7%89%88%E6%9C%AC%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82">http://nginx.org/en/download.html)，就展示了当前Nginx版本，并提供了下载的连接。</a> 如下： </p>
<img src="assets/image-20210829234623737.png" alt="image-20210829234623737" style="zoom:80%;" /> 

<p>在本项目中，我们所学习的Nginx选择的是稳定版本的1.16这个版本，我们可以直接从官网下载，当然在我们的课程资料中也已经提供了该版本的安装包。</p>
<p><img src="/assets/image-20210829235301014.png" alt="image-20210829235301014"> </p>
<h4 id="4-2-2-安装"><a href="#4-2-2-安装" class="headerlink" title="4.2.2 安装"></a>4.2.2 安装</h4><p><strong>1). 安装依赖包</strong></p>
<p>由于nginx是基于c语言开发的，所以需要安装c语言的编译环境，及正则表达式库等第三方依赖库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>



<p><strong>2). 下载Nginx安装包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br><span class="line">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wget : </p>
<p>​	wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。</p>
</blockquote>
<p>执行完wget指令后，就会在当前所在目录看到下载下来的文件。</p>
<p><strong>3). 解压nginx压缩包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>



<p><strong>4). 配置Nginx编译环境</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>说明: </p>
<p>​	–prefix 指定的目录，就是我们安装Nginx的目录。</p>
<p><strong>5). 编译&amp;安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>





<h3 id="4-3-目录结构"><a href="#4-3-目录结构" class="headerlink" title="4.3 目录结构"></a>4.3 目录结构</h3><p>安装完Nginx后，我们可以切换到Nginx的安装目录(&#x2F;usr&#x2F;local&#x2F;nginx)，先来熟悉一下Nginx的目录结构，如下图：</p>
<img src="assets/image-20210830000933352.png" alt="image-20210830000933352" style="zoom:90%;" /> 

<blockquote>
<p>备注： </p>
<p>​	上述我们用到的一个指令 tree，该指令可以将我们指定的目录以树状结构展示出来。如果没有这个指令，可以通过以下指令进行安装。</p>
<p>​	yum install tree</p>
</blockquote>
<p>重点目录和文件如下: </p>
<table>
<thead>
<tr>
<th>目录&#x2F;文件</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>conf</td>
<td>配置文件的存放目录</td>
<td></td>
</tr>
<tr>
<td>conf&#x2F;nginx.conf</td>
<td>Nginx的核心配置文件</td>
<td>conf下有很多nginx的配置文件，我们主要操作这个核心配置文件</td>
</tr>
<tr>
<td>html</td>
<td>存放静态资源(html, css, )</td>
<td>部署到Nginx的静态资源都可以放在html目录中</td>
</tr>
<tr>
<td>logs</td>
<td>存放nginx日志(访问日志、错误日志等)</td>
<td></td>
</tr>
<tr>
<td>sbin&#x2F;nginx</td>
<td>二进制文件，用于启动、停止Nginx服务</td>
<td></td>
</tr>
</tbody></table>
<h2 id="5-Nginx-命令"><a href="#5-Nginx-命令" class="headerlink" title="5. Nginx-命令"></a>5. Nginx-命令</h2><h3 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h3><p>Nginx中，我们的二进制可执行文件(nginx)存放在sbin目录下，虽然只有一个可执行文件，但是我们可以通过该指令配合不同的参数达到更加强大的功能。接下来，我们就演示一下Nginx常见指令, 在执行下面的指令时,都需要在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;目录下执行。</p>
<p><strong>1). 查看版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210830223435585.png" alt="image-20210830223435585"> </p>
<p><strong>2). 检查配置文件</strong></p>
<p>修改了nginx.conf核心配置文件之后，在启动Nginx服务之前，可以先检查一下conf&#x2F;nginx.conf文件配置的是否有错误，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210830223511878.png" alt="image-20210830223511878"> </p>
<p><strong>3). 启动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>启动之后，我们可以通过ps -ef指令来查看nginx的进程是否存在。</p>
<p><img src="/assets/image-20210830224019661.png" alt="image-20210830224019661"> </p>
<p>注意： nginx服务启动后，默认就会有两个进程。</p>
<p>启动之后，我们可以直接访问Nginx的80端口， <a href="http://192.168.200.200/">http://192.168.200.200</a></p>
<img src="assets/image-20210830224605952.png" alt="image-20210830224605952" style="zoom:80%;" /> 



<blockquote>
<p>注意：</p>
<p>​	要想正常访问Nginx，需要关闭防火墙或开放指定端口号，执行的指令如下： </p>
<p>​	A. 关闭防火墙</p>
<p>​		systemctl stop firewalld</p>
<p>​	B. 开放80端口</p>
<p>​		firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p>
<p>​		firewall-cmd –reload</p>
</blockquote>
<p><strong>4). 停止</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>

<p>停止之后，我们可以查看nginx的进程： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210830224121489.png" alt="image-20210830224121489"> </p>
<p><strong>5). 重新加载</strong></p>
<p>当修改了Nginx配置文件后，需要重新加载才能生效，可以使用下面命令重新加载配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>





<h3 id="5-2-环境变量配置"><a href="#5-2-环境变量配置" class="headerlink" title="5.2 环境变量配置"></a>5.2 环境变量配置</h3><p>在上述我们在使用nginx命令在进行服务的启动、停止、重新加载时，都需要用到一个指令nginx，而这个指令是在nginx&#x2F;sbin目录下的，我们每一次使用这个指令都需要切换到sbin目录才可以，使用相对繁琐。那么我们能不能在任意目录下都可以执行该指令来操作nginx呢？答案是可以的，配置nginx的环境变量即可。</p>
<p>通过vim编辑器，打开&#x2F;etc&#x2F;profile文件, 在PATH环境变量中增加nginx的sbin目录，如下： </p>
<p><img src="/assets/image-20210830225544343.png" alt="image-20210830225544343"> </p>
<p>修改完配置文件之后，需要执行 source &#x2F;etc&#x2F;profile 使文件生效。 接下来，我们就可以在任意目录下执行nginx的指令了，如： </p>
<p><img src="/assets/image-20210830225702899.png" alt="image-20210830225702899"> </p>
<h2 id="6-Nginx-应用"><a href="#6-Nginx-应用" class="headerlink" title="6. Nginx-应用"></a>6. Nginx-应用</h2><p>介绍了并安装了Nginx之后，本章节将要讲解的是Nginx的使用，我们主要从以下四个方面进行讲解。</p>
<h3 id="6-1-配置文件结构"><a href="#6-1-配置文件结构" class="headerlink" title="6.1 配置文件结构"></a>6.1 配置文件结构</h3><p>nginx的配置文件(conf&#x2F;nginx.conf)整体上分为三部分: 全局块、events块、http块。这三块的分别配置什么样的信息呢，看下表： </p>
<table>
<thead>
<tr>
<th>区域</th>
<th>职责</th>
</tr>
</thead>
<tbody><tr>
<td>全局块</td>
<td>配置和nginx运行相关的全局配置</td>
</tr>
<tr>
<td>events块</td>
<td>配置和网络连接相关的配置</td>
</tr>
<tr>
<td>http块</td>
<td>配置代理、缓存、日志记录、虚拟主机等配置</td>
</tr>
</tbody></table>
<p>具体结构图如下: </p>
<img src="assets/image-20210830230827686.png" alt="image-20210830230827686" style="zoom:80%;" /> 

<blockquote>
<p>在全局块、events块以及http块中，我们经常配置的是http块。</p>
<p>在http块中可以包含多个server块,每个server块可以配置多个location块。</p>
</blockquote>
<h3 id="6-2-部署静态资源"><a href="#6-2-部署静态资源" class="headerlink" title="6.2 部署静态资源"></a>6.2 部署静态资源</h3><h4 id="6-2-1-介绍"><a href="#6-2-1-介绍" class="headerlink" title="6.2.1 介绍"></a>6.2.1 介绍</h4><p>Nginx可以作为静态web服务器来部署静态资源。这里所说的静态资源是指在服务端真实存在，并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</p>
<p>相对于Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到Nginx中。</p>
<p>将静态资源部署到Nginx非常简单，只需要将文件复制到Nginx安装目录下的html目录中即可。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;				#监听端口	</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;	#服务器名称</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;			#匹配客户端请求url</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html;			#指定静态资源根目录</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;	#指定默认首页</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>





<h4 id="6-2-2-测试"><a href="#6-2-2-测试" class="headerlink" title="6.2.2 测试"></a>6.2.2 测试</h4><p>在资料中，我们提供了一个静态的html文件，我们需要将这个文件部署到nginx中，然后通过nginx访问html静态资源。</p>
<p><strong>1). 将静态资源上传到 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 目录</strong></p>
<p><img src="/assets/image-20210830232238402.png" alt="image-20210830232238402"> </p>
<p><strong>2). 启动nginx</strong></p>
<p><img src="/assets/image-20210830232419462.png" alt="image-20210830232419462"> </p>
<p><strong>3). 访问</strong></p>
<p><a href="http://192.168.200.200/hello.html">http://192.168.200.200/hello.html</a></p>
<img src="assets/image-20210830232529524.png" alt="image-20210830232529524" style="zoom:80%;" /> 



<p><a href="http://192.168.200.200/">http://192.168.200.200</a> ， 访问该地址，访问的是nginx的默认首页</p>
<img src="assets/image-20210830232857289.png" alt="image-20210830232857289" style="zoom:81%;" /> 



<p><strong>4). 配置首页</strong></p>
<p><img src="/assets/image-20210830232720821.png" alt="image-20210830232720821"> </p>
<p>如果我们需要将hello.html作为nginx的首页，可以修改location的index指令，配置为hello.html，如下：</p>
<p><img src="/assets/image-20210830233019489.png" alt="image-20210830233019489"> </p>
<p>配置完毕后，我们可以通过指令，来检查配置文件是否配置正确： nginx -t</p>
<p><img src="/assets/image-20210830233122708.png" alt="image-20210830233122708"> </p>
<p>配置文件修改了，我们需要重新加载一下，才可以生效： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>



<p><strong>5). 访问</strong></p>
<p><a href="http://192.168.200.200/">http://192.168.200.200</a></p>
<img src="assets/image-20210830233336916.png" alt="image-20210830233336916" style="zoom:80%;" /> 





<h3 id="6-3-反向代理"><a href="#6-3-反向代理" class="headerlink" title="6.3 反向代理"></a>6.3 反向代理</h3><h4 id="6-3-1-概念介绍"><a href="#6-3-1-概念介绍" class="headerlink" title="6.3.1 概念介绍"></a>6.3.1 概念介绍</h4><p>1). 正向代理</p>
<p>正向代理服务器是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p>
<p>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</p>
<p>正向代理一般是<strong>在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。</p>
<p><img src="/assets/image-20210830233450415.png" alt="image-20210830233450415"> </p>
<p>2). 反向代理</p>
<p>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。用户不需要知道目标服务器的地址，也无须在用户端作任何设定，对于用户来说，访问反向代理服务器是完全无感知的。</p>
<p><img src="/assets/image-20210830233634695.png" alt="image-20210830233634695"> </p>
<p>那么在本小节，我们就是要使用nginx来作为反向代理服务器使用。 在nginx中，我们可以在nginx.conf中配置反向代理: </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">82;</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://192.168.200.201:8080; 	#反向代理配置，将请求转发到指定服务</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>上述配置的含义为: 当我们访问nginx的82端口时，根据反向代理配置，会将请求转发到 <a href="http://192.168.200.201:8080/">http://192.168.200.201:8080</a> 对应的服务上。</p>
<h4 id="6-3-2-测试"><a href="#6-3-2-测试" class="headerlink" title="6.3.2 测试"></a>6.3.2 测试</h4><p>需求: 在192.168.200.201这台服务器中部署了java应用，运行端口为8080，并提供了一个可访问的链接 &#x2F;hello。现在我们需要在访问nginx的82端口时，通过nginx将请求转发到192.168.200.201:8080的服务。</p>
<img src="assets/image-20210830235803013.png" alt="image-20210830235803013" style="zoom:67%;" /> 



<p><strong>1). 在192.168.200.201部署服务并启动</strong></p>
<p>将资料中提供的 helloworld-1.0-SNAPSHOT.jar 上传到服务器端，并通过指令 java -jar helloworld-1.0-SNAPSHOT.jar 运行服务。</p>
<p><img src="/assets/image-20210831000152199.png" alt="image-20210831000152199"> </p>
<p><strong>2). 在192.168.200.200中的nginx.conf中配置反向代理</strong></p>
<p>进入nginx的安装目录，并编辑配置文件nginx.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>



<p>在http块中,再添加一个server块虚拟主机的配置,监听82端口,并配置反向代理proxy_pass: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 82;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.200.201:8080; 	#反向代理配置，将请求转发到指定服务</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="assets/image-20210831000747805.png" alt="image-20210831000747805" style="zoom:80%;" /> 





<p><strong>3). 检查配置文件，并重新加载</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210831001021252.png" alt="image-20210831001021252"> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>



<p><strong>4). 访问</strong></p>
<p><img src="/assets/image-20210831001347257.png" alt="image-20210831001347257"> </p>
<p>&#x3D;&#x3D;注意: 在访问82端口时，有可能访问不通，原因是以为防火墙中没有开放端口号。我们可以通过两种方式来解决该问题：&#x3D;&#x3D; </p>
<p>&#x3D;&#x3D;A. 关闭防火墙&#x3D;&#x3D; </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;B. 开发指定端口&#x3D;&#x3D;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=82/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>







<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><h4 id="6-4-1-概念介绍"><a href="#6-4-1-概念介绍" class="headerlink" title="6.4.1 概念介绍"></a>6.4.1 概念介绍</h4><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p>
<p><strong>应用集群：</strong>将同一应用部署到多台机器上，组成应用集群，接收负载均衡器分发的请求，进行业务处理并返回响应数据</p>
<p><strong>负载均衡器：</strong>将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</p>
<img src="assets/image-20210831080743617.png" alt="image-20210831080743617" style="zoom:80%;" />  

<p>此处的负载均衡器，我们将会使用Nginx来实现，而Nginx的负载均衡是基于反向代理的，只不过此时所代理的服务器不是一台，而是多台。</p>
<h4 id="6-4-2-测试"><a href="#6-4-2-测试" class="headerlink" title="6.4.2 测试"></a>6.4.2 测试</h4><p><strong>1). 将资料中提供的两个jar包，上传到192.168.200.201服务器上</strong></p>
<table>
<thead>
<tr>
<th>jar</th>
<th>运行端口</th>
<th>请求链接</th>
<th>响应数据</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/assets/image-20210831081023098.png" alt="image-20210831081023098"></td>
<td>8080</td>
<td>&#x2F;hello</td>
<td>8080</td>
</tr>
<tr>
<td><img src="/assets/image-20210831081038807.png" alt="image-20210831081038807"></td>
<td>8081</td>
<td>&#x2F;hello</td>
<td>8081</td>
</tr>
</tbody></table>
<blockquote>
<p>我们在测试时，并没有那么多服务器，我们可以在一台服务器中启动多个服务，运行在不同的端口号上进行测试。</p>
</blockquote>
<p><strong>2). 运行上传上来的两个jar包，运行端口分别是 8080 ， 8081</strong></p>
<p>由于我们执行 java -jar 指令会占用前台窗口，所以我们可以开启两个窗口进行测试。</p>
<p> <img src="/assets/image-20210831081513575.png" alt="image-20210831081513575"></p>
<p> <img src="/assets/image-20210831081544582.png" alt="image-20210831081544582"></p>
<p><strong>3). 在nginx中配置负载均衡</strong></p>
<p>打开nginx的配置文件nginx.conf并增加如下配置: </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#upstream指令可以定义一组服务器</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">targetserver&#123;	</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8080;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8081;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>       <span class="string">8080;</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://targetserver;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>



<p>具体的配置位置如下: </p>
<p><img src="/assets/image-20210831081939508.png" alt="image-20210831081939508"> </p>
<p><strong>4). 重新加载nginx配置文件,访问</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>测试时,我们直接访问nginx的8080端口(<a href="http://192.168.200.200:8080/">http://192.168.200.200:8080</a>), 此时nginx会根据负载均衡策略,将请求转发到后面的两台服务器。</p>
<p><img src="/assets/image-20210831082339085.png" alt="image-20210831082339085"> </p>
<p>在上述的测试过程中，我们看到请求均衡的转发到了8080和8081，因为模式的负载均衡策略是轮询。</p>
<p><font color="red" size="5">注意: 上述所有涉及到的端口号，都需要在对应的服务器的防火墙中开放，或者彻底关闭防火墙</font></p>
<h4 id="6-4-3-负载均衡策略"><a href="#6-4-3-负载均衡策略" class="headerlink" title="6.4.3 负载均衡策略"></a>6.4.3 负载均衡策略</h4><p>处理上述默认的轮询策略以外，在Nginx中还提供了其他的负载均衡策略，如下： </p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>默认方式</td>
<td></td>
</tr>
<tr>
<td>weight</td>
<td>权重方式</td>
<td>根据权重分发请求,权重大的分配到请求的概率大</td>
</tr>
<tr>
<td>ip_hash</td>
<td>依据ip分配方式</td>
<td>根据客户端请求的IP地址计算hash值， 根据hash值来分发请求, 同一个IP发起的请求, 会发转发到同一个服务器上</td>
</tr>
<tr>
<td>least_conn</td>
<td>依据最少连接方式</td>
<td>哪个服务器当前处理的连接少, 请求优先转发到这台服务器</td>
</tr>
<tr>
<td>url_hash</td>
<td>依据url分配方式</td>
<td>根据客户端请求url的hash值，来分发请求, 同一个url请求, 会发转发到同一个服务器上</td>
</tr>
<tr>
<td>fair</td>
<td>依据响应时间方式</td>
<td>优先把请求分发给处理请求时间短的服务器</td>
</tr>
</tbody></table>
<p>权重的配置： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#upstream指令可以定义一组服务器</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">targetserver&#123;	</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8080 weight=10;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">192.168.200.201:8081 weight=5;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>上述配置的weight权重是相对的，在上述的配置中，效果就是，在大数据量的请求下，最终8080接收的请求数是8081的两倍。</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目优化-Day03</title>
    <url>/2022/08/03/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96-Day03/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目优化-Day03"><a href="#瑞吉外卖项目优化-Day03" class="headerlink" title="瑞吉外卖项目优化-Day03"></a>瑞吉外卖项目优化-Day03</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li><p>前后端分离开发</p>
</li>
<li><p>Yapi</p>
</li>
<li><p>Swagger</p>
</li>
<li><p>项目部署</p>
</li>
</ul>
<span id="more"></span>





<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>当前项目中，前端代码和后端代码混合在一起，是存在问题的，存在什么问题呢？</p>
</blockquote>
<p><img src="/assets/image-20210831232554721.png" alt="image-20210831232554721"> </p>
<p>主要存在以下几点问题： </p>
<p>1). 开发人员同时负责前端和后端代码开发，分工不明确</p>
<p>2). 开发效率低</p>
<p>3). 前后端代码混合在一个工程中，不便于管理</p>
<p>4). 对开发人员要求高(既会前端，又会后端)，人员招聘困难</p>
<p>为了解决上述提到的问题，现在比较主流的开发方式，就是<strong>前后端分离开发</strong>，前端人员开发前端的代码，后端开发人员开发服务端的业务功能，分工明确，各司其职。我们本章节，就是需要将之前的项目进行优化改造，变成前后端分离开发的项目。</p>
<h2 id="1-前后端分离开发"><a href="#1-前后端分离开发" class="headerlink" title="1. 前后端分离开发"></a>1. 前后端分离开发</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><strong>前后端分离开发</strong>，就是在项目开发过程中，对于前端代码的开发由专门的前端开发人员负责，后端代码则由后端开发人员负责，这样可以做到分工明确、各司其职，提高开发效率，前后端代码并行开发，可以加快项目开发进度。</p>
<p>目前，前后端分离开发方式已经被越来越多的公司所采用，成为当前项目开发的主流开发方式。</p>
<p>前后端分离开发后，从工程结构上也会发生变化，即前后端代码不再混合在同一个maven工程中，而是分为 <strong>前端工程</strong> 和 <strong>后端工程</strong> 。</p>
<p><img src="/assets/image-20210901082121874.png" alt="image-20210901082121874"> </p>
<p>前后端分离之后，不仅工程结构变化，后期项目上线部署时，与之前也不同:</p>
<p>1). 之前: 前后端代码都混合在一起，我们只需要将前端和后端的代码统一打成jar包，直接运行就可以了。 </p>
<p>2). 现在: 拆分为前后端分离的项目后，最终部署时，后端工程会打成一个jar包，运行在Tomcat中(springboot内嵌的tomcat)。前端工程的静态资源，会直接部署在Nginx中进行访问。</p>
<h3 id="1-2-开发流程"><a href="#1-2-开发流程" class="headerlink" title="1.2 开发流程"></a>1.2 开发流程</h3><p>前后端分离开发后，面临一个问题，就是前端开发人员和后端开发人员如何进行配合来共同开发一个项目？可以按照如下流程进行：</p>
<p><img src="/assets/image-20210901084945348.png" alt="image-20210901084945348">            <img src="/assets/image-20210901085057990.png" alt="image-20210901085057990"> </p>
<p>1). 定制接口: 这里所说的接口不是我们之前在service， mapper层定义的interface； 这里的接口(API接口)就是一个http的请求地址，主要就是去定义：请求路径、请求方式、请求参数、响应数据等内容。(具体接口文档描述的信息, 如上图)</p>
<p>2). 前后端并行开发: 依据定义好的接口信息，前端人员开发前端的代码，服务端人员开发服务端的接口； 在开发中前后端都需要进行测试，后端需要通过对应的工具来进行接口的测试，前端需要根据接口定义的参数进行Mock数据模拟测试。</p>
<p>3). 联调: 当前后端都开发完毕并且自测通过之后，就可以进行前后端的联调测试了，在这一阶段主要就是校验接口的参数格式。</p>
<p>4). 提测: 前后端联调测试通过之后，就可以将项目部署到测试服务器，进行自动化测试了。</p>
<h3 id="1-3-前端技术栈"><a href="#1-3-前端技术栈" class="headerlink" title="1.3 前端技术栈"></a>1.3 前端技术栈</h3><p><strong>1). 开发工具</strong></p>
<p>Visual Studio Code (简称VsCode)</p>
<p>Hbuilder</p>
<p><strong>2). 技术框架</strong></p>
<p>A. Node.js:  Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。(类似于java语言中的JDK)。</p>
<p>B. Vue : 目前最火的的一个前端javaScript框架。</p>
<p>C. ElementUI: 一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库，通过ElementUI组件可以快速构建项目页面。</p>
<p>D. Mock: 生成随机数据，拦截 Ajax 请求，前端可以借助于Mock生成测试数据进行功能测试。</p>
<p>E. Webpack: webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>
<h2 id="2-Yapi"><a href="#2-Yapi" class="headerlink" title="2. Yapi"></a>2. Yapi</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p><img src="/assets/image-20210901110936381.png" alt="image-20210901110936381"> </p>
<p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p>
<p>YApi让接口开发更简单高效，让接口的管理更具可读性、可维护性，让团队协作更合理。</p>
<p>源码地址: <a href="https://github.com/YMFE/yapi">https://github.com/YMFE/yapi</a></p>
<p>官方文档: <a href="https://hellosean1025.github.io/yapi/">https://hellosean1025.github.io/yapi/</a></p>
<p>要使用YApi，项目组需要自己进行部署，在本项目中我们可以使用课程提供的平台进行测试，域名： <a href="https://mock-java.itheima.net/">https://mock-java.itheima.net/</a></p>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><h4 id="2-2-1-准备"><a href="#2-2-1-准备" class="headerlink" title="2.2.1 准备"></a>2.2.1 准备</h4><p>注册账号，登录平台</p>
<p><img src="/assets/image-20210901115408908.png" alt="image-20210901115408908"> </p>
<h4 id="2-2-2-定义接口"><a href="#2-2-2-定义接口" class="headerlink" title="2.2.2 定义接口"></a>2.2.2 定义接口</h4><p>登录到Yapi平台之后，我们可以创建项目，在项目下创建接口分类，在对应的分类中添加接口。</p>
<p> 1). 创建项目</p>
<p><img src="/assets/image-20210901123709298.png" alt="image-20210901123709298"> </p>
<p><img src="/assets/image-20210901124623325.png" alt="image-20210901124623325"> </p>
<p>2). 添加分类</p>
<p>在当前项目中,有针对于员工、菜品、套餐、订单的操作，我们在进行接口维护时，可以针对接口进行分类，如果没有对应的分类，我们自己添加分类。</p>
<p><img src="/assets/image-20210901125311166.png" alt="image-20210901125311166"> </p>
<p>3). 添加接口</p>
<p><img src="/assets/image-20210901125517274.png" alt="image-20210901125517274"> </p>
<p>接口基本信息录入之后，添加提交，就可以看到该接口的基本信息：</p>
<p><img src="/assets/image-20210901125617777.png" alt="image-20210901125617777">  </p>
<p>但是目前，接口中我们并未指定请求参数，响应数据等信息，我们可以进一步点击编辑，对该接口 详情进行编辑处理。</p>
<p><img src="/assets/image-20210901140052897.png" alt="image-20210901140052897"> </p>
<p>4). 运行接口</p>
<p>Yapi也提供了接口测试功能，当我们接口编辑完毕后，后端服务的代码开发完毕，启动服务，就可以使用Yapi进行接口测试了。</p>
<p><img src="/assets/image-20210901140924816.png" alt="image-20210901140924816"> </p>
<p><font color='red'>注意： 由于菜品分页查询接口，是需要登录后才可以访问的，所以在测试该接口时，需要先请求员工管理接口中的登录接口，登录完成后，再访问该接口。</font></p>
<p>在Yapi平台中，将接口文档定义好了之后，前后端开发人员就需要根据接口文档中关于接口的描述进行前端和后端功能的开发。</p>
<h4 id="2-2-3-导出接口文档"><a href="#2-2-3-导出接口文档" class="headerlink" title="2.2.3 导出接口文档"></a>2.2.3 导出接口文档</h4><p>在Yapi平台中我们不仅可以在线阅读文档，还可以将Yapi中维护的文档直接导出来，可以导出md，json，html格式，在导出时自行选择即可 。</p>
<p><img src="/assets/image-20210901150153468.png" alt="image-20210901150153468"> </p>
<p>而在导出的html文件或md文件中，主要描述的就是接口的基本信息， 包括： 请求路径、请求方式、接口描述、请求参数、返回数据等信息。展示形式如下： </p>
<img src="assets/image-20210901150401976.png" alt="image-20210901150401976" style="zoom: 80%;" /> 





<h4 id="2-2-4-导入接口文档"><a href="#2-2-4-导入接口文档" class="headerlink" title="2.2.4 导入接口文档"></a>2.2.4 导入接口文档</h4><p>上述我们讲解了接口文档的导出，我们也可以将外部的接口文档导入到Yapi的平台中，这样我们就不用一个接口一个接口的添加了。我们可以将课程资料中提供的json格式的接口文档直接导入Yapi平台中来。</p>
<img src="assets/image-20210901151127926.png" alt="image-20210901151127926" style="zoom:80%;" /> 

<p>导入过程中出现的确认弹窗，选择”确认”。</p>
<img src="assets/image-20210901151508478.png" alt="image-20210901151508478" style="zoom:80%;" /> 

<p>导入成功之后，我们就可以在Yapi平台查看到已导入的接口。</p>
<p><img src="/assets/image-20210901151721356.png" alt="image-20210901151721356"> </p>
<h2 id="3-Swagger"><a href="#3-Swagger" class="headerlink" title="3. Swagger"></a>3. Swagger</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p>
<p><img src="/assets/image-20210901160434736.png" alt="image-20210901160434736"> </p>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。功能主要包含以下几点:</p>
<p>A. 使得前后端分离开发更加方便，有利于团队协作</p>
<p>B. 接口文档在线自动生成，降低后端开发人员编写接口文档的负担</p>
<p>C. 接口功能测试</p>
<p>使用Swagger只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，以及在线接口调试页面等等。</p>
<p>直接使用Swagger, 需要按照Swagger的规范定义接口, 实际上就是编写Json文件，编写起来比较繁琐、并不方便, 。而在项目中使用，我们一般会选择一些现成的框架来简化文档的编写，而这些框架是基于Swagger的，如knife4j。knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案。而我们要使用kinfe4j，需要在pom.xml中引入如下依赖即可： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h3><p>接下来，我们就将我们的项目集成Knife4j，来自动生成接口文档。这里我们还是需要再创建一个新的分支v1.2，在该分支中进行knife4j的集成，集成测试完毕之后，没有问题，我们再将v1.2分支合并到master。</p>
<p>使用knife4j，主要需要操作以下几步:</p>
<p><strong>1). 导入knife4j的maven坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 导入knife4j相关配置类</strong></p>
<p>这里我们就不需要再创建一个新的配置类了，我们直接在WebMvcConfig配置类中声明即可。</p>
<p>A. 在该配置类中加上两个注解 @EnableSwagger2 @EnableKnife4j ,开启Swagger和Knife4j的功能。</p>
<p>B. 在配置类中声明一个Docket类型的bean, 通过该bean来指定生成文档的信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 文档类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.itheima.reggie.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： Docket声明时，指定的有一个包扫描的路径，该路径指定的是Controller所在包的路径。因为Swagger在生成接口文档时，就是根据这里指定的包路径，自动的扫描该包下的@Controller， @RestController， @RequestMapping等SpringMVC的注解，依据这些注解来生成对应的接口文档。</p>
</blockquote>
<p><strong>3). 设置静态资源映射</strong></p>
<p>由于Swagger生成的在线文档中，涉及到很多静态资源，这些静态资源需要添加静态资源映射，否则接口文档页面无法访问。因此需要在 WebMvcConfig类中的addResourceHandlers方法中增加如下配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><strong>4). 在LoginCheckFilter中设置不需要处理的请求路径</strong></p>
<p>需要将Swagger及Knife4j相关的静态资源直接放行，无需登录即可访问，否则我们就需要登录之后，才可以访问接口文档的页面。</p>
<p>在原有的不需要处理的请求路径中，再增加如下链接： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/doc.html&quot;</span>,</span><br><span class="line"><span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/swagger-resources&quot;</span>,</span><br><span class="line"><span class="string">&quot;/v2/api-docs&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210901171132242.png" alt="image-20210901171132242"> </p>
<h3 id="3-3-查看接口文档"><a href="#3-3-查看接口文档" class="headerlink" title="3.3 查看接口文档"></a>3.3 查看接口文档</h3><p>经过上面的集成配置之后，我们的项目集成Swagger及Knife4j就已经完成了，接下来我们可以重新启动项目，访问接口文档，访问链接为： <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p>
<p><img src="/assets/image-20210901200739975.png" alt="image-20210901200739975"> </p>
<p>我们可以看到，在所有的Controller中提供的所有的业务增删改查的接口，全部都已经自动生成了，我们通过接口文档可以看到请求的url、请求方式、请求参数、请求实例、响应的参数，响应的示例。 并且呢，我们也可以通过这份在线的接口文档，对接口进行测试。</p>
<p><img src="/assets/image-20210901201229838.png" alt="image-20210901201229838"> </p>
<p>注意： 由于我们服务端的Controller中的业务增删改查的方法，都是必须登录之后才可以访问的，所以，我们在测试时候，也是需要先访问登录接口。登录完成之后，我们可以再访问其他接口进行测试。</p>
<p>我们不仅可以在浏览器浏览生成的接口文档，Knife4j还支持离线文档，对接口文档进行下载，支持下载的格式有：markdown、html、word、openApi。</p>
<p><img src="/assets/image-20210901214706928.png" alt="image-20210901214706928"> </p>
<h3 id="3-4-常用注解"><a href="#3-4-常用注解" class="headerlink" title="3.4 常用注解"></a>3.4 常用注解</h3><h4 id="3-4-1-问题说明"><a href="#3-4-1-问题说明" class="headerlink" title="3.4.1 问题说明"></a>3.4.1 问题说明</h4><p>在上面我们直接访问Knife4j的接口文档页面，可以查看到所有的接口文档信息，但是我们发现，这些接口文档分类及接口描述都是Controller的类名(驼峰命名转换而来)及方法名，而且在接口文档中，所有的请求参数，响应数据，都没有中文的描述，并不知道里面参数的含义，接口文档的可读性很差。</p>
<p><img src="/assets/image-20210901215244539.png" alt="image-20210901215244539"> </p>
<h4 id="3-4-2-注解介绍"><a href="#3-4-2-注解介绍" class="headerlink" title="3.4.2 注解介绍"></a>3.4.2 注解介绍</h4><p>为了解决上述的问题，Swagger提供了很多的注解，通过这些注解，我们可以更好更清晰的描述我们的接口，包含接口的请求参数、响应数据、数据模型等。核心的注解，主要包含以下几个： </p>
<table>
<thead>
<tr>
<th>注解</th>
<th>位置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Api</td>
<td>类</td>
<td>加载Controller类上,表示对类的说明</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>类(通常是实体类)</td>
<td>描述实体类的作用</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>属性</td>
<td>描述实体类的属性</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>方法</td>
<td>说明方法的用途、作用</td>
</tr>
<tr>
<td>@ApiImplicitParams</td>
<td>方法</td>
<td>表示一组参数说明</td>
</tr>
<tr>
<td>@ApiImplicitParam</td>
<td>方法</td>
<td>用在@ApiImplicitParams注解中，指定一个请求参数的各个方面的属性</td>
</tr>
</tbody></table>
<h4 id="3-4-3-注解测试"><a href="#3-4-3-注解测试" class="headerlink" title="3.4.3 注解测试"></a>3.4.3 注解测试</h4><p><strong>1). 实体类</strong></p>
<blockquote>
<p>可以通过 @ApiModel , @ApiModelProperty 来描述实体类及属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;主键&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;分类id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;套餐名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;套餐价格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;状态&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;套餐编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;描述信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;图片&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 响应实体R</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;编码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;动态数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//省略静态方法 ....</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>





<p><strong>3). Controller类及其中的方法</strong></p>
<blockquote>
<p>描述Controller、方法及其方法参数，可以通过注解： @Api， @APIOperation， @ApiImplicitParams, @ApiImplicitParam</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;新增套餐接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>,setmealDto);</span><br><span class="line"></span><br><span class="line">        setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增套餐成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;套餐分页查询接口&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;page&quot;,value = &quot;页码&quot;,required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;pageSize&quot;,value = &quot;每页记录数&quot;,required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;name&quot;,value = &quot;套餐名称&quot;,required = false)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line">        <span class="comment">//分页构造器对象</span></span><br><span class="line">        Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">        List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">            <span class="comment">//对象拷贝</span></span><br><span class="line">            BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">            <span class="comment">//分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">            <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//分类名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                setmealDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> setmealDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        dtoPage.setRecords(list);</span><br><span class="line">        <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;套餐删除接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>,ids);</span><br><span class="line"></span><br><span class="line">        setmealService.removeWithDish(ids);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;套餐数据删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;setmealCache&quot;,key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;套餐条件查询接口&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">        queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>4). 重启服务测试</strong></p>
<p>我们上述通过Swagger的注解，对实体类及实体类中的属性，以及Controller和Controller的方法进行描述，接下来，我们重新启动服务，然后看一下自动生成的接口文档有何变化。</p>
<p><img src="/assets/image-20210901221213897.png" alt="image-20210901221213897"> </p>
<p>在接口文档的页面中，我们可以看到接口的中文描述，清晰的看到每一个接口是做什么的，接口方法参数什么含义，参数是否是必填的，响应结果的参数是什么含义等，都可以清楚的描述出来。</p>
<p>总之，我们要想清晰的描述一个接口，就需要借助于Swagger给我们提供的注解。</p>
<h2 id="4-项目部署"><a href="#4-项目部署" class="headerlink" title="4. 项目部署"></a>4. 项目部署</h2><p>在本章节，我们要做的是项目的部署，包含前端项目的部署，及后端项目的部署。</p>
<h3 id="4-1-部署架构"><a href="#4-1-部署架构" class="headerlink" title="4.1 部署架构"></a>4.1 部署架构</h3><p><img src="/assets/image-20210901221425159.png" alt="image-20210901221425159"> </p>
<p>PC端： 主要是为餐厅的员工及管理员使用的后台管理系统，对分类、菜品、套餐信息进行维护。</p>
<p>移动端： 可以基于微信公众号或小程序实现，我们课上并未实现，这部分的工作是前端开发人员需要开发的。</p>
<p>前端部署服务器： Nginx</p>
<p>后端部署服务器： Tomcat(内嵌)</p>
<h3 id="4-2-环境说明"><a href="#4-2-环境说明" class="headerlink" title="4.2 环境说明"></a>4.2 环境说明</h3><p>由于我们的服务器数量有限，就使用这三台服务器，具体的软件规划如下: </p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>软件</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.138.100</td>
<td>Nginx(部署前端项目、配置反向代理)，MySQL(主从复制的主库)</td>
<td>服务器A</td>
</tr>
<tr>
<td>192.168.138.101</td>
<td>JDK1.8、Git、Maven、jar(项目jar包基于内嵌Tomcat运行)、MySQL(主从复制的从库)</td>
<td>服务器B</td>
</tr>
<tr>
<td>172.17.2.94</td>
<td>Redis(缓存中间件)</td>
<td>服务器C</td>
</tr>
</tbody></table>
<p>由于我们前面的课程中Nginx、MySQL的主从复制、Redis、JDK、Git、Maven都已经演示过安装及配置了，这里我们就不再演示软件的安装了。</p>
<h3 id="4-3-前端部署"><a href="#4-3-前端部署" class="headerlink" title="4.3 前端部署"></a>4.3 前端部署</h3><p><strong>1). 在服务器A(192.168.138.100)中安装Nginx，将课程资料中的dist目录上传到Nginx的html目录下</strong></p>
<p><img src="/assets/image-20210901231943256.png" alt="image-20210901231943256"> </p>
<p>将整个dist目录上传至&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html目录下</p>
<p><img src="/assets/image-20210901231924028.png" alt="image-20210901231924028"> </p>
<p><strong>2). 修改Nginx配置文件nginx.conf</strong></p>
<p>将nginx.conf配置文件中，将原有的监听80, 82, 8080端口号 的虚拟主机注释掉，引入如下的配置信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line">  <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">      <span class="attr">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">          <span class="attr">root</span>   <span class="string">html/dist;</span></span><br><span class="line">          <span class="attr">index</span>  <span class="string">index.html;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">	<span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">	<span class="attr">proxy_pass</span> <span class="string">http://192.168.138.101:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">location</span> = <span class="string">/50x.html &#123;</span></span><br><span class="line">          <span class="attr">root</span>   <span class="string">html;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210901232931577.png" alt="image-20210901232931577"> </p>
<p><strong>3). 通过nginx访问前端工程</strong></p>
<p><a href="http://192.168.138.100/">http://192.168.138.100</a></p>
<p><img src="/assets/image-20210901233135468.png" alt="image-20210901233135468"> </p>
<h3 id="4-4-反向代理配置"><a href="#4-4-反向代理配置" class="headerlink" title="4.4 反向代理配置"></a>4.4 反向代理配置</h3><p>前端工程部署完成之后，我们可以正常的访问到系统的登录页面，点击登录按钮，可以看到服务端发起的请求，请求信息如下： </p>
<p><img src="/assets/image-20210901234142706.png" alt="image-20210901234142706"> </p>
<p>而大家知道，在我们之前开发的工程中，是没有&#x2F;api这个前缀的,那这个时候,在不修改服务端代码的情况下，如何处理该请求呢? </p>
<p>实际上，通过nginx的就可以轻松解决这个问题。</p>
<p>在上述我们配置的nginx.conf中，除了配置了静态资源的加载目录以外，我们还配置了一段反向代理的配置，配置信息如下： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">    <span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">    <span class="attr">proxy_pass</span> <span class="string">http://192.168.138.101:8080;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这一段配置代表，如果请求当前nginx，并且请求的路径如果是 &#x2F;api&#x2F; 开头，将会被该location处理。而在该location中，主要配置了两块儿信息： rewrite(url重写) 和 proxy_pass(反向代理)。 接下来我们就来解析一下这两项的配置。</p>
<p><strong>1). 路径重写rewrite</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rewrite ^/api/(.*)$ /$1 break;</span><br></pre></td></tr></table></figure>

<p>这里写的是一个正则表达式，代表如果请求路径是以 <code>/api/</code> 开头，后面的请求路径任意，此时将原始的url路径重写为 <code>/$1</code>，这里的<code>$1</code>指代的就是通配符 .* 这一块的内容。比如： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/api/employee/login ------&gt; ^/api/(.*)$ --------&gt; 此时 (.*) 匹配的就是 employee/login ------&gt; 最终重写为/$1 : /employee/login</span><br></pre></td></tr></table></figure>



<p><strong>2). 反向代理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://192.168.138.101:8080;</span><br></pre></td></tr></table></figure>

<p>路径重写后的请求，将会转发到后端的 <a href="http://192.168.138.101:8080/">http://192.168.138.101:8080</a> 服务器中。 而这台服务器中，就部署的是我们的后端服务。</p>
<h3 id="4-5-服务端部署"><a href="#4-5-服务端部署" class="headerlink" title="4.5 服务端部署"></a>4.5 服务端部署</h3><p><strong>1). 在服务器B(192.168.138.101)中安装jdk、git、maven、MySQL，使用git clone命令将git远程仓库的代码克隆下来</strong></p>
<p>A. 确认JDK环境</p>
<p><img src="/assets/image-20210902002307537.png" alt="image-20210902002307537"> </p>
<p>B. 确认Git环境</p>
<p><img src="/assets/image-20210902002328883.png" alt="image-20210902002328883"> </p>
<p>C. 确认Maven环境</p>
<p><img src="/assets/image-20210902002357900.png" alt="image-20210902002357900"> </p>
<p>D. 将我们开发完成的代码推送至远程仓库,并在服务器B中克隆下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建java代码存放目录</span></span><br><span class="line">mkdir -p /usr/local/javaapp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换目录</span></span><br><span class="line">cd /usr/local/javaapp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">克隆代码 , 需要使用自己的远程仓库</span></span><br><span class="line">git clone https://gitee.com/ChuanZhiBoKe/reggie_take_out.git </span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210902004033417.png" alt="image-20210902004033417">  </p>
<p><strong>2). 将资料中提供的reggieStart.sh文件上传到服务器B，通过chmod命令设置执行权限</strong></p>
<p><img src="/assets/image-20210902004308106.png" alt="image-20210902004308106"> </p>
<p><strong>3). 执行reggieStart.sh脚本文件，自动部署项目</strong></p>
<p><img src="/assets/image-20210902005320980.png" alt="image-20210902005320980"> </p>
<p>执行完shell脚本之后，我们可以通过 ps -ef|grep java 指令，查看服务是否启动。</p>
<p><img src="/assets/image-20210902005450399.png" alt="image-20210902005450399"> </p>
<p><strong>4). 访问系统测试</strong></p>
<p><a href="http://192.168.138.101/">http://192.168.138.101/</a></p>
<p><img src="/assets/image-20210902005640875.png" alt="image-20210902005640875"> </p>
<h3 id="4-6-图片展示问题处理"><a href="#4-6-图片展示问题处理" class="headerlink" title="4.6 图片展示问题处理"></a>4.6 图片展示问题处理</h3><p>在上述的测试中，我们发现菜品的图片无法正常展示。原因是因为，在我们的配置文件中，图片信息依然是从 D:&#x2F;img 中加载的，但是在Linux服务器中，是不存在D盘的。</p>
<p><img src="/assets/image-20210902005957772.png" alt="image-20210902005957772"> </p>
<p><strong>1). 修改文件存储目录</strong></p>
<p>将文件存储目录修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reggie:</span><br><span class="line">  path: /usr/local/img/</span><br></pre></td></tr></table></figure>

<p> 修改完成之后，需要将变动的代码提交到本地仓库，并推送至远程仓库。</p>
<p><img src="/assets/image-20210902010223733.png" alt="image-20210902010223733"> </p>
<p><strong>2). 执行shell脚本,进行自动化部署</strong></p>
<p><img src="/assets/image-20210902010440908.png" alt="image-20210902010440908"> </p>
<p><strong>3). 将本地的测试图片文件夹img(整个文件夹)上传到服务器B的&#x2F;usr&#x2F;local目录下</strong></p>
<p><img src="/assets/image-20210902010704691.png" alt="image-20210902010704691"> </p>
<p><strong>4).访问测试</strong></p>
<p><a href="http://192.168.138.101/">http://192.168.138.101/</a></p>
<p><img src="/assets/image-20210902010952388.png" alt="image-20210902010952388"> </p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>瑞吉</tag>
      </tags>
  </entry>
  <entry>
    <title>day01作业</title>
    <url>/2022/08/03/%E7%AC%AC1%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day01作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>通过idea在创建某一个类的时候可能会出现如下错误，请说明产生该错误的原因是什么？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203095229991.png" alt="image-20220203095229991"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：在同一个包下已经存在了Student这个类    </span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>请分析如下程序编译是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203095604087.png" alt="image-20220203095604087"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/image-20220203095638293.png" alt="image-20220203095638293"></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：不同包下的两个类在进行相互访问的时候需要进行导包，而代码中没有进行导包，因此报错。</span><br><span class="line">③ 正确代码，如下所示：    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.day01.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.day01.demo01.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Student的对象，并调用show方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>() ;</span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请分析如下程序在控制台的执行结果并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203100256701.png" alt="image-20220203100256701"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 执行结果：</span><br><span class="line">    中国</span><br><span class="line">    中国</span><br><span class="line">② 原因：被<span class="keyword">static</span>修饰的成员被该类的所有对象所共享。代码中的country被<span class="keyword">static</span>修饰了，因此该成员变量会被Student的多个对象所共享，因此在控制台输出了两次中国</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请分析如下程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203100540870.png" alt="image-20220203100540870"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：show方法是非静态的，method方法是静态的，而静态只能访问静态。而代码中是通过静态的method方法访问了非静态的show方法，因此会报错。    </span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请分析如下程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203101154727.png" alt="image-20220203101154727"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 不会报错</span><br><span class="line">② 原因：静态的method方法可以通过Student类名直接进行访问    </span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中分类和分包思想以及static关键字的使用，理解其在开发中的应用</p>
<p><strong>需求描述</strong>：完成《黑马信息管理系统》老师模块的相关功能，如下所示：</p>
<p>1、添加老师: 通过键盘录入老师信息(id，name，age，birthday)使用数组存储老师信息,要求老师的id不能重复</p>
<p>2、删除老师: 通过键盘录入要删除老师的id值,将该老师从数组中移除,如果录入的id在数组中不存在,需要重新录入</p>
<p>3、修改老师: 通过键盘录入要修改老师的id值和修改后的老师信息将数组中该老师的信息修改,如果录入的id在数组中不存在,需要重新录入</p>
<p>4、查询老师: 将数组中存储的所有老师的信息输出到控制台</p>
<p><strong>实现提示</strong>：</p>
<p>1、参考学生模块的功能实现</p>
<p><strong>代码实现</strong>：</p>
<p>老师类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String id, String name, String age, String birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(String birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TeacherService</span> <span class="variable">teacherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeacherService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        teacherLoop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到 &lt;老师&gt; 管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您的选择: 1.添加老师  2.删除老师  3.修改老师  4.查看老师  5.退出&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;添加老师&quot;);</span></span><br><span class="line">                    addTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;删除老师&quot;);</span></span><br><span class="line">                    deleteTeacherById();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;修改老师&quot;);</span></span><br><span class="line">                    updateTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;查看老师&quot;);</span></span><br><span class="line">                    findAllTeacher();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您使用老师管理系统, 再见!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span> teacherLoop;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;您的输入有误, 请重新输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> inputTeacherId();</span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">newTeacher</span> <span class="operator">=</span> inputTeacherInfo(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用业务员的修改方法</span></span><br><span class="line">        teacherService.updateTeacher(id,newTeacher);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTeacherById</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> inputTeacherId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用业务员中的删除方法, 根据id, 删除老师</span></span><br><span class="line">        teacherService.deleteTeacherById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 提示删除成功</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAllTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 从业务员中, 获取老师对象数组</span></span><br><span class="line">        Teacher[] teachers = teacherService.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断数组中是否有元素</span></span><br><span class="line">        <span class="keyword">if</span> (teachers == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查无信息, 请添加后重试&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 遍历数组, 取出元素, 并打印在控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;学号\t\t姓名\t年龄\t生日&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> teachers[i];</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(t.getId() + <span class="string">&quot;\t&quot;</span> + t.getName() + <span class="string">&quot;\t&quot;</span> + t.getAge() + <span class="string">&quot;\t\t&quot;</span> + t.getBirthday());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 接收不存在的老师id</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入老师id:&quot;</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">            <span class="comment">// 2. 判断id是否存在</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> teacherService.isExists(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id已被占用, 请重新输入:&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> inputTeacherInfo(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 将封装好的老师对象, 传递给TeacherService继续完成添加操作</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> teacherService.addTeacher(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入老师id</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">inputTeacherId</span><span class="params">()</span>&#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入id&quot;</span>);</span><br><span class="line">            id = sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> teacherService.isExists(id);</span><br><span class="line">            <span class="keyword">if</span>(!exists)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的id不存在, 请重新输入:&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入老师信息, 封装为老师对象</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">inputTeacherInfo</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入老师姓名:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入老师年龄:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入老师生日:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setId(id);</span><br><span class="line">        t.setName(name);</span><br><span class="line">        t.setAge(age);</span><br><span class="line">        t.setBirthday(birthday);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherService类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TeacherDao</span> <span class="variable">teacherDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeacherDao</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addTeacher</span><span class="params">(Teacher t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherDao.addTeacher(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isExists</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取库管对象中的数组</span></span><br><span class="line">        Teacher[] teachers = teacherDao.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 遍历数组, 取出每一个元素, 进行判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(teacher != <span class="literal">null</span> &amp;&amp; teacher.getId().equals(id))&#123;</span><br><span class="line">                exists = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Teacher[] findAllTeacher() &#123;</span><br><span class="line">        Teacher[] allTeacher = teacherDao.findAllTeacher();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allTeacher.length; i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> allTeacher[i];</span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> allTeacher;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTeacherById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        teacherDao.deleteTeacherById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTeacher</span><span class="params">(String id, Teacher newTeacher)</span> &#123;</span><br><span class="line">        teacherDao.updateTeacher(id,newTeacher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TeacherDao类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Teacher[] teachers = <span class="keyword">new</span> <span class="title class_">Teacher</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addTeacher</span><span class="params">(Teacher t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(teacher == <span class="literal">null</span>)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            teachers[index] = t;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Teacher[] findAllTeacher() &#123;</span><br><span class="line">        <span class="keyword">return</span> teachers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTeacherById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询id在数组中的索引位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(id);</span><br><span class="line">        <span class="comment">// 2. 将该索引位置的元素, 使用null进行替换</span></span><br><span class="line">        teachers[index] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; teachers.length; i++) &#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> teachers[i];</span><br><span class="line">            <span class="keyword">if</span>(t != <span class="literal">null</span> &amp;&amp; t.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTeacher</span><span class="params">(String id, Teacher newTeacher)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(id);</span><br><span class="line">        teachers[index] = newTeacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day02作业</title>
    <url>/2022/08/03/%E7%AC%AC2%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day02作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>下面程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203085959081.png" alt="image-20220203085959081"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：子类继承父类，子类只能访问父类非私有的成员。而Fu类中定义的成员变量a是私有的，因此Zi类无法进行访问，编译报错。    </span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>下面程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203090456789.png" alt="image-20220203090456789"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答:</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：在Java语言中是不支持多继承的。而题目中的Zi类继承了两个父类：Fu1 ， Fu2不符合Java的语法规则，编译报错。     </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>下面程序执行完毕以后在控制台输出的结果是什么并说明原因？如果想输出23和45代码应该怎么书写？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203090957293.png" alt="image-20220203090957293"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 输出结果：<span class="number">60</span> ， <span class="number">67</span></span><br><span class="line">② 原因：变量的访问遵循就近原则。查找顺序为：<span class="number">1</span>、子类局部范围找 	<span class="number">2</span>、子类成员范围找	<span class="number">3</span>、父类成员范围找	<span class="number">4</span>、如果都没有就报错(不考虑父亲的父亲…)</span><br><span class="line">   show方法的局部位置定义了num变量，因此访问的是局部变量的num，控制台输出<span class="number">60</span>。</span><br><span class="line">   number变量，局部位置和子类的成员位置都没有该变量，因此访问的是Fu类的成员变量number，因此控制台输出<span class="number">67</span>。</span><br><span class="line">③ 想输出<span class="number">23</span>和<span class="number">45</span>可以使用<span class="built_in">super</span>关键字和<span class="built_in">this</span>关键字显示的去访问成员变量，如下所示：    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="built_in">super</span>.num);			<span class="comment">// 访问父类的成员变量num</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.num);			<span class="comment">// 访问子类的成员变量num</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>下面程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203091420950.png" alt="image-20220203091420950"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：子类的构造方法的第一条语句默认是<span class="built_in">super</span>() , 表示需要调用父类无参的构造方法对父类进行初始化。而代码中Fu类定义了一个有参的构造方法，那么此时系统就不会提供一个无参数的构造方法，因此编译报错。    </span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>下面程序编译是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203091734616.png" alt="image-20220203091734616"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：子类在重写父类方法的时候，要求方法的访问权限不能低于父类。而代码中Zi的show方法没有添加访问权限，那么使用的就是默认的访问权限，而默认的访问权限小于<span class="keyword">public</span>的，因此编译报错。 </span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>下面程序编译是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220203092221684.png" alt="image-20220203092221684"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：当一个类中存在抽象方法，那么这个类就必须定义为抽象类。而代码中的Animal类不是一个抽象类，因此编译报错。</span><br><span class="line">③ 正确代码：将Animal定义成为一个抽象类，如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;                      <span class="comment">// 抽象的Animal类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> ;                    <span class="comment">// 吃饭的抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep方法&quot;</span>);            <span class="comment">// 非抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中抽象类以及继承的使用，以及理解其在开发中的应用</p>
<p><strong>需求背景</strong>：在现在的互联网系统中大部分的网站都是支持手机号码登录的，当用户输入完手机号码点击获取短信验证码此时就会访问一些短信平台，由短信平台(阿里云短信平台、腾讯云短信平台)</p>
<p>给用户的手机号码上发送一个短信验证码！如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128212052382.png" alt="image-20220128212052382"></th>
</tr>
</thead>
</table>
<p>发送短信验证码的大致逻辑如下所示：</p>
<p>1、生成一个4位的随机的数字字符串</p>
<p>2、访问指定的短信服务平台让其完成验证码的发送</p>
<p>3、将验证码数据进行存储</p>
<p><strong>需求描述</strong>：在素材的msg项目的AliyunSendMsg类和TencentSendMsg的指定位置补全代码，并使用模板设计模式对代码进行优化。实现短信验证码发送功能！案例实现效果如下所示：</p>
<p>1、当在Entry类中创建AliyunSendMsg对象时，在控制台输出</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128212616075.png" alt="image-20220128212616075"></th>
</tr>
</thead>
</table>
<p>2、当在Entry类中创建TencentSendMsg对象时，在控制台输出</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128212723338.png" alt="image-20220128212723338"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、生成一个4位随机字符串(字符来源于chs数组)</p>
<p>2、发送短信验证码(由于知识储备不足，此处可以通过输出语句进行模拟)</p>
<p>3、创建CheckCode对象，将该对象存储到arrayList集合中</p>
<p>4、将AliyunSendMsg和TencentSendMsg中相同的代码向上进行抽取，将其定义到一个模板类中，然后让AliyunSendMsg和TencentSendMsg继承该类</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;msg》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中抽象类以及继承的使用，以及理解其在开发中的应用</p>
<p><strong>需求背景</strong>：模板模式就是通过抽象类来定义一个逻辑模板，逻辑框架、逻辑原型，然后将无法决定的部分抽象成抽象类交由子类来实现，一般这些抽象类的调用逻辑还是在抽象类中完成的。比如</p>
<p>盖房子，我们定义一个模板：房子要有地基、墙、门、窗等等；但是要什么样地基、什么样的墙、什么样的门，什么样的窗。这些并不在模板中描述，这个交给子类来完善，比如地基使用钢铁地</p>
<p>基、墙使用大理石建造、门使用防盗门，窗使用北向的窗等等。</p>
<p><strong>需求描述</strong>：请使用模板设计模式设计一个建房子的模板类，并提供两个子类使用。程序的运行结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220202204153497.png" alt="image-20220202204153497"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、模板类中提供一个成员变量让用户设置房子的名称，通过构造方法给成员变量赋值</p>
<p>2、在模板类中提供一个建造房子的非抽象方法定义建造房子的过程</p>
<p>3、在模板类中提供指定的抽象方法用于子类进行实现</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;house》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day03作业</title>
    <url>/2022/08/03/%E7%AC%AC3%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day03作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请分析如下程序是否会报错(编译版本JDK1.8)并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128092751304.png" alt="image-20220128092751304"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错    </span><br><span class="line">② 原因：上述method方法不是一个<span class="keyword">default</span>方法，因此在JDK1<span class="number">.8</span>时编译不通过</span><br><span class="line">③ 正确代码：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;                          <span class="comment">// 定义一个非抽象的method方法</span></span><br><span class="line">	System.out.println(<span class="string">&quot;非抽象的method方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>请分析如下程序是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128092530489.png" alt="image-20220128092530489"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错    </span><br><span class="line">② 原因：类和接口是实现的关系，不是继承关系</span><br><span class="line">③ 正确代码： </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterImpl</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;          <span class="comment">// 定义一个类，继承Inter接口</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请分析如下程序是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128092134032.png" alt="image-20220128092134032"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：接口和接口之间的关系是继承的关系，不是实现的关系</span><br><span class="line">③ 正确代码：    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Inter</span> <span class="keyword">extends</span> <span class="title class_">Inter1</span> , Inter2 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请分析如下程序那几行代码会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128095055194.png" alt="image-20220128095055194"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 第<span class="number">10</span>行代码会报错</span><br><span class="line">② 原因：接口中的成员变量存在默认的修饰符：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 因此number是一个常量，其值不能被改变    </span><br></pre></td></tr></table></figure>



<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请分析如下程序是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128093723196.png" alt="image-20220128093723196"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：InterImpl不是一个抽象类，那么此时就需要重写Animal类以及Inter1和Inter2中所有的抽象方法。但是InterImpl没有重写Animal类中的eat方法，因此会报错。</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>请分析如下程序是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128094520966.png" alt="image-20220128094520966"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：通过多态创建Animal对象，在编译的时候需要查看Animal类中是否定义了eat方法，如果定义了编译通过，如果没有定义编译不通过！而在Animal类中并没有定义eat方法，因此编译报错。   </span><br></pre></td></tr></table></figure>

<h2 id="1-7-简答题七"><a href="#1-7-简答题七" class="headerlink" title="1.7 简答题七"></a>1.7 简答题七</h2><p>请分析如下程序在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128095645556.png" alt="image-20220128095645556"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：</span><br><span class="line">   <span class="number">6</span></span><br><span class="line">   Dog吃东西 </span><br><span class="line">② 原因：</span><br><span class="line">   <span class="number">1</span>、通过多态的形式访问成员变量：编译看左边，运行看左边     在Animal类中定义了<span class="type">int</span>类型的成员变量age因此编译通过，运行时打印的是Animal类中的成员变量的值：<span class="number">6</span></span><br><span class="line">   <span class="number">2</span>、通过多态的形式访问成员方法：编译看左边，运行看右边     在Animal类中定义了eat方法因此编译通过，运行时执行的是Dog类中的eat方法，因此控制台输出：<span class="string">&quot;Dog吃东西&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-8-简答题八"><a href="#1-8-简答题八" class="headerlink" title="1.8 简答题八"></a>1.8 简答题八</h2><p>请分析如下程序在控制台的输出结果是什么并说明原因？以及如何避免该问题？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128100145912.png" alt="image-20220128100145912"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassCastException: com.itheima.inter.demo08.Dog cannot be cast to com.itheima.inter.demo08.Cat</span><br><span class="line">		at com.itheima.inter.demo08.Dog.main(Animal.java:<span class="number">31</span>)</span><br><span class="line">② 原因：Animal本质的类型为Dog，不能将Dog转换成Cat，Dog和Cat之间不存在子父类的继承关系</span><br><span class="line">③ 避免该问题：在进行类型转换的时候，可以通过<span class="keyword">instanceof</span>关键字进行类型的判断，使用方式如下所示：       </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过多态的方式创建Animal对象</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>() ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将animal转换成Cat类型</span></span><br><span class="line"><span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用eat方法</span></span><br><span class="line">    cat.eat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中多态的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求描述</strong>：对第二天所完成的msg项目的代码进行优化，解除Entry类和AliyunSendMsg或者TencentSendMsg对象的耦合度。案例运行效果和第二天代码一致，如下所示：</p>
<p>1、当在Entry类中获取的是AliyunSendMsg对象时，在控制台输出</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128212616075.png" alt="image-20220128212616075"></th>
</tr>
</thead>
</table>
<p>2、当在Entry类中获取的是TencentSendMsg对象时，在控制台输出 </p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128212723338.png" alt="image-20220128212723338"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、创建一个工厂类，在该工厂类中定义一个静态方法，该方法返回值类型是AliyunSendMsg或者TencentSendMsg类的父类类型</p>
<p>2、对Entry类中创建AliyunSendMsg或者TencentSendMsg对象的代码进行改造，调用工厂类的静态方法获取指定对象进行使用</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;msg》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中接口以及多态的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：现在互联网中存在很多的云存储平台(七牛云、阿里云oss)，这些存储平台是类似于百度网盘，可以存储文件。如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128233026447.png" alt="image-20220128233026447"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：请在素材的store项目中设计一个存储接口，并且在Entry类的指定位置补全代码使程序可以正常运行。案例的实现效果如下所示：</p>
<p>1、当用户输入1时，控制台输出如下结果</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128234827860.png" alt="image-20220128234827860"></th>
</tr>
</thead>
</table>
<p>2、当用户输入2时，控制台输出如下结果</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128234904755.png" alt="image-20220128234904755"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在inter包中定义存储接口(接口中可以定义一个抽象方法，方法参数字符串类型，表示要上传的本地磁盘文件的路径)和该接口的实现类</p>
<p>2、在Entry类中定义一个接收接口类型参数的方法，方法中代码逻辑如下所示：</p>
<ul>
<li>在该方法中键盘录入要上传的本地文件的磁盘路径(比如：D:\a.jpg)</li>
<li>调用接口方法将本地文件上传到指定的存储平台上</li>
</ul>
<p>3、在Entry类中根据用户的输入情况创建第一步定义的接口的子类对象，调用第二步的方法</p>
<p>4、存储功能(由于知识储备不足，此处可以通过输出语句进行模拟)</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;store》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握Java中接口以及多态的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：某网站需要开发一个支付功能，需要支持多种支付方式(支付平台支付、银行卡网银支付、信用卡快捷支付)，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128230514347.png" alt="image-20220128230514347"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：请在素材的payment项目中设计一个支付接口，并且在Entry类的指定位置补全代码使程序可以正常运行。案例的实现效果如下所示：</p>
<p>1、当用户输入1时，控制台输出如下结果</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128231120933.png" alt="image-20220128231120933"></th>
</tr>
</thead>
</table>
<p>2、当用户输入2时，控制台输出如下结果</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128231156421.png" alt="image-20220128231156421"></th>
</tr>
</thead>
</table>
<p>3、当用户输入3时，控制台输出如下结果</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128231231373.png" alt="image-20220128231231373"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在inter包中定义支付接口(接口中可以定义一个抽象方法，方法参数double类型，表示要支付的总金额)和该接口的实现类</p>
<p>2、在factory包中定义工厂类，该工厂类主要是获取对应的支付接口的子类对象</p>
<p>3、在Entry类中可以调用工厂类的方法根据用户输入的数值获取指定的支付接口子类对象</p>
<p>4、支付功能(由于知识储备不足，此处可以通过输出语句进行模拟)</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;payment》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day04作业</title>
    <url>/2022/08/03/%E7%AC%AC4%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day04作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请分析如下程序是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127105730918.png" alt="image-20220127105730918"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：上述代码所定义的Inner内部类是一个局部内部类，局部内部类不能通过<span class="keyword">private</span>进行修饰    </span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>请分析如下程序是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127112131596.png" alt="image-20220127112131596"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：在外部类中创建一个非静态的成员内部类对象格式不对</span><br><span class="line">③ 正确代码：Demo02.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo02</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>() ;    </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请分析如下程序是否会报错并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127112624642.png" alt="image-20220127112624642"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会报错</span><br><span class="line">② 原因：在外部类中创建一个静态的成员内部类对象格式不对</span><br><span class="line">③ 正确代码：Demo03.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo03</span>.Inner();</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题五"><a href="#1-4-简答题五" class="headerlink" title="1.4 简答题五"></a>1.4 简答题五</h2><p>如下程序想在控制台输出30,20,10那么在9,10,11行代码的输出语句中应该填写什么代码？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127114021101.png" alt="image-20220127114021101"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">输出语句中填写的代码分别是：num, <span class="built_in">this</span>.num , Outer.<span class="built_in">this</span>.num     </span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题六"><a href="#1-5-简答题六" class="headerlink" title="1.5 简答题六"></a>1.5 简答题六</h2><p>下面lambda表达式的书写是否正确并说明原因？并给出正确的代码！</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127154237812.png" alt="image-20220127154237812"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 不正确</span><br><span class="line">② 原因：lambda表达式的省略格式，如果有多个参数，参数类型在省略的时候需要全部省略。而代码中的lambda表达式在省略参数类型的时候只省略了一个参数类型。</span><br><span class="line">③ 正确代码：show((<span class="type">int</span> a , <span class="type">int</span> b) -&gt; a + b ); 或者 show((a , b) -&gt; a + b );</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>请分析如下程序是否会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127154853580.png" alt="image-20220127154853580"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 不会报错</span><br><span class="line">② 原因：Compare接口中的equals抽象方法，是Object类中的equals方法的抽象表示形式。lambda表达式可以看做成是匿名内部类的简化写法，一个类都会直接的或者间接的继承Obejct类，那么通过Object类中的equals方法可以重写接口中定义的抽象的equals方法。因此可以认为Comapre接口只定义了一个抽象方法compare，是可以使用lambda表达式的。    </span><br></pre></td></tr></table></figure>

<h2 id="1-7-简答题七"><a href="#1-7-简答题七" class="headerlink" title="1.7 简答题七"></a>1.7 简答题七</h2><p>请分析如下程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220125110437223.png" alt="image-20220125110437223"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">① 控制台输出结果：<span class="literal">false</span>，<span class="literal">false</span></span><br><span class="line">② 原因：</span><br><span class="line">    <span class="number">1</span>、使用==比较两个对象是否相等，比较的是地址值。由于是两个对象因此地址值肯定不一样，所以在控制台输出<span class="literal">false</span>。   </span><br><span class="line">    <span class="number">2</span>、调用equals方法比较的时候，由于Student类没有重写Object类中的equals方法，因此调用的还是Object类中的equals方法，那么比较的还是地址值，因此控制台输出<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="1-8-简答题八"><a href="#1-8-简答题八" class="headerlink" title="1.8 简答题八"></a>1.8 简答题八</h2><p>请分析如下程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220125202933752.png" alt="image-20220125202933752"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：</span><br><span class="line">    com.itheima.object.demo00.Student@4554617c</span><br><span class="line">	我是一名老师！</span><br><span class="line">② 原因：</span><br><span class="line">    直接输出对象名称，默认会调用对象的toString方法。Student类没有重写Object类中的toString方法，因此调用的是Object类中的toString方法，所以打印的是地址值</span><br><span class="line">    Teacher类重写了Object类中的toString方法，因此打印的是“我是一名老师！”</span><br></pre></td></tr></table></figure>

<h2 id="1-9-简答题九"><a href="#1-9-简答题九" class="headerlink" title="1.9 简答题九"></a>1.9 简答题九</h2><p>如下程序：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220212155818790.png" alt="image-20220212155818790"></th>
</tr>
</thead>
</table>
<p>执行完毕以后在控制台的数据结果为：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220212155900406.png" alt="image-20220212155900406"></th>
</tr>
</thead>
</table>
<p>请说明产生该结果的原因，并且给出精确输出(得到结果为0.2)的代码！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 原因：不论是<span class="type">float</span> 还是<span class="type">double</span>都是浮点数，而计算机是二进制的，浮点数会失去一定的精确度，因此导致控制台输出结果中出现了精度丢失的问题。</span><br><span class="line">② 精确输出：需要使用jdk中的BigDecimal类进行计算，代码如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.01&quot;</span>) ;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.05&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做除法运算将结果输出到控制台</span></span><br><span class="line">System.out.println(b1.divide(b2));</span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中匿名内部类的使用</p>
<p><strong>需求描述</strong>：笔试题(补全代码)：在素材的Inter.java文件中的Outer类的指定位置补全代码，使OuterDemo中的main方法可以进行正常运行！案例的执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127152742567.png" alt="image-20220127152742567"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、定义一个静态的method方法</p>
<p>2、该方法返回一个匿名内部类</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 补全代码</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Inter <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;传智播客,IT精英的摇篮!&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中lambda表达式的使用</p>
<p><strong>需求背景</strong>：在注册网站用户的时候，大部分的网站都会先生成一个随机的验证码展示给用户，用于区分正常人和机器的操作。如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127204558689.png" alt="image-20220127204558689"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：在素材的supplier项目的Entry类的指定位置补全代码(调用verificationCode方法)，实现一个生成四位随机验证码! 案例的执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127205756468.png" alt="image-20220127205756468"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、verificationCode方法参数Supplier<String>说明如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220127210010293.png" alt="image-20220127210010293"></th>
</tr>
</thead>
</table>
<p>2、生成验证码的字符可以从OPTIONS_CAHS中获取</p>
<p>3、调用verificationCode方法获取一个4位的随机验证码</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;supplier》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握Java中lambda表达式的使用</p>
<p><strong>需求描述</strong>：在素材的function项目中指定的位置补全代码，实现从userNames数组中随机获取一个元素返回(点名器)! 案例的执行效果如下所示：</p>
<p><img src="file://C:\Users\Administrator\Desktop%E4%BD%9C%E4%B8%9A\JavaSE%E8%BF%9B%E9%98%B6%E4%BD%9C%E4%B8%9A%E4%BA%A7%E5%87%BA\JavaSE%E8%BF%9B%E9%98%B6\day04%E4%BD%9C%E4%B8%9A\images\image-20220127161351575.png?lastModify=1643328844" alt="image-20220127161351575"></p>
<p><strong>实现提示</strong>：</p>
<p>1、getUserName方法参数Function&lt;String[] , String&gt;说明如下所示：</p>
<p><img src="file://C:\Users\Administrator\Desktop%E4%BD%9C%E4%B8%9A\JavaSE%E8%BF%9B%E9%98%B6%E4%BD%9C%E4%B8%9A%E4%BA%A7%E5%87%BA\JavaSE%E8%BF%9B%E9%98%B6\day04%E4%BD%9C%E4%B8%9A\images\image-20220127161803471.png?lastModify=1643328844" alt="image-20220127161803471"></p>
<p>2、使用lambda表达式完成getUserName方法调用</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;function》</p>
<h2 id="2-4-编程题目四"><a href="#2-4-编程题目四" class="headerlink" title="2.4 编程题目四"></a>2.4 编程题目四</h2><p><strong>训练目标</strong>：掌握Java中lambda表达式的使用</p>
<p><strong>需求背景</strong>：在汽车之家网站上进行汽车相关信息搜索的时候并没有提供按照汽车的价格搜索的功能，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128081427148.png" alt="image-20220128081427148"></th>
</tr>
</thead>
</table>
<p>现需要对该网站进行改进，具体需求如下所示。</p>
<p><strong>需求描述</strong>：在素材的cars项目的Entry类的指定位置补全代码(调用forEach方法)，将cars数组中价格小于30W和大于30W的车辆信息打印到控制台! 案例的执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128080156436.png" alt="image-20220128080156436"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、forEach方法参数Predicate<Car>和Consumer<Car>说明如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220128082808657.png" alt="image-20220128082808657"></th>
</tr>
</thead>
</table>
<p>2、可以调用两次forEach方法</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;cars》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day05作业</title>
    <url>/2022/08/03/%E7%AC%AC5%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day05作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请说明自动装箱和自动拆箱时底层所调用的方法分别是什么(使用javap解析字节码内容)？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 自动装箱调用的是Integer类中的valueOf方法，自动拆箱调用的是Integer类中的intValue方法</span><br><span class="line">② 原理分析，如下代码</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span> ;              <span class="comment">// 把一个基本类型的变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num ;</span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通过javap对字节码文件进行解析，如下所示：</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20220126235355963.png" alt="image-20220126235355963"></th>
</tr>
</thead>
</table>
<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>请分析如下程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220125124638993.png" alt="image-20220125124638993"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：<span class="literal">true</span>，<span class="literal">false</span></span><br><span class="line">② 原因：自动装箱调用的是Integer类中的valueOf方法，于是查询valueOf方法的源码，如下所示：    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)	<span class="comment">// 判断i是否大于等于-128并且小于等于127，如果是直接从数据中获取元素</span></span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);									<span class="comment">// 如果不满足上述条件直接new一个新的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127</span>满足上述的第一个条件，因此是从数组中获取元素，地址值相同，因此控制台输出<span class="literal">true</span>！</span><br><span class="line"><span class="number">128</span>不满足上述第一个条件，因此是又重新<span class="keyword">new</span>了一个全新的对象，因此控制台输出<span class="literal">false</span>！    </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请分析如下程序执行完毕以后在控制台的最终输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220125204438370.png" alt="image-20220125204438370"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 最终输出结果：</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.lang.StackOverflowError</span><br><span class="line">		at sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:<span class="number">691</span>)</span><br><span class="line">		at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:<span class="number">579</span>)</span><br><span class="line">② 原因说明：</span><br><span class="line">    function方法和method互相不断调用，不断的将方法加载到栈内存，没有出栈的代码。因此程序在执行一段时间以后，栈内存不够用了，就抛出StackOverflowError异常。</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>有数组：[23 , 78, 12 , 45 , 11 , 99]。现需要查找11这个元素在数组中出现的索引，请问是否可以使用二分查找进行实现？如果不能，请说明原因？并且给出你的查找代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 不能使用二分查找</span><br><span class="line">② 原因: 数组元素不是有序的</span><br><span class="line">③ 只能只用基本查询，相关代码如下所示：    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(<span class="type">int</span>[] arr , <span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; arr.length ; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[x] == number) &#123;  <span class="comment">// 判断当前遍历的元素是否与number相等，如果相等就返回当前遍历的元素的索引</span></span><br><span class="line">            <span class="keyword">return</span> x ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> ;     <span class="comment">// 如果没有找到返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请分析如下程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122133906756.png" alt="image-20220122133906756"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 程序运行结果：</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArrayIndexOutOfBoundsException: <span class="number">3</span></span><br><span class="line">        at com.itheima.date.demo01.DateDemo02.main(DateDemo02.java:<span class="number">13</span>)</span><br><span class="line">② 原因：程序真正产生的异常为ArrayIndexOutOfBoundsException，而<span class="keyword">catch</span>能捕获的异常为NullPointerException，两个异常不属于同一类异常。因此还是执行JVM的异常处理机制：将	   异常的错误信息打印到了控制台，并且结束程序！</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>请分析如下程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122134752953.png" alt="image-20220122134752953"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 程序运行结果：</span><br><span class="line">    执行了<span class="keyword">finally</span>语句了</span><br><span class="line">	Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">		at com.itheima.date.demo01.DateDemo03.main(DateDemo03.java:<span class="number">13</span>)</span><br><span class="line">② 原因：放在<span class="keyword">finally</span>语句中的代码始终要被执行，当程序抛出NullPointerException异常以后，由于<span class="keyword">try</span>没有对应的<span class="keyword">catch</span>语句，因此还是执行JVM的异常处理机制：将异常的错误信息打印到		  了控制台，并且结束程序！</span><br></pre></td></tr></table></figure>

<h2 id="1-7-简答题七"><a href="#1-7-简答题七" class="headerlink" title="1.7 简答题七"></a>1.7 简答题七</h2><p>简述throw和throws的区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① <span class="keyword">throw</span>用在方法内部，后面跟一个异常对象，用来抛出一个异常</span><br><span class="line">② <span class="keyword">throws</span>用在方法定义上，后面跟一个异常类型，用来给方法添加一个异常声明。告诉方法的调用者，该方法可能会出现异常。</span><br></pre></td></tr></table></figure>

<h2 id="1-8-简答题八"><a href="#1-8-简答题八" class="headerlink" title="1.8 简答题八"></a>1.8 简答题八</h2><p>下述程序编译能否通过？如果不能，请说明哪一个方法会报错并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122140554202.png" alt="image-20220122140554202"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 不能编译通过</span><br><span class="line">② Son的show方法会报错</span><br><span class="line">③ 原因：Father的show方法没有声明异常，因此Son的show方法就不能声明异常。Son的method方法声明的是一个运行期的异常，即使父类没有声明也没有问题。    </span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中递归算法的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求描述</strong>：面试题(爬楼梯问题)：假设你正在爬楼梯，楼梯总共是n阶。每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？假设总共有10阶，计算结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220126100821620.png" alt="image-20220126100821620"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、可以采用假设法，先推导出具体的规则</p>
<p>2、使用递归算法进行实现</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stairs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法计算爬10阶楼梯总共有多少中方案？</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> climbStairs(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;10阶楼梯总共有：&quot;</span> + count + <span class="string">&quot; 方案&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归计算爬楼梯方案</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;          <span class="comment">// 参数表示楼梯的阶数</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> climbStairs( n - <span class="number">1</span> ) + climbStairs( n - <span class="number">2</span> ) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中数组排序，以及理解其在实际开发中的应用</p>
<p><strong>需求描述</strong>：某学校要组织学生参加活动，要求学生按照身高从小打到进行排队。请在素材的sort项目中的Entry类中补全相关的代码，模拟排队效果！程序运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220126233746009.png" alt="image-20220126233746009"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、使用冒泡排序比较两个学生的身高</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;sort》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握Java中二分查找代码的思想，以及在实际开发中的应用</p>
<p><strong>需求背景</strong>：某公司的技术部门年会需要举行一个抽奖活动以感谢员工在这一年中的付出。奖品种类总共有4种：一等奖、二等级、三等奖、谢谢惠顾。为了节约成本需要控制每一种奖项的抽取概</p>
<p>率，常见的做法就是给每一个奖项分配一个int类型的权重值，权重越大抽取到的概率就越大。下图是具体的奖项权重值分配情况：</p>
<table>
<thead>
<tr>
<th align="center">奖项</th>
<th align="center">一等奖</th>
<th align="center">二等奖</th>
<th align="center">三等奖</th>
<th align="center">谢谢惠顾</th>
</tr>
</thead>
<tbody><tr>
<td align="center">权重</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">4</td>
</tr>
</tbody></table>
<p><strong>需求描述</strong>：请在素材的lottery项目中Entry类中补全相关代码，完成按照权重随机抽奖程序的设计。多次运行程序(100次)，执行完毕以后在控制台输出的部分结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220126203429217.png" alt="image-20220126203429217"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、计算所有奖项的总权重，以及每一个奖项的权重范围 , 如下所示：</p>
<table>
<thead>
<tr>
<th align="center">奖项</th>
<th align="center">一等奖</th>
<th align="center">二等奖</th>
<th align="center">三等奖</th>
<th align="center">四等奖</th>
</tr>
</thead>
<tbody><tr>
<td align="center">权重范围</td>
<td align="center">[0,1)</td>
<td align="center">[1,3)</td>
<td align="center">[3,6)</td>
<td align="center">[6,10)</td>
</tr>
</tbody></table>
<p>2、生成一个随机数作为权重数</p>
<p>3、利用二分查找根据权重数从奖项数组中获取对应的奖项</p>
<p>4、控制台输出奖项名称</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;lottery》</p>
<h2 id="2-4-编程题目四"><a href="#2-4-编程题目四" class="headerlink" title="2.4 编程题目四"></a>2.4 编程题目四</h2><p><strong>训练目标</strong>：掌握Java中自定义异常的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：为了减轻银行柜台业务员的工作量，银行一般情况下都会提供ATM机，供用户办理一些简单业务(存钱、取钱)。在取钱的时候需要输入取钱的金额，ATM系统校验通过以后，对用户的</p>
<p>余额进变更，ATM机吐钱！并且在成功界面展示余额！素材中的atm项目是模拟银行ATM机的取钱操作。初始化的余额为20000元，程序的运行结果如下所示：</p>
<p>正常操作：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220124230755892.png" alt="image-20220124230755892"></th>
</tr>
</thead>
</table>
<p>非正常操作：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220124230833004.png" alt="image-20220124230833004"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：现需要对程序加入取钱金额的校验逻辑，程序的运行结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220124231658980.png" alt="image-20220124231658980"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/image-20220124231726236.png" alt="image-20220124231726236"></td>
</tr>
</tbody></table>
<p><strong>实现提示</strong>：</p>
<p>1、校验逻辑应该放在AtmServiceImpl中的drawMoney方法中实现</p>
<p>2、提示信息应该放Entry类中(因为是直接和用户进行交互)</p>
<p>3、可以考虑自定义异常</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;atm》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day06作业</title>
    <url>/2022/08/03/%E7%AC%AC6%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day06作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请说明下述程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122132341868.png" alt="image-20220122132341868"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 程序运行结果：</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.text.ParseException: Unparseable date: <span class="string">&quot;2022/1/22&quot;</span></span><br><span class="line">        at java.text.DateFormat.parse(DateFormat.java:<span class="number">366</span>)</span><br><span class="line">        at com.itheima.date.demo01.DateDemo01.main(DateDemo01.java:<span class="number">18</span>)</span><br><span class="line">② 原因：</span><br><span class="line">    SimpleDateFormat所指定的日期格式和日期字符串的日期格式不匹配</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述集合数组的区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 数组的长度是不可变的,集合的长度是可变的</span><br><span class="line">② 数组可以存基本数据类型和引用数据类型</span><br><span class="line">③ 集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类    </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请说明下面程序执行完毕以后在控制台的输出结果是什么并说明原因(从List集合的特点进行作答)？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220120220252608.png" alt="image-20220120220252608"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：</span><br><span class="line">    itheima</span><br><span class="line">    itcast</span><br><span class="line">    传智播客</span><br><span class="line">    itheima</span><br><span class="line">② 原因说明</span><br><span class="line">    <span class="number">1</span>、List是有序集合，存储和取出的顺序是一致的</span><br><span class="line">    <span class="number">2</span>、List集合元素可以重复</span><br><span class="line">    <span class="number">3</span>、List集合每一个元素都有索引，因此可以使用普通<span class="keyword">for</span>循环进行遍历</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请说明下面程序执行完毕以后在控制台的输出结果是什么并说明原因？如果要进行正常数据的输出应该对程序怎么改造？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过多态的方式创建一个List集合对象</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;itheima&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;itcast&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;传智播客&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;黑马程序员&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; list.size() ; x++) &#123;</span><br><span class="line">    System.out.println(list.remove(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果：</span><br><span class="line">    itheima</span><br><span class="line">    传智播客</span><br><span class="line">② 原因说明：</span><br><span class="line">	每一次删除完元素以后集合的长度发生改变，因此在根据索引获取元素的时候就会把一部分的元素跳过</span><br><span class="line">③ 程序改造：</span><br><span class="line">	每一次删除完元素以后，让x--。如下所示</span><br><span class="line">	<span class="comment">// 遍历集合</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; list.size() ; x++) &#123;</span><br><span class="line">        System.out.println(list.remove(x));</span><br><span class="line">        x-- ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请说明下面程序执行完毕以后在控制台的输出结果是什么并说明原因？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过多态的方式创建一个List集合对象</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;itheima&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;itcast&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;传智播客&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;itheima&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取迭代器对象，通过迭代器对象对集合进行遍历</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取元素</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断元素</span></span><br><span class="line">    <span class="keyword">if</span>(next.equals(<span class="string">&quot;itheima&quot;</span>)) &#123;</span><br><span class="line">        list.remove(next) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line">list.forEach( s -&gt; System.out.println(s) );</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">		at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line">		at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line">		at com.itheima.list.demo01.ListDemo05.main(ListDemo05.java:<span class="number">25</span>)</span><br><span class="line">② 原因说明：</span><br><span class="line">    当list.iterator()执行后，迭代已经开始，不能再对集合进行增删操作，因为每次调用next方法，都会去检测当前集合的修改次数是否发生变化，一旦发生变化，就会报出			       ConcurrentModificationException异常。</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>去银行办理业务，当银行办理业务人员过多的时候往往需要进行排队。关于排队数据使用哪一种数据结构来进行存储比较合适并说明你的理由？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 选择队列这种数据结构进行元素的存储</span><br><span class="line">② 原因：队列是一种先进先出的数据结构，而排序的数据就需要满足这种规则</span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中SimpleDateFormat以及Date的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：秒杀是网上竞拍的一种新方式，指商家在网络平台发布一些超低价格的商品，让所有买家在同一时间抢购的一种销售方式。由于商品价格非常低廉，通常活动时间一到，商品就会被买</p>
<p>家抢购一空，有时甚至只用一秒钟，所以该种方式被称为秒杀。在秒杀活动页面往往会有一个倒计时的功能，如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220124211259829.png" alt="image-20220124211259829"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：请在素材的seckill项目的指定位置补全相关的代码，实现秒杀倒计时的功能！秒杀开始时间为：明天的06时0分0秒。案例执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220124223217185.png" alt="image-20220124223217185"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在TimeTask类中补全代码</p>
<p>2、在TimeTask的构造方法中初始化秒杀开始时间</p>
<p>3、在TimeTask的run方法中，获取当前系统时间，然后计算当前系统时间与秒杀开始时间相差的毫秒值</p>
<p>4、然后将毫秒值转换成对应的时、分、秒</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;seckill》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中List集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：”抓阄”是指每人从预先做好记号的纸卷或纸团中摸取一个，以决定做什么。比如：学羊叫5声、蛙跳10个、吃芥末、喝一杯啤酒、做10个俯卧撑等。</p>
<p><strong>需求描述</strong>：请设计一个抓阄游戏程序，实现5个人的抓阄，程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220121184706193.png" alt="image-20220121184706193"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、创建一个集合存储5个人的名称</p>
<p>2、创建一个集合存储5个阄的内容</p>
<p>3、遍历名称的集合，获取每一个参与人员的名称</p>
<p>4、生成一个随机数作为存储5个阄的集合的索引，从该集合中随机获取一个元素，并且删除获取到的元素</p>
<p>5、在控制台输出结果</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过多态的方式创建一个List集合对象，来存储5个人的名称</span></span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;() ;</span><br><span class="line">        names.add(<span class="string">&quot;郭靖&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;黄药师&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;老顽童&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;瑛姑&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过多态的方式创建一个List集合对象，来存储5个阄的内容</span></span><br><span class="line">        List&lt;String&gt; contents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;() ;</span><br><span class="line">        contents.add(<span class="string">&quot;学羊叫5声&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;蛙跳10个&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;吃芥末&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;喝一杯啤酒&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;做10个俯卧撑&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历名称集合</span></span><br><span class="line">        <span class="keyword">for</span>(String name : names) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Random对象，生成一个随机数作为contents集合的索引，从集合中获取一个元素，获取完毕以后，将元素进行删除</span></span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>() ;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(contents.size());</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> contents.remove(index);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出结果</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;抓到的阄为: &quot;</span> + content);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握Java中List集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：”斗地主”游戏是大家都比较喜欢的游戏。游戏规则：本游戏为三人游戏，一副牌54张，每人17张，留3张做底牌，在确定地主之前玩家不能看底牌。确定地主后，地主可获得3张底牌。</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122094332776.png" alt="image-20220122094332776"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：请在素材的landlords项目的Entry类中指定位置补全相关代码，实现斗地主的发牌以及看牌功能。案例效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122095216136.png" alt="image-20220122095216136"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、创建四个List集合对象，分别用来存储3个玩家的牌以及底牌</p>
<p>2、遍历牌盒将合适的牌存储到上述指定的集合中</p>
<p>3、看牌就是对集合的元素进行遍历</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;landlords》</p>
<h2 id="2-4-编程题目四"><a href="#2-4-编程题目四" class="headerlink" title="2.4 编程题目四"></a>2.4 编程题目四</h2><p><strong>训练目标</strong>：掌握Java中List集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在素材的player项目的Entry类中提供了一段代码，该代码可以实现播放本地的mp3音频文件，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220121191421399.png" alt="image-20220121191421399"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：请在Entry类的指定位置补全代码实现本地多个mp3音频文件的播放。案例效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220122093457241.png" alt="image-20220122093457241"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、创建一个集合对象存储键盘录入的要播放的音频文件的磁盘路径地址</p>
<p>2、键盘录入用户选择的播放模式</p>
<p>3、根据播放模式对集合元素进行处理，调用play方法进行音频播放</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;player》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day07作业</title>
    <url>/2022/08/03/%E7%AC%AC7%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day07作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请分析下面程序的运行结果是什么并说明原因？如果想让错误提前到编译期应该对代码进行如何处理？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118103224095.png" alt="image-20220118103224095"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 运行结果如下所示：</span><br><span class="line">    Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line">		at com.itheima.gen.demo01.ListDemo01.lambda$main$<span class="number">0</span>(ListDemo01.java:<span class="number">20</span>)</span><br><span class="line">		at java.util.ArrayList.forEach(ArrayList.java:<span class="number">1257</span>)</span><br><span class="line">		at com.itheima.gen.demo01.ListDemo01.main(ListDemo01.java:<span class="number">19</span>)</span><br><span class="line">    <span class="number">7</span></span><br><span class="line">    <span class="number">6</span></span><br><span class="line">② 原因：<span class="number">16</span>这个元素为Integer类型，而Integer类型和String类型不存在子父类关系继承关系。因此在进行强制类型转换的时候就报了ClassCastException异常。</span><br><span class="line">③ 想让错误提前到编译期应该对代码进行如下处理：List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;       </span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述Set集合的特点？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 元素唯一</span><br><span class="line">② 元素无序</span><br><span class="line">③ 元素不存在索引</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>如下程序</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118105213988.png" alt="image-20220118105213988"></th>
</tr>
</thead>
</table>
<p>上述程序执行完毕以后会在控制台输出如下错误内容：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118105326515.png" alt="image-20220118105326515"></th>
</tr>
</thead>
</table>
<p>请说明产生该问题的原因？如果想先按照学生的年龄进行从大到小排序，如果年龄相同再按照学生的姓名进行排序，那么可以对代码进行怎样的改造？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 通过无参数的构造方法创建TreeSet集合对象，表示在存储元素的时候需要使用自然排序对元素进行排序。那么要求元素必须实现Comparable接口。但是Student类并没有实现Comparable接   口，因此就报错了。</span><br><span class="line">② 想先按照学生的年龄进行从大到小排序，如果年龄相同再按照学生的姓名进行排序，可以对Student类做如下改造：</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;      <span class="comment">// 定义学生类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;       <span class="comment">// 定义age成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name ;   <span class="comment">// 定义name成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get和set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> + <span class="string">&quot;age=&quot;</span> + age + <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先比较年龄</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> o.age - <span class="built_in">this</span>.age ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 年龄相同比较姓名</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> (result1 == <span class="number">0</span>) ? o.name.compareTo(<span class="built_in">this</span>.name) : result1 ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> result2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>下面这棵树是不是一颗平衡二叉树？请说明你分析的依据？如果不是，那么怎么对其进行调整让其成为一颗平衡二叉树？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118110726971.png" alt="image-20220118110726971"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 上面的树不是一颗平衡二叉树</span><br><span class="line">② 平衡二叉树要满足如下的规则要求：</span><br><span class="line">    <span class="number">1</span>、它的左右两个子树的高度差的绝对值不超过<span class="number">1</span></span><br><span class="line">    <span class="number">2</span>、并且左右两个子树都是一棵平衡二叉树</span><br><span class="line">   而上面的二叉树以<span class="number">15</span>为根节点时，这棵树左右高度差的绝对值为<span class="number">2</span>了，不满足上述的规则。</span><br><span class="line">③ 以<span class="number">15</span>为支点对树进行左旋可以将其变成一颗平衡二叉树，如下所示：</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20220119005641772.png" alt="image-20220119005641772"></th>
</tr>
</thead>
</table>
<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>下面三棵树，哪一颗是红黑树并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116115705805.png" alt="image-20220116115705805"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">图一：不是红黑树。		原因：违背了根节点必须是黑色这一条红黑规则</span><br><span class="line">图二：不是红黑树。		原因：违背了不能出现两个相连的红色节点这一条红黑规则</span><br><span class="line">图三：是一颗红黑树。	   原因：符合所有的红黑规则 </span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中TreeSet集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：中国福利彩票”双色球”投注区分为红色球号码区和蓝色球号码区，红色球号码区由1-33共三十三个号码组成，蓝色球号码区由1-16共十六个号码组成。如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220119000854512.png" alt="image-20220119000854512"></th>
</tr>
</thead>
</table>
<p>投注时选择6个红色球号码和1个蓝色球号码组成一注进行单式投注，每注金额人民币2元。</p>
<p><strong>需求描述</strong>：现通过程序模拟双色球随机生成一注号码。程序运行结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220119003334142.png" alt="image-20220119003334142"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、生成的双色球号码不能重复，因此可以考虑使用TreeSet集合存储双色球号码</p>
<p>2、针对红球的生成，需要生成多次，因此可以考虑使用循环</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Random对象，用于生成随机数</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一个蓝球号码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">blueBall</span> <span class="operator">=</span> random.nextInt(<span class="number">16</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个TreeSet集合对象，用来存储双色球数据</span></span><br><span class="line">        TreeSet&lt;Integer&gt; redBalls = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成红球</span></span><br><span class="line">        <span class="keyword">while</span> (redBalls.size() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            redBalls.add(random.nextInt(<span class="number">33</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;红球：&quot;</span> + redBalls + <span class="string">&quot; | 蓝球：&quot;</span> + blueBall);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中TreeSet集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求描述</strong>：下方图片展示的是黑马程序员各个学科的最新就业薪资数据：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118142714952.png" alt="image-20220118142714952"></th>
</tr>
</thead>
</table>
<p>现需要在素材(treeset01)项目中的指定位置补全代码，选择合适的集合存储各个学科的就业数据并进行遍历。案例实现效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118144626816.png" alt="image-20220118144626816"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、输出的结果是按照平均薪资从大到小进行排序的，因此需要使用到TreeSet集合对象存储数据</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;treeset01》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握Java中TreeSet集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在素材的treeset02项目提供了一段代码，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118164539395.png" alt="image-20220118164539395"></th>
</tr>
</thead>
</table>
<p>上述代码主要实现的功能：</p>
<p>1、读取sku01.xlsx文件中的20000条数据到一个List集合中，excel中的一条数据对应的就是List集合中的一个商品(Sku)对象。</p>
<p>2、根据商品的编码从List集合中查询对应的商品数据在控制台进行输出</p>
<p>目前程序运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118164812538.png" alt="image-20220118164812538"></th>
</tr>
</thead>
</table>
<p>可以看到要找到指定的商品数据，程序需要循环19957次，数据查询效率较低，需要逐条数据进行判断。</p>
<p><strong>需求描述</strong>：对上述代码进行优化，以提高数据的查询效率。优化完毕以后，程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220118180112860.png" alt="image-20220118180112860"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、可以定义一个类(Index)，在该类中定义两个属性：商品的编码，商品在List集合中的标号(索引)</p>
<p>2、遍历List集合，获取商品信息构建成一个个的Index对象</p>
<p>3、将Index对象存储到一个TreeSet集合中，使用商品编码所对应的int类型的值进行排序(考虑使用BigInteger类)</p>
<p>4、更改根据商品的编码搜索商品的逻辑为：先从TreeSet集合对象中根据商品的编码搜索到商品在List集合中的索引，然后在根据这个索引从List集合中获取商品数据</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;treeset02》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day08作业</title>
    <url>/2022/08/03/%E7%AC%AC8%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day08作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>请说明下述程序执行完成以后会输出几个学生的姓名和年龄并说明原因？如果只想保留一个姓名为”黑马”年龄为16的学生应该怎么处理？【业务要求：如果两个学生对象的姓名和年龄都相同则认为</p>
<p>是同一个对象】</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116142128090.png" alt="image-20220116142128090"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">输出结果：会输出<span class="number">4</span>个学生的姓名和年龄</span><br><span class="line">原因：使用HashSet集合存储自定义对象，如果要保证数据的唯一性，要求自定义对象所对应的类必须重写Object类中的hashCode和equals方法，但是Student并没有进行重写，因此会在控制台      输出<span class="number">4</span>个学生的姓名和年龄</span><br><span class="line">只想保留一个姓名为<span class="string">&quot;黑马&quot;</span>年龄为<span class="number">16</span>的学生处理方案：重写Object类中的hashCode和equals方法。如下所示   </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写equals方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">    <span class="keyword">return</span> age == student.age &amp;&amp; name.equals(student.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写hashCode方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">上述代码可以直接使用idea开发工具生，如下所示：</span><br></pre></td></tr></table></figure>

<p>在Student类的空白处按快捷键 alt + insert，此时会弹出一个菜单，如下图所示：</p>
<img src="images/image-20191206144804748.png" alt="image-20191206144804748" style="zoom:25%;" />  

<p>然后选择equals() and hashCode()此时会弹出如下菜单：</p>
<img src="images/image-20191206145032121.png" alt="image-20191206145032121" style="zoom:25%;" />  

<p>然后点击Next，会出现如下菜单</p>
<img src="images/image-20191206145115699.png" alt="image-20191206145115699" style="zoom:25%;" />  

<p>然后点击两次Next就可以生产hashCode方法和equals方法了。</p>
<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述HashSet集合底层的数据结构、扩容原理以及JDK1.8引入红黑树的意义？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br></pre></td></tr></table></figure>

<p> ① Jdk1.7之前(包含Jdk1.7)哈希表的实现是<font color="red" size="3"><strong>数组 + 链表</strong></font>，可以说是一个元素为链表的数组， 如下图所示：    <img src="/images/image-20191205173213225.png" alt="image-20191205173213225"> </p>
<p>每一个Entry可以看做成是一个元素。默认情况下数组的长度为16。</p>
<p>② Jdk1.8之后(包含Jdk1.8)哈希表的实现是<font color="red" size="3"><strong>数组 + 链表 + 红黑树</strong></font>，如下图所示：</p>
<p><img src="/images/image-20191205173725461.png" alt="image-20191205173725461"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">每一个Node可以看做成是一个元素。默认情况下数组的长度为<span class="number">16</span>。当某一个链表的长度超过一定值得时候，此时会将链表变成<span class="string">&quot;红黑树&quot;</span>。</span><br><span class="line"></span><br><span class="line">③ 扩容原理：</span><br><span class="line">	<span class="number">1.</span> 首先根据hash表的长度计算出来一个阈值： 阈值 = hash表的长度 * 比例因子(<span class="number">0.75</span>);</span><br><span class="line">	<span class="number">2.</span> 当每一次添加完元素以后，就会判断当前集合中的元素个数(集合的长度)是否大于这个阈值，如果是，进行扩容，每一次进行<span class="number">2</span>倍扩容</span><br><span class="line">	初始化的阈值 = <span class="number">16</span> （哈希表的默认初始化长度）* <span class="number">0.75</span> = <span class="number">12</span> ；</span><br><span class="line">④ Jdk1<span class="number">.8</span>引入红黑树的意义：为了提高搜索效率。因为采用<span class="string">&quot;红黑树&quot;</span>对元素进行存储，可以将元素分为两部分。那么在进行元素查找的时候类似于<span class="string">&quot;二分思想&quot;</span>进行查找。</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请说明下面程序执行完毕以后在控制台的输出结果是什么？并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116145705899.png" alt="image-20220116145705899"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 控制台输出结果如下所示：  </span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ClassCastException: com.itheima.treemap.demo01.Student cannot be cast to java.lang.Comparable</span><br><span class="line">	at java.util.TreeMap.compare(TreeMap.java:<span class="number">1294</span>)</span><br><span class="line">	at java.util.TreeMap.put(TreeMap.java:<span class="number">538</span>)</span><br><span class="line">	at com.itheima.treemap.demo01.TreeMapDemo01.main(Student.java:<span class="number">30</span>)</span><br><span class="line">② 原因说明：在创建TreeMap集合对象的时候，使用的无参数的构造方法创建，说明要对Map中的键使用自然排序方法进行排序。而自然排序对要求元素所对应的类必须实现Comparable接口，但是案例中的Student类没有实现Comparable接口，因此会报错。 </span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请说明下述程序执行完毕以后在控制台会输出几个元素并且元素的内容是什么？并说明原因？如果想对学生进行先按照年龄从小到大排序，如果年龄相同则按照姓名从小到大进行排序应该怎么实</p>
<p>现？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116150321690.png" alt="image-20220116150321690"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 会输出<span class="number">1</span>个元素					原因：compareTo方法的返回值为<span class="number">0</span>，说明要添加的元素在集合中已经存在了，因此集合中只有一个元素。</span><br><span class="line">② 元素的内容：传智，<span class="number">16</span>，西安    	原因：键相同值替换</span><br><span class="line">③ 想对学生进行先按照年龄从小到大排序，可以对compareTo方法进行如下改造：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="built_in">this</span>.age - o.age ;                                        <span class="comment">// 先比较年龄</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> result1 == <span class="number">0</span> ? <span class="built_in">this</span>.name.compareTo(o.name) : result1 ;    <span class="comment">// 年龄相同比较姓名</span></span><br><span class="line">    <span class="keyword">return</span> result2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请分析下述程序存在的问题并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220114142118152.png" alt="image-20220114142118152"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：程序编译不通过，因为可变参数不是方法参数的最后一个参数，违背了Java中可变参数的语法规则。</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>下述程序执行完毕以后在控制台输出的结果是什么？请从源码的角度分析产生该问题的原因！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个ArrayList集合对象，并向其中添加元素</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;传智播客&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;黑马程序员&quot;</span>) ;</span><br><span class="line">list.add(<span class="string">&quot;传智教育&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上述ArrayList集合转换成不可变的list集合</span></span><br><span class="line">List&lt;String&gt; unmodifiableList = Collections.unmodifiableList(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向unmodifiableList集合中再次添加元素</span></span><br><span class="line">unmodifiableList.add(<span class="string">&quot;itheima&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(String s : unmodifiableList) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">上述程序执行完毕以后，在控制台会输入如下异常：Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class="line">Collections中的unmodifiableList方法的源码如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">unmodifiableList</span><span class="params">(List&lt;? extends T&gt; list)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断list集合是否是RandomAccess类型的，如果是创建一个UnmodifiableRandomAccessList集合对象，如果不是创建一个UnmodifiableList集合对象</span></span><br><span class="line">    <span class="keyword">return</span> (list <span class="keyword">instanceof</span> RandomAccess ? <span class="keyword">new</span> <span class="title class_">UnmodifiableRandomAccessList</span>&lt;&gt;(list) : <span class="keyword">new</span> <span class="title class_">UnmodifiableList</span>&lt;&gt;(list));				</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看UnmodifiableList部分源码</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnmodifiableList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">UnmodifiableCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">283967356065247728L</span>;</span><br><span class="line">		</span><br><span class="line">    	<span class="comment">// 定义成员变量，接收构造方法参数</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; list;</span><br><span class="line"></span><br><span class="line">        UnmodifiableList(List&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; list) &#123;</span><br><span class="line">            <span class="built_in">super</span>(list);</span><br><span class="line">            <span class="built_in">this</span>.list = list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 添加元素方法直接抛出异常</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握Java中Map集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在京东商城上进行商品搜索的时候，往往会有一个搜索的面板用来展示搜索条件供用户实现按照条件搜索的功能，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116190037738.png" alt="image-20220116190037738"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>: 请选择Java中合适的集合对象来存储上述搜索面板中的数据，并进行遍历。效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220116191817867.png" alt="image-20220116191817867"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、搜索类别和搜索条件之间存在对应关系，可以考虑使用Map集合进行存储</p>
<p>2、一个搜索类别对应多个搜索条件并且不能重复，因此搜索条件可以考虑使用Set集合进行存储</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个HashMap来存储京东商城上搜索页面中搜索面板的数据 , 一个类筛选条件对应多个值并且不能重复，因此针对值的部分可以考虑使用Set集合</span></span><br><span class="line">        HashMap&lt;String , Set&lt;String&gt;&gt; searchPanel = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建存储品牌搜索条件的Set集合对象</span></span><br><span class="line">        Set&lt;String&gt; brands = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        brands.add(<span class="string">&quot;电子工业出版社&quot;</span>);</span><br><span class="line">        brands.add(<span class="string">&quot;异步图书&quot;</span>);</span><br><span class="line">        brands.add(<span class="string">&quot;清华大学出版社&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将品牌数据存储到集合中</span></span><br><span class="line">        searchPanel.put(<span class="string">&quot;品牌&quot;</span> , brands) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建计算机与互联网搜索条件的Set集合对象</span></span><br><span class="line">        Set&lt;String&gt; computer = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        computer.add(<span class="string">&quot;编程语言与程序设计&quot;</span>);</span><br><span class="line">        computer.add(<span class="string">&quot;网络与通讯&quot;</span>);</span><br><span class="line">        computer.add(<span class="string">&quot;数据库&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将计算机与互联网数据存储到集合中</span></span><br><span class="line">        searchPanel.put(<span class="string">&quot;计算机与互联网&quot;</span> , computer) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建上市时间搜索条件的Set集合对象</span></span><br><span class="line">        Set&lt;String&gt; upDate = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        upDate.add(<span class="string">&quot;往季&quot;</span>) ;</span><br><span class="line">        upDate.add(<span class="string">&quot;2019年春季&quot;</span>) ;</span><br><span class="line">        upDate.add(<span class="string">&quot;2019年冬季&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将上市时间数据存储到集合中</span></span><br><span class="line">        searchPanel.put(<span class="string">&quot;上市时间&quot;</span> , upDate) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历searchPanel集合对象</span></span><br><span class="line">        searchPanel.forEach((key , value) -&gt; &#123;</span><br><span class="line">            System.out.print(key + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">            value.forEach( s -&gt; &#123;</span><br><span class="line">                System.out.print(s + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握Java中Map集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在真实的开发中为了保证数据的安全性，往往需要将数据存储到磁盘上(内存保存中的数据，当程序重启以后数据就丢失了)。每一次在使用的时候都是通过某种技术从磁盘上读取数据到</p>
<p>内存中，然后进行使用。磁盘数据的读取速度是远远的小于内存的，因此为了提高数据的读取效率，可以将读取到的数据存储到内存中，然后先从内存中读取数据，如果内存中有数据直接进行返</p>
<p>回；如果内存中没有数据再次从磁盘上读取数据，并且将磁盘上读取到的数据再次存储到内存中，供下次进行数据的读取。这样就大大的提高了程序的读取数据效率(从磁盘上读取数据的次数大大</p>
<p>降低了)，这种思想就是<font color='red'>缓存思想</font>。整体的数据读取流程如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220117085244700.png" alt="image-20220117085244700"></th>
</tr>
</thead>
</table>
<p>在设计缓存的时候往往会使用到Map集合进行数据的存储，因为存储在内存中的数据需要设置一个名字，后期就可以根据这个名字获取到对应的数据。这个Map的键的类型是字符串，值的类型可</p>
<p>以有多种：String、List 、Set、HashMap …</p>
<p><strong>需求描述</strong>: 在素材的cache项目中设计了一个缓存工具类RedisTemplate，请在指定的位置补全代码，使Entry程序可以进行正常运行。案例效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220117100211873.png" alt="image-20220117100211873"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在DefaultValueOperations类中补全代码(成员变量位置创建一个HashMap集合对象：键为String类型，值为String类型)</p>
<p>2、在DefaultHashOperations类中补全代码(成员变量位置创建一个HashMap集合对象：键为String类型，值为HashMap&lt;String , String&gt;类型)</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;cache》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握给程序添加缓存的思想，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>: 在素材的use-cache项目中Entry这个类中提供了一个根据商品的条码查询商品数据的方法(getSkuBySn),商品的数据来源于sku01.xlsx表格，读取表格中数据到一个List集合中的代码</p>
<p>已经实现，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220117110924493.png" alt="image-20220117110924493"></th>
</tr>
</thead>
</table>
<p>但是目前这种方式每一次读取数据的时候都是从磁盘中进行读取，效率较低。程序的执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220117105942290.png" alt="image-20220117105942290"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：现需要对Entry类中的getSkuBySn方法添加查询缓存的逻辑代码以提高数据的查询效率。程序执行完毕以后效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220117105701705.png" alt="image-20220117105701705"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、将编程题目二中的cache项目打包成一个jar加入到use-cache项目中的lib目录下</p>
<p>2、在进行查询的时候先从缓存中进行查询，缓存中如果有数据直接返回</p>
<p>3、缓存中没有数据读取磁盘excel文件数据，然后在将获取到的数据存储到缓存中</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;use-cache》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day09作业</title>
    <url>/2022/08/03/%E7%AC%AC9%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day09作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>简述Stream流的使用思想以及获取Stream流的常见方式？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">使用思想：</span><br><span class="line"> ① 生成流： 通过数据源（集合,数组等）生成流</span><br><span class="line"> ② 中间操作：一个流后面可以跟随零个或多个中间操作，其目的主要是打开流，做出某种程度的数据过滤/映射，然后返回一个新的流，交给下一个操作使用</span><br><span class="line"> ③ 终结操作：一个流只能有一个终结操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作</span><br><span class="line">获取Stream流的常见方式：</span><br><span class="line"> ① Collection体系的集合可以直接调用Collection接口中的默认方法stream()去生成流</span><br><span class="line"> ② Map体系的集合可以通过间接的方式去生成流，具体步骤如下所示：</span><br><span class="line">	<span class="number">1.</span>  获取所有的键所对应的Set集合</span><br><span class="line">	<span class="number">2.</span>  然后通过Set集合对象调用Stream方法生成流</span><br><span class="line"> ③ 数组可以通过Stream接口的静态方法of方法生成流</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>如下程序</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220115135752312.png" alt="image-20220115135752312"></th>
</tr>
</thead>
</table>
<p>上述程序执行完毕以后，在控制台的输出结果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220115135838311.png" alt="image-20220115135838311"></th>
</tr>
</thead>
</table>
<p>请说明出现该错误的原因？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：forEach方法是一个终结操作的方法，当执行了一次forEach方法以后，流中的元素就已经被用光了。不能在执行forEach终结操作了。</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>运行如下程序观察控制台输出结果，说明产生该问题的主要原因？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个List集合对象</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;java8&quot;</span>, <span class="string">&quot;stream&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上述list集合所对应的流对象</span></span><br><span class="line">list.stream().map(s -&gt; &#123;</span><br><span class="line">    list.add(<span class="string">&quot;world&quot;</span>) ;                             <span class="comment">// 向list集合中添加元素</span></span><br><span class="line">    <span class="keyword">return</span> s.toUpperCase();                         <span class="comment">// 将流中的元素转换成大写</span></span><br><span class="line">&#125;).forEach( s -&gt; System.out.println(s));            <span class="comment">// 遍历流中的元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">控制台会输出如下异常：Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">主要原因：在通过流处理数据的时候，对数据源进行了修改    </span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请说明如下程序执行完毕以后的结果并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220112185557409.png" alt="image-20220112185557409"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 在io-day01项目目录下生成一个a.txt文件夹</span><br><span class="line">② 在io-day01项目目录下创建itheima/xian文件夹失败，因为mkdir方法只能创建单级文件夹</span><br><span class="line">③ 在io-day01项目中删除itcast文件夹失败，因为delete方法只能删除不带内容的文件夹    </span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>如下程序是计算1-10之间的数据和，请说明如下程序执行完毕以后的结果并说明原因？如果想让程序进行正常执行，应该如何进行改造？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220112191426208.png" alt="image-20220112191426208"></th>
</tr>
</thead>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 程序执行结果：在控制台会输出Exception in thread &quot;main&quot; java.lang.StackOverflowError异常信息。原因：是递归调用没有指定出口</span><br><span class="line">② 让程序正常执行，代码如下所示：答：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用calc方法计算1-10之间的数据之和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calc(<span class="number">10</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算1-number之间的数据之和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> number + calc(number - <span class="number">1</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握JDK1.8的新特性Stream流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：Microsoft Excel是Microsoft(微软)为使用Windows操作系统的电脑编写的一款电子表格软件。在实际的工作中，如果要处理的数据量较大，那么此时会由多个业务人员将要处理的数据</p>
<p>录入到excel中，那么在进行录入的时候可能就会产生数据重复录入。因此在录入完毕以后，往往需要进行数据查重和去重操作。</p>
<p><strong>需求描述</strong>: 在素材的stream01项目的提供了两个excel文件(sku01.xlsx、sku02.xlsx)，这两个excel文件存储的都是商品的数据，在这两个文件中存在一些重复性的数据。现需要在该项目的指定</p>
<p>位置补全相关的代码实现数据去重的操作，并且需要按照商品的价格进行降序排序。程序执行完毕以后可以将处理以后的结果数据存储到一个新的excel文件(sku.xlsx)中。新excel文件的内容如下</p>
<p>所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220115145400786.png" alt="image-20220115145400786"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、读取excel表格中的数据到List集合中代码已经实现</p>
<p>2、将一个List集合中的数据写入到一个excel文件中代码已经实现</p>
<p>3、在Entry类中指定位置补全相关代码</p>
<p>4、在Sku类中的指定位置补全代码</p>
<p>5、如果商品的条码是相同的则认为是同一条数据</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;stream01》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握JDK1.8的新特性Stream流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在完成数据查询功能的时候，如果查询到的满足条件的数据量比较大，为了减少系统内存的消耗。那么此时就需要使用分页查询。分页查询就是一次查询一部分的数据进行返回。比如</p>
<p>京东商城的搜索功能实现的时候使用的就是分页查询。如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220115160446668.png" alt="image-20220115160446668"></th>
</tr>
</thead>
</table>
<p>默认查询的是第一页的数据，当点击对应的页码的时候就会查询指定页码的这一部分的数据。分页查询需要已知两个参数：页码，每页查询的数据条数。通过这两个数据就可以计算出要查询的数据</p>
<p>的开始行号。进而就可以实现分页查询。</p>
<p><strong>需求描述</strong>：将编程题目一中处理完毕的以后的数据集合中的第3页数据写入到新的excel中。在素材的stream02项目的指定位置补全相关代码，新的excel文件的内容如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220115162042738.png" alt="image-20220115162042738"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、读取excel表格中的数据到List集合中代码已经实现</p>
<p>2、将一个List集合中的数据写入到一个excel文件中代码已经实现</p>
<p>3、在Entry类中指定位置补全相关代码</p>
<p>4、在Sku类中的指定位置补全代码</p>
<p>5、如果商品的条码是相同的则认为是同一条数据</p>
<p>6、考虑使用stream流中的skip方法和limit方法(每页查询10条数据)</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;stream02》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握java中File的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：当电脑磁盘上存储的文件越来越多的时候，要从系统中查找某一个文件就变的比较麻烦。为了快速从磁盘上找的某一类文件，此时就可以借助于类似于Everything这样的文件搜索工具</p>
<p>实现文件的搜素。如下所示，就是借助于Everything搜素本地磁盘上所有以.java结尾的文件的效果：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220113155458288.png" alt="image-20220113155458288"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>: 现通过程序模拟Everything搜索工具搜索效果，在素材everthing项目中的指定位置补全代码实现搜索功能。案例的实现效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220113170357844.png" alt="image-20220113170357844"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、需要使用到递归算法</p>
<p>2、控制台输出内容对齐可以调用padRight方法通过补全字符的方式进行实现</p>
<p>3、使用SimpleDateFormat对日期数据进行格式化</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;everthing》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day10作业</title>
    <url>/2022/08/03/%E7%AC%AC10%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day10作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>简述IO流的分类以及输入流和输出流作用？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① </span><br><span class="line">  按照数据的流向划分：  输入流和输出流</span><br><span class="line">  按照操作数据类型划分：字节流和字符流</span><br><span class="line">  将上述的两种划分方式进行结合划分：</span><br><span class="line">    - 字节输入流和字节输出流</span><br><span class="line">    - 字符输入流和字符输出流</span><br><span class="line">② 作用：输入流负责读取数据，输出流负责写数据</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>请说明如下程序执行完毕以后结果并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220112194439032.png" alt="image-20220112194439032"></th>
</tr>
</thead>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：上述程序执行完毕以后，会在控制台输出Exception in thread &quot;main&quot; java.io.FileNotFoundException: itheima (拒绝访问。)异常信息。因为itheima是一个文件夹，不是文件。数据不能写入到文件夹中。</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>如下两段程序:</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220113151748400.png" alt="image-20220113151748400"></th>
<th><img src="/images/image-20220113151658310.png" alt="image-20220113151658310"></th>
</tr>
</thead>
</table>
<p>上述程序是分别采用基本的字节输入和输出流和高效的字节输入和输出流将D:\a.txt文件中的内容复制到D:\b.txt文件中。如果a.txt文件的大小大于8192字节小于16384个字节，那么哪一种方式</p>
<p>复制文件的效率较高并说明原因？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">基本的字节输入和输出流复制文件的效率较高，因为通过基本的字节输入和输入流在进行上述文件复制的时候，在读取数据的时候只需要和操作系统交互一次。而使用高效的字节输入和输出流复制文件的时候，由于没有指定字符缓存区的大小，默认大小就是<span class="number">8192</span>个字节。而要读取的字节大小为<span class="number">16384</span>个字节，因此需要和操作系统交互两次，所以效率较低。    </span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>Java中的字节流是可以操作任意类型的数据(音频、视频、文本…),请简述字符流出现的意义？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">	一个中文汉字在计算机上进行存储的时候使用的是多个字节进行存储，如果使用字节流来读取汉字，要读取到一个完整的汉字可能需要读取多次。比较麻烦，为了简化对中文汉字的操作，Java给我们提供了字符流。</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请将如下程序分别在idea和dos控制台进行执行，分析输出不同结果的原因？如何解决dos控制台结果的输出问题？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对&quot;中国&quot;进行编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span> ;</span><br><span class="line"><span class="type">byte</span>[] bytes = s1.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对上述得到的字节数组进行编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes , <span class="string">&quot;UTF-8&quot;</span>) ;</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 上述程序在idea中执行可以正常输出中国。原因：在进行编码的时候没有显示的指定使用的字符编码表，那么此时默认使用的是平台(操作系统)所对应的字符编码表。而现在大家使用的都是	    windows中文系统，因此默认的编码表就是GBK。但是在idea中运行程序的时候，添加了一个JVM参数-Dfile.encoding=UTF-8。更改了平台默认的字符编码，所以不会出现乱码。</span><br><span class="line">② 在dos控制台执行上述程序的时候会出现乱码。因为平台默认的字符编码表为GBK，使用GBK进行编码，使用UTF-8进行解码。字符编码表不一致此时就会出现乱码。</span><br><span class="line">③ 解决dos控制台执行程序乱码问题：可以在运行程序的时候添加一个JVM参数-Dfile.encoding=UTF-8。 如下所示</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20220111161823303.png" alt="image-20220111161823303"></th>
</tr>
</thead>
</table>
<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握java中字节输入流和字节输出流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：为了保证磁盘文件数据的安全性，就需要对原始文件进行加密存储，再使用的时候再对其进行解密处理。加密解密原理：对原始文件中的每一个字节数据进行更改，然后将更改以后的</p>
<p>数据存储到新的文件中。</p>
<p><strong>需求描述</strong>: 编写一个加密解密程序。</p>
<p><strong>实现提示</strong>：</p>
<p>1、通过字节输入流读取原始文件中的每一个字节数据然后对其进行处理</p>
<p>2、通过字节输出流将处理以后的字节数据写入到另外一个文件中</p>
<p>3、对字节数据的处理方式可以使用异或运算符异或一个数</p>
<p>4、为了提高加解密的效率可以考虑使用高效的字节输入和输出流</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        encryptAndDecryption(<span class="string">&quot;E:/a.mp4&quot;</span>  , <span class="string">&quot;E:/b.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        encryptAndDecryption(<span class="string">&quot;E:/b.mp4&quot;</span>  , <span class="string">&quot;E:/a.mp4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密和解密程序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">encryptAndDecryption</span><span class="params">(String souceFilePath , String destFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个高效的字节输入流对象关联原始文件</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(souceFilePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个高效的字节输出流对象关联目标文件</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次读取一个字节数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">by</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>((by = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            by ^= <span class="number">2</span> ;                       <span class="comment">// 一个数对另外一个数异或两次其值不变</span></span><br><span class="line">            bos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握java中字节输入流和字节输出流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：二维码又称二维条码，常见的二维码为QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能</p>
<p>表示更多的数据类型。下方给大家展示的是一个个人信息的二维码：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220113193514754.png" alt="image-20220113193514754"></th>
</tr>
</thead>
</table>
<p>使用微信扫描该二维码，可以得到二维码所承载数据，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220113193609657.png" alt="image-20220113193609657"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：在素材的code项目中指定位置补全代码，获取个人信息二维码保存到本地磁盘。</p>
<p><strong>实现提示</strong>：</p>
<p>1、生成二维码的程序已经在素材文件中提供好了(qrcode.jar)， 在dos控制台通过<code>java -jar qrcode.jar</code>启动该程序。效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220114080836207.png" alt="image-20220114080836207"></th>
</tr>
</thead>
</table>
<p>2、在code项目中，通过程序请求生成二维码程序获取字节输入流代码已经提供</p>
<p>3、保存二维码数据到本地文件，这个本地文件的后缀名可以为png</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;code》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day11作业</title>
    <url>/2022/08/03/%E7%AC%AC11%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day11作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>如下程序执行完毕以后，a.txt文件中的内容是什么并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220212213845991.png" alt="image-20220212213845991"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">执行效果：在a.txt文件中没有任何内容</span><br><span class="line">原因说明：使用字符流写数据并不是直接将数据写入到磁盘中，而是先写入到了缓存区中。而代码中没有对缓存区进行刷新也没有关闭流对象，因此数据就没有被写入到磁盘中。    </span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述flush方法和close方法的区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① flush方法表示刷新缓存区，调用完flush方法以后流对象还可以继续使用</span><br><span class="line">② close方法关闭流对象，在关闭之前会执行刷新缓存区的操作，流对象一旦被关闭了，就不能在使用了。    </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>请分析如下程序执行完毕以后a.txt文件的内容是什么并说明原因？如果需要在a.txt文件中保存所有数据应该怎么处理？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220110181727085.png" alt="image-20220110181727085"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 上述程序执行完毕以后a.txt文件中的内容为：传智播客。因为第二次在写数据的时候，创建了一个新的流对象，这种创建方式会清空原有文件中的内容。</span><br><span class="line">② 要留所写的所有数据：在创建fw2对象的时候，使用如下方式： </span><br><span class="line">   <span class="type">FileWriter</span> <span class="variable">fw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>运行下述程序会出现什么错误？请说明出现该错误的原因以及如何解决该错误？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220212213638409.png" alt="image-20220212213638409"></th>
</tr>
</thead>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 运行上述程序会出现如下异常：Exception in thread &quot;main&quot; java.io.NotSerializableException: com.itheima.io.User</span><br><span class="line">② 原因：使用序列化流对对象进行序列化操作的时候，要求序列化对象所对应的类实现序列化接口。而User类并没有实现序列化接口。</span><br><span class="line">③ 解决方案：当User类实现序列化接口。如果所示：</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>请分析产生如下错误的原因以及对应的解决方案？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: com.itheima.io.obj.User; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4001622083751882644</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = <span class="number">6175241864707791838</span></span><br><span class="line">	at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:<span class="number">687</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:<span class="number">1883</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:<span class="number">1749</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:<span class="number">2040</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:<span class="number">1571</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:<span class="number">431</span>)</span><br><span class="line">	at com.itheima.io.obj.Demo01.main(User.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 错误原因：序列化需要一个serialVersionUID（序列化ID）, 修改完类文件了以后serialVersionUID与序列化之前不一致了，校验失败了，就抛出异常了。</span><br><span class="line">② 解决方案：给对象生成一个固定serialVersionUID    </span><br><span class="line">具体实现步骤：</span><br><span class="line">	<span class="number">1.</span>  idea设置：setting ---&gt; Inspections ---&gt; 搜索serialVersionUID ---&gt; 勾选<span class="string">&quot;Serializable class without serialVersionUID&quot;</span></span><br><span class="line">	<span class="number">2.</span>  然后光标放在类明上，使用快捷键：alt + enter，此时会弹出如下对话框：   </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20220111163202387.png" alt="image-20220111163202387"></th>
</tr>
</thead>
</table>
<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握java中高效的字符流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求描述</strong>：某公司年会需要搞抽奖活动以此感谢公司员工这一年的辛勤付出。要求当某一个员工已经被抽取到了，再抽取下一个奖项的时候该员工不能再次被抽到。请编写程序实现该抽奖活动。</p>
<p>程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111103927727.png" alt="image-20220111103927727"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在提供的素材(lucky)项目中的指定位置补全代码实现功能</p>
<p>2、使用BufferedReader读取employee_names.txt文件中的数据，并将其存储到一个集合中</p>
<p>3、生成一个随机数，作为集合元素的索引</p>
<p>4、根据该索引从集合中获取一个员工姓名，并将该员工姓名从集合中移除掉</p>
<p>5、将集合中剩余的员工姓名通过BufferedWriter再一次写入到employee_names.txt文件中</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;lucky》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握java中Properties集合的使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：电子邮件的应用非常广泛，常见的如在某网站注册了一个账户，自动发送一封激活邮件，通过邮件找回密码，自动批量发送活动信息等。很显然这些应用不可能和我们自己平时发邮件</p>
<p>一样，先打开浏览器，登录邮箱，创建邮件再发送。而是通过程序实现邮件的发送。在素材文件中提供了一个项目prop，可以实现通过Java代码发送邮件。如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111152942695.png" alt="image-20220111152942695"></th>
</tr>
</thead>
</table>
<p>上述代码实现了：通过网易邮箱<a href="mailto:&#x69;&#x74;&#99;&#x61;&#115;&#x74;&#95;&#x68;&#108;&#x79;&#x5f;&#x30;&#x31;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;">&#x69;&#x74;&#99;&#x61;&#115;&#x74;&#95;&#x68;&#108;&#x79;&#x5f;&#x30;&#x31;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a>向<a href="mailto:&#51;&#x34;&#50;&#x32;&#x34;&#53;&#x32;&#48;&#57;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;">&#51;&#x34;&#50;&#x32;&#x34;&#53;&#x32;&#48;&#57;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;</a>发送了一份邮件。效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111155444443.png" alt="image-20220111155444443"></th>
</tr>
</thead>
</table>
<p>但是上述程序存在一定的弊端：硬编码。这样不利于后期代码的维护，比如要修改发件人、收件人、邮件主题、邮件正文等信息的时候都需要对代码进行修改。</p>
<p><strong>需求描述</strong>：使用Properties集合对上发送邮件的代码进行优化，以提高代码的维护性。</p>
<p><strong>实现提示</strong>：</p>
<p>1、上述程序中关于发件人和收件人是使用老师提供的账号。如果需要使用自己的账号来实现邮件的发送，请注册网易云邮箱，注册地址：<a href="https://mail.163.com/%E3%80%82%E6%B3%A8%E5%86%8C%E5%AE%8C%E6%AF%95%E4%BB%A5%E5%90%8E%E9%9C%80%E8%A6%81%E5%BC%80%E9%80%9A%E6%8C%87%E5%AE%9A%E7%9A%84">https://mail.163.com/。注册完毕以后需要开通指定的</a></p>
<p>服务才可以实现邮件的发送。如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111154022611.png" alt="image-20220111154022611"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/image-20220111154222354.png" alt="image-20220111154222354"></td>
</tr>
</tbody></table>
<p>注意：<code>保存好授权密码，程序中需要使用</code>。</p>
<p>2、上述发送邮件程序中可更改的参数：发件人邮箱账号信息、收件人收件账号、邮箱主题、邮箱正文</p>
<p>3、创建一个properties属性文件，将上述可更改的内容定义到该文件中</p>
<p>4、在程序中读取第三步创建的文件内容到一个Properties集合中</p>
<p>5、从Properties集合中获取参数信息更改原有程序</p>
<p>6、电脑需要联网</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;prop》</p>
<h2 id="2-3-编程题目三"><a href="#2-3-编程题目三" class="headerlink" title="2.3 编程题目三"></a>2.3 编程题目三</h2><p><strong>训练目标</strong>：掌握java中高效的字符流和转换流的基本使用，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序。通过程序请求指定的网页，获取网</p>
<p>页数据对应的字节输入流对象，然后通过该输入流读取网页数据，再次对网页数据进行筛选获取有价值的数据，然后再将数据存储起来用于后期做数据分析。</p>
<p><strong>需求描述</strong>：在素材的server.jar程序中存在两个网页：1.html和2.html 。现需要将这两个网页中”西安黑马”就业薪资信息，保存到一个本地文件中。程序运行完毕以后，本地文件中的数据如下所</p>
<p>示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111132905301.png" alt="image-20220111132905301"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、通过<code>java -jar server.jar</code>运行server.jar程序，程序运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111133429604.png" alt="image-20220111133429604"></th>
</tr>
</thead>
</table>
<p>2、server.jar程序启动起来以后，可以直接通过浏览器访问该程序中的1.html和2.html查看页面内容，如下所示访问的是1.html页面中的内容：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220111134152327.png" alt="image-20220111134152327"></th>
</tr>
</thead>
</table>
<p>查看2.html网页内容，在浏览器的地址栏输入该地址：<a href="http://localhost/html/2.html">http://localhost/html/2.html</a></p>
<p>3、通过程序访问server.jar程序中的网页代码已在素材crawler项目中提供好了</p>
<p>4、在素材crawler项目的指定位置补全代码实现功能</p>
<p>5、进行字符串中特定字符的替换可以考虑使用正则表达式</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;crawler》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day12作业</title>
    <url>/2022/08/03/%E7%AC%AC12%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day12作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>简述一下并发和并行的区别？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答: </span><br><span class="line">①并行：在同一时刻，有多个指令在多个CPU上同时执行。</span><br><span class="line">②并发：在同一时刻，有多个指令在单个CPU上交替执行。</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述什么是线程，什么是进程？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">进程:是正在运行的程序，是操作系统进行资源分配和调度的一个独立单位。</span><br><span class="line">线程:是进程中的单个顺序控制流，是程序中的一条执行路径，是cpu调度和分派的基本单位。</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>简述启动线程使用的是什么方法以及start方法和run方法的区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">启动线程：使用start方法启动线程</span><br><span class="line">start方法和run方法的区别：</span><br><span class="line">①start方法是用来启动线程的，只能被调用一次</span><br><span class="line">②run方法中封装的是要被线程所执行的代码，可以被调用多次</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>简述创建多线程常见方式以及它们之间的优缺点？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">创建线程存在<span class="number">3</span>中方式：</span><br><span class="line">    ①：继承Thread类，重写run方法</span><br><span class="line">    ②：实现Runnable接口，并重写该接口的run方法</span><br><span class="line">    ③：实现Callable接口，重写call方法</span><br><span class="line">优缺点：</span><br><span class="line">    ①：实现Runnable、Callable接口</span><br><span class="line">    	优点: 扩展性强，实现该接口的同时还可以继承其他的类</span><br><span class="line">    	缺点: 编程相对复杂，不能直接使用Thread类中的方法</span><br><span class="line">    ②：继承Thread类</span><br><span class="line">    	优点: 编程比较简单，可以直接使用Thread类中的方法</span><br><span class="line">    	缺点: 可以扩展性较差，不能再继承其他的类  </span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>在素材的文件夹中给大家提供了一个可运行的程序包(ticket.jar)，该程序是模拟电影票的买票，是通过三个窗口(3个线程)共出售100张票。 现在运行该程序包出现了如下图所示情况：</p>
<p><img src="/images/image-20211218190254928.png" alt="image-20211218190254928">  </p>
<p>请简述出现该问题的原因对应的解决方案？</p>
<p>提示：</p>
<p>1、运行jar文件可以使用: java -jar ticket.jar</p>
<p>2、从线程安全角度作答</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">程序的运行结果可以说明出现线程安全问题。</span><br><span class="line">线程安全问题产生的原因：</span><br><span class="line">	多个线程同时对共享数据进行操作(增、删、改)时，由于CPU的调度问题，导致单个线程无法一次性完成对共享资源的操作，出现了数据不一致的问题。</span><br><span class="line">解决方案：</span><br><span class="line">	①从程序设计的角度考虑，尽量不要让多个线程去操作共享数据；</span><br><span class="line">	②使用同步技术（synchronize或lock），使得同一时刻只能有一个线程对共享数据进行操作</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>在素材的文件夹中给大家提供了一个可运行的程序包(demo.jar)，现在运行该程序包出现了程序停止不了的情况，如下图所示：</p>
<p><img src="/images/image-20211218183729610.png" alt="image-20211218183729610">  </p>
<p>请分析导致该程序出现问题可能原因是什么？并简述你的分析过程名得出真正的原因？</p>
<p>提示：</p>
<p>①运行jar文件可以使用: java -jar demo.jar</p>
<p>②可以使用jdk自带的工具：jps、jstack</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">程序出现的问题是程序一直处于运行状态，没有停止。</span><br><span class="line">产生该问题可能的原因：</span><br><span class="line">①程序中存在死循环</span><br><span class="line">②程序中存在死锁现象</span><br><span class="line"></span><br><span class="line">分析过程：</span><br><span class="line">如果是死循环导致程序该问题，一般情况下CPU的使用率都比较高，可以先查看一下CPU的使用率。如下图所示:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20211218203919858.png" alt="image-20211218203919858"></th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th><img src="/images/image-20211218204024724.png" alt="image-20211218204024724"></th>
</tr>
</thead>
</table>
<p>控制台最后输出的内容为：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211218204137201.png" alt="image-20211218204137201"></th>
</tr>
</thead>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">得出结论：程序出现问题的主要原因是因为死锁导致。</span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握java中线程创建，以及理解线程在实际开发中的应用</p>
<p><strong>需求描述</strong>：某系统要实现一个邮件激活注册用户功能，先要求当用户注册成功以后，需要给用户发送一份激活邮件，并且要求激活邮件发送成功与否不能影响注册功能。案例的实现效果如下所</p>
<p>示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211218201333459.png" alt="image-20211218201333459"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>​	1、基于提供的基础代码(UserRegister.java)进行功能的实现即可</p>
<p>​	2、只需要通过控制台的输出模拟发送邮件功能</p>
<p><strong>实现思路</strong>：</p>
<p>​	1、要求激活邮件发送成功与否不能影响注册功能，因此发送邮件的功能需要开启一个独立的线程进行实现</p>
<p>​	2、创建一个线程的方式有多种，任意选择一种进行实现即可。</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendEmailThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义成员变量，来存储用户名</span></span><br><span class="line">    <span class="keyword">private</span> String email ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SendEmailThread</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span> + email + <span class="string">&quot;发送激活邮件成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册用户代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegister</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 键盘录入要注册的用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in) ;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入注册邮箱号：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户输入的用户名和密码存储到文件中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> email + <span class="string">&quot;=&quot;</span> + password ;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;users.properties&quot;</span>));</span><br><span class="line">        bw.write(info);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 补全代码实现发送邮件功能</span></span><br><span class="line">        <span class="type">SendEmailThread</span> <span class="variable">sendEmailThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendEmailThread</span>(email) ;</span><br><span class="line">        sendEmailThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册成功提示信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜您注册成功，请前往注册邮箱进行激活操作！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：更够使用jdk所提供的锁机制解决线程安全问题，以及理解锁在实际开发中的应用</p>
<p><strong>需求描述</strong>：某家庭聚会组织了”抢红包”的活动，现在某家庭成员打算发3个定额红包[3个20元红包]，现由5个家庭成员进行快抢，请使用多线程模拟该活动！实现效果如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211218190751197.png" alt="image-20211218190751197"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>​	1、5个家庭成员相当于5个线程</p>
<p>​	2、3个红包是共享数据</p>
<p>​	3、每一个成员抢到一个红包以后，红包的总数量需要减一</p>
<p>​	4、存在多个线程访问共享数据的情况，因此需要考虑线程安全问题</p>
<p>​	5、红包金额在控制台直接输出20即可</p>
<p><strong>实现思路</strong>：</p>
<p>​	1、定义一个类，实现Runnable接口</p>
<p>​	2、在该类中定义一个int类型的变量，初始值为3，表示3个红包</p>
<p>​	3、重写Runnable接口中的run方法，run方法的实现逻辑如下所示</p>
<p>​		 ①判断红包的总数量是否大于0，如果是在控制台输出”恭喜xxx，你成功抢到一个20元的红包”，红包总数量减一</p>
<p>​		 ②如果红包的总数量小于等于0，此时在控制台输出”xxx抱歉，红包已经被抢完了”</p>
<p>​	4、编写测试类</p>
<p>​		①创建实现了Runnable接口的子类对象</p>
<p>​		②创建5个Thread对象，把第一步创建的对象作为Thread的构造方法参数传递过来</p>
<p>​		③启动5个线程</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedWarsRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在该类中定义一个int类型的变量，初始值为3，表示3个红包</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">redWarsCount</span> <span class="operator">=</span> <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用同步代码块保证共享数据的安全性</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断红包的总数量是否大于0，如果是在控制台输出&quot;恭喜xxx，你成功抢到一个20元的红包&quot;，红包总数量减一</span></span><br><span class="line">            <span class="keyword">if</span>(redWarsCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;,您成功抢到一个20元的红包&quot;</span>);</span><br><span class="line">                redWarsCount-- ;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;     <span class="comment">// 如果红包的总数量小于等于0，此时在控制台输出&quot;抱歉，红包已经被抢完了&quot;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抱歉，红包已经被抢完了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedWarsRunnableDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建实现了Runnable接口的子类对象</span></span><br><span class="line">        <span class="type">RedWarsRunnable</span> <span class="variable">redWarsRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedWarsRunnable</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建5个Thread对象，把第一步创建的对象作为Thread的构造方法参数传递过来</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(redWarsRunnable , <span class="string">&quot;黄蓉&quot;</span>) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(redWarsRunnable , <span class="string">&quot;郭靖&quot;</span>) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(redWarsRunnable , <span class="string">&quot;黄药师&quot;</span>) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(redWarsRunnable , <span class="string">&quot;周伯通&quot;</span>) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(redWarsRunnable , <span class="string">&quot;瑛姑&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动5个线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



































]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day13作业</title>
    <url>/2022/08/03/%E7%AC%AC13%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day13作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>在素材的文件夹中给大家提供了一个可运行的程序包(threadState.jar),请运行该java包，如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211222133322245.png" alt="image-20211222133322245"></th>
</tr>
</thead>
</table>
<p>输入正确的线程状态使程序可以正常执行完毕！请依次说明线程对应的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：NEW、RUNNABLE、TIMED_WAITING、RUNNABLE、WAITING、RUNNABLE、BLOCKED、RUNNABLE、TERMINATED</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述通过ThreadPoolExecutor创建线程池时，构造方法对应的7个参数分别表示什么意思？并说明常见的任务的拒绝策略都有哪些？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">7个参数的含义：</span><br><span class="line">	corePoolSize：   核心线程的最大值，不能小于0</span><br><span class="line">    maximumPoolSize：最大线程数，不能小于等于0，maximumPoolSize &gt;= corePoolSize</span><br><span class="line">    keepAliveTime：  空闲线程最大存活时间,不能小于0</span><br><span class="line">    unit：           时间单位</span><br><span class="line">    workQueue：      任务队列，不能为null</span><br><span class="line">    threadFactory：  创建线程工厂,不能为null      </span><br><span class="line">    handler：        任务的拒绝策略,不能为null </span><br><span class="line">常见的任务拒绝策略：</span><br><span class="line">    ThreadPoolExecutor.AbortPolicy: 		    丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</span><br><span class="line">    ThreadPoolExecutor.DiscardPolicy： 		   丢弃任务，但是不抛出异常 这是不推荐的做法。</span><br><span class="line">    ThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。</span><br><span class="line">    ThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。   </span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>简述线程池的工作流程？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">当我们通过submit方法向线程池中提交任务的时候，具体的工作流程如下：</span><br><span class="line">①客户端每次提交一个任务，线程池就会在核心线程池中创建一个工作线程来执行这个任务。当核心线程池中的线程已满时，则进入下一步操作。</span><br><span class="line">②把任务试图存储到工作队列中。如果工作队列没有满，则将新提交的任务存储在这个工作队列里，等待核心线程池中的空闲线程执行。如果工作队列满了，则进入下个流程。</span><br><span class="line">③线程池会再次在非核心线程池区域去创建新工作线程来执行任务，直到当前线程池总线程数量超过最大线程数时，就是按照指定的任务处理策略处理多余的任务。</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>简述网络编程三要素以及它们的含义？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">①IP地址</span><br><span class="line">  要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</span><br><span class="line">  </span><br><span class="line">② 端口</span><br><span class="line">  网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</span><br><span class="line"></span><br><span class="line">③协议</span><br><span class="line"></span><br><span class="line">  通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>简述ipv4和ipv6的组成规则？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">①ipv4</span><br><span class="line">  由一个32位的二进制数据组成，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP   地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”。</span><br><span class="line">②ipv6</span><br><span class="line">  采用128位地址长度，每16个字节一组，分成8组十六进制数。</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>简述UDP协议的特点？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">  1. UDP协议是一种面向非连接的协议</span><br><span class="line">  2. UDP协议是一种不可靠的协议</span><br><span class="line">  3. UPD协议是基于数据包进行传输,数据包不能超过64K</span><br><span class="line">  4. UDP协议的它的通信效率很高</span><br></pre></td></tr></table></figure>



<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握java中线程池的使用，以及理解线程池在实际开发中的应用</p>
<p><strong>需求描述</strong>：在提供的素材文件中(images-url.txt)20000条网络图片地址数据。在素材文件夹中还给大家提供了下载这些图片的代码(DownLoadImage01.java)。现运行这段代码可以实现网络图片</p>
<p>的下载功能，但是该程序下载完这些图片需要消耗大约7分钟的时间，耗时较长。请分析该程序耗时的主要原因并在提供的素材(DownLoadImage02.java)的指定位置补全代码提高下载图片的效</p>
<p>率。</p>
<p><strong>实现提示</strong>：</p>
<p>1、需要连接外网</p>
<p>2、可以使用多线程对下载代码进行处理</p>
<p>3、让每一个线程下载一部分的图片数据</p>
<p>4、为了减少线程创建和销毁所消耗的系统资源，可以考虑使用线程池</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该类用于实现图片的下载功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownLoadImage02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个集合来存储读取到的数据</span></span><br><span class="line">        List&lt;String&gt; dataInfo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个输入流对象，读取数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;images-url.txt&quot;</span>)) ;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            dataInfo.add(line) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放流资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 补全代码</span></span><br><span class="line">        <span class="comment">// 1、调用averageAssign方法对集合进行切分，可以将集合切换为10份，每一份2000条数据</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; lists = averageAssign(dataInfo, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建一个线程池对象</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span> , <span class="number">20</span> , <span class="number">60</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">5</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、遍历lists集合</span></span><br><span class="line">        lists.forEach( urlLists -&gt; &#123;</span><br><span class="line">            threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span>(String url : urlLists) &#123;</span><br><span class="line">                    downLoad(url);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、关闭线程池</span></span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片下载的代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url：要下载的图片地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downLoad</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url).openConnection();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\images&quot;</span>) ;</span><br><span class="line">            <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">                file.mkdirs() ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(file ,  UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)) + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>] ;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bytes , <span class="number">0</span> , len);</span><br><span class="line">                fos.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            fos.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对集合进行拆分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source：要拆分的集合对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n：要拆分的份数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; <span class="title function_">averageAssign</span><span class="params">(List&lt;T&gt; source, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;T&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;T&gt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> source.size() % n;  <span class="comment">//(先计算出余数)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> source.size() / n;  <span class="comment">//然后是商</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//偏移量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            List&lt;T&gt; value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (remainder &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value = source.subList(i * number + offset, (i + <span class="number">1</span>) * number + offset + <span class="number">1</span>);</span><br><span class="line">                remainder--;</span><br><span class="line">                offset++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = source.subList(i * number + offset, (i + <span class="number">1</span>) * number + offset);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握UDP协议通讯代码书写，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：dos命令ping是用来检测本地计算机是否可以和指定的ip地址的计算机进行正常通讯。使用方式如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping ip地址/域名</span><br></pre></td></tr></table></figure>

<p>如果可以进行正常通讯，此时在控制台输出的内容如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228104233848.png" alt="image-20211228104233848"></th>
</tr>
</thead>
</table>
<p>如果不可以进行正常通讯，此时在控制台输出的内容如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228104412918.png" alt="image-20211228104412918"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：使用UDP协议的通讯来模拟ping命令的执行效果。</p>
<p>①正常通讯，在控制台输出如下内容</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228104628019.png" alt="image-20211228104628019"></th>
</tr>
</thead>
</table>
<p>②不能正常通讯，在控制台输出如下内容：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228104757144.png" alt="image-20211228104757144"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、实现原理就是发送端每隔1秒向接收端发送数据，然后等待接收端进行数据返回</p>
<p>2、接收端获取到数据以后，将数据转换成大写进行返回</p>
<p>3、如果接收端没有启动，那么此时发送端就无法获取到接收端所发送过来的数据，那么此时提示超时</p>
<p>4、通过调用DatagramSocket中的setSoTimeout设置接收数据的最大等待时间</p>
<p>5、控制台输出了5次内容，因此需要循环5次来实现数据的传输</p>
<p>6、数据格式说明</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228110025363.png" alt="image-20211228110025363"></th>
</tr>
</thead>
</table>
<p><strong>代码实现</strong>：</p>
<p>①接收端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpPingService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建UDP通讯的DatagramSocket对象，并且暴露端口为80</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不断读取发送端所发送过来的数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个字节数组，用来存储读取到的数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建DatagramPacket对象，并且进行数据的读取操作</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>( data , data.length);</span><br><span class="line">            datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从数据中获取读取到的数据，并将其转换成大写</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span> , datagramPacket.getLength(),<span class="string">&quot;UTF-8&quot;</span>).toUpperCase();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把读取到的数据转换成字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] data1 = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建DatagramPacket对象封装给发送端要返回的数据</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">datagramPacket1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>( data1 , data1.length , datagramPacket.getAddress() , datagramPacket.getPort());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数据到发送端</span></span><br><span class="line">            datagramSocket.send(datagramPacket1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②发送端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpPingClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象，并设置为接收到数据时的超时时间单位为秒</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        datagramSocket.setSoTimeout(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环5次发送数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt;= <span class="number">5</span> ; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建需要发送的数据将其封装到datagramPacket对象中，然后调用DatagramSocket对象的send方法发送数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Ping &quot;</span> + i + <span class="string">&quot; &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().toString();</span><br><span class="line">            <span class="type">byte</span>[] data = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data,data.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>),<span class="number">80</span>);</span><br><span class="line">            System.out.print(str + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();        <span class="comment">// 记录发送数据开始时间</span></span><br><span class="line">            datagramSocket.send(datagramPacket);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建DatagramPacket对象来接收接收端返回的数据</span></span><br><span class="line">            <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">datagramPacket1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data1 , data1.length);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收数据</span></span><br><span class="line">                datagramSocket.receive(datagramPacket1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解析数据并将其输出到控制台</span></span><br><span class="line">                <span class="type">byte</span>[] packet1Data = datagramPacket1.getData();</span><br><span class="line">                <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet1Data,<span class="number">0</span> , datagramPacket1.getLength(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(str1+<span class="string">&quot;  &quot;</span>+(endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 线程休眠1s</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 输出超时时信息</span></span><br><span class="line">               System.out.print(<span class="string">&quot;超时&quot;</span>);</span><br><span class="line">               <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">               System.out.println(<span class="string">&quot;  &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





































]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day14作业</title>
    <url>/2022/08/03/%E7%AC%AC14%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day14作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>简述TCP协议的特点？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">TCP协议的特点：</span><br><span class="line">  1. TCP协议是一种面向连接的协议</span><br><span class="line">  2. TCP协议是一种可靠的协议</span><br><span class="line">  3. TCP协议是基于IO流进行数据传输,传输数据无大小限制</span><br><span class="line">  4. TCP协议的它的通信效率比较低</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述三次握手过程？</p>
<p>提示：</p>
<p>1、从数据传输方式进行说明</p>
<p>2、可以使用wireshark抓包工具抓取数据传输的过程</p>
<p>3、wireshark软件的使用在素材文件夹(Wireshark)中以及提供好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：借助于工具wireshark来抓取TCP客户端与服务端建立连接时数据传输的过程，对应的测试代码如下所示：</span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Socket对象</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;169.254.170.6&quot;</span> , <span class="number">9999</span>) ;   <span class="comment">// 169.254.170.6这个地址是安装wireshark的时候产生的本地回环地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  让线程休眠60s</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">60</span>);</span><br></pre></td></tr></table></figure>

<p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ServerSocket对象</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让线程休眠60s</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">60</span>);</span><br></pre></td></tr></table></figure>

<p>数据传输过程如下所示：</p>
<p>首先运行服务端，然后在运行客户端，在wireshark工具中捕获完整的通信过程，结果如下图所示：</p>
<p><img src="/images/1572261442296.png" alt="1572261442296"> </p>
<p>第一次”握手”如下图所示</p>
<p><img src="/images/1572262080849.png" alt="1572262080849"> </p>
<p>在第一次”握手”时，客户端向服务端发送SYN标志位，目的是与服务端建立连接。Seq代表sequence number(发送数据流序号), 例如：Seq的值是5,说明在数据流中曾经一共发送了 1, 2, 3，4 这</p>
<p>4次数据。而在本次”握手”中, Seq的值是0，代表客户端曾经没有给服务端发送数据。另外Len&#x3D;0也可以看出来是没有数据可供发送的，客户端仅仅发送一个SYN标志位到服端代表要进行连接。</p>
<p>第二次”握手”如下图所示</p>
<p><img src="/images/1572262294729.png" alt="1572262294729"> </p>
<p>第二次”握手”时，服务端向客户端发送 SYN ACK 标志位，其中ACK标志位表示是对收到的数据包的确认，说明服务端接收到了客户端的连接。ACK的值是1，表示服务端期待下一次从客户端发送</p>
<p>数据流的序列号是1，而Seq&#x3D;0代表服务端曾经并没有给客户端发送数据，而本次也没有发送数据，因为Len&#x3D;0也证明了这一点。</p>
<p>第三次”握手”如下图所示</p>
<p><img src="/images/1572262536958.png" alt="1572262536958"> </p>
<p>第三次“握手”时，客户端向服务端发送的ACK标志位为1, Seq的值是1。Seq&#x3D;l代表这正是服务端所期望的Ack&#x3D;1。Len&#x3D;0说明客户端这次还是没有向服务端传递数据，而客户端向服务端发送</p>
<p>ACK 标志位为1的信息，说明客户端期待服务端下一次传送的Seq的值是1。</p>
<p>连接建立过程总结：</p>
<img src="images/1572264045637.png" alt="1572264045637" style="zoom:33%;" /> 

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>简述四次挥手过程？</p>
<p>提示：</p>
<p>1、从数据传输方式进行说明</p>
<p>2、可以使用wireshark抓包工具抓取数据传输的过程</p>
<p>3、wireshark软件的使用在素材文件夹(Wireshark)中以及提供好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：借助于wireshark这个抓包工具来抓取连接断开的整个数据传输的过程。对应的测试代码如下所示：</span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Socket对象</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;169.254.170.6&quot;</span> , <span class="number">9999</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程休眠</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建ServerSocket对象</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接对象</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程休眠</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure>

<p>首先运行服务端，然后在运行客户端，在wireshark工具中捕获完整的通信过程，结果如下图所示：</p>
<p><img src="/images/1572267382637.png" alt="1572267382637"> </p>
<p>第一次”挥手”如下图所示</p>
<p><img src="/images/1572267727060.png" alt="1572267727060"> </p>
<p>在第一次”挥手”时，客户端到服务器发送标志位FIN ACK,告知服务端客户端关闭了。Seq&#x3D;1表示本次数据流的序号为1，Ack&#x3D;1表示客户端期望服务端下一次发送的数据流的序号为1。len&#x3D;0，</p>
<p>说明没有数据传输到服务端。</p>
<p>第二次”挥手”如下图所示</p>
<p><img src="/images/1572268040838.png" alt="1572268040838"> </p>
<p>在第二次”挥手”时,服务端向客户端发送标志位ACK,Seq&#x3D;1代表的正是客户端想看的Ack&#x3D;1。Ack&#x3D;2表示服务端期望下一次客户端发送的数据流的序号为2。len&#x3D;0,说明没有数据传输到客户端。</p>
<p>第三次”挥手”如下图所示</p>
<p><img src="/images/1572268314942.png" alt="1572268314942"> </p>
<p>在第三次”挥手”时,服务端向客户端发送标志位FIN ACK,告知客户端服务端关闭了。Seq&#x3D;1代表的正是客户端想看的Ack&#x3D;1。Ack&#x3D;2表示服务端期望下一次客户端发送的数据流的序号为2。</p>
<p>len&#x3D;0,说明没有数据传输到客户端。</p>
<p>第四次”挥手”如下图所示</p>
<p><img src="/images/1572268566105.png" alt="1572268566105"> </p>
<p>在第四次”挥手”时,客户端向服务端发送标志位ACK，告知服务端客户端已经收到服务端关闭信息。Seq&#x3D;2代表的正是服务端想看的Ack&#x3D;2，ACK&#x3D;2表示客户端期望下一次服务端发送的数据流的序</p>
<p>号为2。</p>
<p>连接断开的过程总结：</p>
<img src="images/1572269671875.png" alt="1572269671875" style="zoom: 33%;" />   

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>简述日志和输出语句的区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：区别如下所示： </span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20220214234751999.png" alt="image-20220214234751999"> </p>
<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握枚举的定义，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：某商场的付款类型有三种：自费、免费、会员权益。在系统中进行记录的时候，往往是通过三个标号进行表示：10131001、10131002、10131003。在给用户进行数据展示的时候，</p>
<p>需要展示标号所对应的中文含义。现通过程序模拟上述需求，如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108135342411.png" alt="image-20220108135342411"></th>
</tr>
</thead>
</table>
<p>上述实现方式存在的弊端：代码看起来比较繁琐，可读性较差，并且不利于后期代码的维护。</p>
<p><strong>需求描述</strong>：现需要使用枚举对上述程序进行优化。程序的执行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108142138437.png" alt="image-20220108142138437"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、定义一个枚举类</p>
<p>2、在枚举类中定义三个枚举项(CHARGE_TYPE_CHARGED、CHARGE_TYPE_FREE、CHARGE_TYPE_MEMBER_RIGHTS)</p>
<p>3、在该枚举类中定义两个属性分别表示标号和付款类型的名称</p>
<p>4、通过构造方法完成属性的初始化</p>
<p>5、定义一个静态方法：根据标号获取付款名称</p>
<p>6、使用枚举优化上述的if…else代码</p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义付款类型的枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ChargeType</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义枚举项</span></span><br><span class="line">    CHARGE_TYPE_CHARGED(<span class="number">10131001</span> , <span class="string">&quot;自费&quot;</span>) , CHARGE_TYPE_FREE(<span class="number">10131002</span> , <span class="string">&quot;免费&quot;</span>) , CHARGE_TYPE_MEMBER_RIGHTS(<span class="number">10131003</span> , <span class="string">&quot;会员权益&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Integer code ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义构造方法完成成员变量的初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ChargeType</span><span class="params">(Integer code , String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code ;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据标号获取对应的付款方式名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTypeName</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的枚举项</span></span><br><span class="line">        ChargeType[] chargeTypes = ChargeType.values();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历枚举项的数组</span></span><br><span class="line">        <span class="keyword">for</span>(ChargeType chargeType : chargeTypes) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (chargeType.code.equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> chargeType.name ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10131001: 自费 , 10131002: 免费 , 10131003: 会员权益</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in) ;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入对应的付款方式标号: &quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出对应的付款类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> ChargeType.getTypeName(code);</span><br><span class="line">System.out.println(typeName);</span><br></pre></td></tr></table></figure>



<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握TCP协议通讯代码书写，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：使用TCP协议通讯可以在两个进程之间完成数据的传输，如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228132005735.png" alt="image-20211228132005735"></th>
</tr>
</thead>
</table>
<p>可以在接收数据这一端创建一个ServerSocket对象，在发送端创建Socket对象。在进行数据传输的时候是先建立连接形成连接通道，然后实现数据的传输。</p>
<p>这种方式存在一个弊端：两个进程之间的耦合度太高了(假设接收端的ip地址发生了改变此时发送端的代码也需要进行改动)，现需要对上述的程序进行优化以降低两个进程之间的耦合度。</p>
<p>优化的思想：就是在两个进程之间添加一个中间程序，此时在进行数据传输的时候两个进程只需要和中间程序进行交互即可。</p>
<p>如下图所示：</p>
<p><img src="/images/image-20211228133036424.png" alt="image-20211228133036424">  </p>
<p><strong>需求描述</strong>：发送端可以将数据发给中间程序(Broker),接收端可以从中间程序(Broker)中获取数据。其中的发送端也可以将其称之为生产者，接收端可以将其称之为消费者。Broker程序在素材文件</p>
<p>中已经提供(brokerserver.jar)。现需要开发生产者程序和消费程序借助于Broker程序完成数据的传输。案例实现效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228135254307.png" alt="image-20211228135254307"></th>
<th><img src="/images/image-20211228140243299.png" alt="image-20211228140243299"></th>
</tr>
</thead>
</table>
<p>生产者键盘录入完数据以后，消费者获取到数据在控制台进行输出。</p>
<p><strong>实现提示</strong>：</p>
<p>1、先通过<code>java -jar brokerserver.jar</code>命令启动中间程序，如下图所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20211228140539195.png" alt="image-20211228140539195"></th>
</tr>
</thead>
</table>
<p>中间程序对外提供的访问端口为：5672</p>
<p>2、生产者程序和消费者程序只需要创建Socket对象和Broker程序进行连接即可</p>
<p>3、为了区分到底是生产者程序还是消费者程序，在启动程序的时候生产者程序启动需要发送一个字符串：<strong>PRODUCER</strong> 给Broker程序; 消费者程序需要发送一个字符串：<strong>CONSUMER</strong> 给Broker</p>
<p>程序</p>
<p>4、先启动消费者程序再启动生产者程序进行测试</p>
<p>5、发送数据的时候每一条数据都需要携带换行符</p>
<p><strong>代码实现</strong>：</p>
<p>①生产者代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span> , <span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字节输出流对象并将其转换成高效的字符输出流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送PRODUCER数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;PRODUCER&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 键盘不断录入数据进行业务数据发送</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in) ;</span><br><span class="line">            System.out.print(<span class="string">&quot;请您输入要发送的数据：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②消费者代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span> , <span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字节输出流对象并将其转换成高效的字符输出流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送PRODUCER数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;CONSUMER&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取字节输入流对象，并且将其转换成高效的字符输入流</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream())) ;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">            <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day15作业</title>
    <url>/2022/08/03/%E7%AC%AC15%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day15作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>简述类的加载过程？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答: 一个类被加载到虚拟机中需要经过如下几个过程：加载，验证，准备，解析和初始化。其中验证、准备、解析统称之为链接。如下图所示：</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><img src="/images/image-20220104141459687.png" alt="image-20220104141459687"></th>
</tr>
</thead>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">加载：”加载“是”类加载“过程的一个阶段，在加载阶段虚拟机需要完成以下<span class="number">3</span>件事情：</span><br><span class="line">	① 通过一个类的全限定名来获取定义此类的二进制字节流</span><br><span class="line">	② 将这个字节流所代表的静态存储结构转化为运行时数据结构</span><br><span class="line">	③ 在内存中生成一个代表这个类的java.lang.Class对象，任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</span><br><span class="line">验证：验证是链接阶段的第一步，这一阶段的目的是为了确保Class文件字节流中包含的信息符号当前虚拟机的要求，并且不会危害虚拟机自身安全</span><br><span class="line">准备：负责为类的类变量（被<span class="keyword">static</span>修饰的变量）分配内存，并设置默认初始化值</span><br><span class="line">解析：将类的二进制数据流中的符号引用替换为直接引用</span><br><span class="line">初始化：则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。比如静态成员变量：<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">23</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>简述(JDK8)类加载器的分类以及每一种类加载器所加载的类？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 启动类加载器（BootStrap ClassLoader）  ：它是虚拟机的内置类加载器，通过表示为null，用来加载 %JAVA_HOME%/jre/lib下的类, 如rt.jar中的class文件。</span><br><span class="line">② 扩展类加载器（Extension Classloader）  ：它是平台类加载器； 用来加载 %JAVA_HOME%/jre/lib/ext 中的class文件。</span><br><span class="line">③ 系统类加载器（AppClassLoader）         ：它被称为应用程序类加载器， 它负责加载用户类路径上所指定的类库，一般情况下这个就是程序中默认的类加载器</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>如下程序：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220102185610674.png" alt="image-20220102185610674"></th>
</tr>
</thead>
</table>
<p>上述程序执行完毕在控制台输出如下错误内容：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220102185712937.png" alt="image-20220102185712937"></th>
</tr>
</thead>
</table>
<p>请分析出现该错误的原因是什么？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">当使用String类的时候，就需要将这个String类加载器到JVM中。系统类加载器先获取到加载这个类的请求，然后根据类加载器的双亲委派机制，系统类加载器会委托父类加载器(扩展内加载器)进行加载，扩展类加载器此时会委托其父类加载器(引导类加载器)进行加载，因为类加载器获取到这个请求以后，就开始从自己所负载的加载范围查找该类进行加载，由于上述程序所定义的String类和jdk中所提供的String类是同名同包的。因此引导类加载器就将JDK中的String类进行了加载，那么在Jdk中所提供的String类中是没有main方法的，因此控制台输出找不到main方法。</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>请分析如下程序在控制台输出的结果并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220104141129770.png" alt="image-20220104141129770"></th>
</tr>
</thead>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 输出结果：false ， true</span><br><span class="line">② 原因说明：决定一个类在JVM中的唯一性是由其类加载器和类的全限定名一同决定的。clazz1获取到的字节码文件对象是通过自定义的类加载器加载的，而clazz2和clazz3是通过系统类加载器(应用类加载器)加载的。因此在控制台输出的内容为：false ，true</span><br><span class="line"></span><br><span class="line">验证代码如下所示：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过匿名内部类的方式创建一个ClassLoader对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从Classpath路径中读取当前要加载的类名称相同的class文件数据</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> name.substring(name.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> getClass().getResourceAsStream(fileName);</span><br><span class="line">                    <span class="keyword">if</span> (is == <span class="literal">null</span>) &#123;  <span class="comment">// 如果不存在对应的class文件，调用父类加载器完成类的加载</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 存在就读取字节码文件数据到字节数组中</span></span><br><span class="line">                    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);  <span class="comment">// 调用父类的defineClass方法将字节数组加载到JVM中</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用上述的类加载器完成类的加载</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;com.itheima.reflect.domain.Hello&quot;</span>);</span><br><span class="line">        System.out.println(clazz1.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Hello类的字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Hello.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.reflect.domain.Hello&quot;</span>);</span><br><span class="line">        System.out.println(clazz2.getClassLoader());</span><br><span class="line">        System.out.println(clazz3.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较Class对象是否相等</span></span><br><span class="line">        System.out.println(clazz1 == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出结果为：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220104143841892.png" alt="image-20220104143841892"></th>
</tr>
</thead>
</table>
<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>简述您对反射的理解以及使用反射的思想步骤？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 反射的理解：反射的就是使用类的另外一种方式，通过这种方式使用类可以大大的提高程序的灵活性和后期的维护性</span><br><span class="line">② 使用反射的思想步骤：</span><br><span class="line">	1、获取指定的类的字节码文件对象</span><br><span class="line">	2、调用字节码文件对象的方法获取构造方法对象(Constructor)、成员变量对象(Field)、成员方法对象(Method)</span><br><span class="line">	3、调用构造方法对象的方法创建对象/调用成员变量对象的方法获取成员变量的值或者给成员变量赋值/调用成员方法对象的方法执行该方法</span><br></pre></td></tr></table></figure>

<h2 id="1-6-简答题六"><a href="#1-6-简答题六" class="headerlink" title="1.6 简答题六"></a>1.6 简答题六</h2><p>简述获取一个类的字节码文件对象存在哪几种方式？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 使用类的静态class属性来获取该类对应的Class对象</span><br><span class="line">② 调用对象的getClass()方法，返回该对象所属类对应的Class对象，该方法是Object类中的方法，所有的Java对象都可以调用该方法</span><br><span class="line">③ 使用Class类中的静态方法forName(String className)，方法参数表示的是类的全限定名（带包名的类名）</span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握反射代码书写，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：Java语言是面向对象的语言。要使用一个类，首先就需要创建类的对象，然后才可以调用类中的相关方法。但是如果每一次要使用这个类的时候都去创建一个全新的对象，那么就比较</p>
<p>消耗内存(每new一个对象都会在堆内存中开辟新的内存空间)。因此需要考虑对这一部分的代码进行优化，优化的思想：在程序启动的时候，创建一个对象，并且将这个对象存储到一个容器中，后</p>
<p>期要使用该类直接从容器中进行对象的获取即可。</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220103182548428.png" alt="image-20220103182548428"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：在素材中reflect项目中的指定位置补全代码，使程序Entry可以正常运行。程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220104095445933.png" alt="image-20220104095445933"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、ClasspathApplicationContext构造方法</p>
<p>​	① 读取classpath路径下的applicationContext.properties文件中的内容到Properties集合中</p>
<p>​	② 遍历集合通过反射创建对应类的对象存储到beans集合中</p>
<p>3、getBean方法：遍历beans集合获取value的Class类型和传入的Class类型进行比对，如果相等直接返回该对象</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;reflect》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握自定义类加载器的代码书写，理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：”热加载”就是在不重启程序的情况下，让修改的代码可以立即生效。这样就可以大大的提高程序的测试效率。实现原理：当字节码文件修改了以后，重新加载该字节码文件到Jvm中。一</p>
<p>般情况下，类的加载都是由系统自带的类加载器完成，且对于同一个全限定名的java类，只能被加载一次，而且很难被卸载。可以使用自定义的 ClassLoader 替换系统的加载器，创建一个新的 </p>
<p>ClassLoader，再用它加载 Class，得到的 Class 对象就是新的（因为不是同一个类加载器），再用该 Class 对象创建一个实例，从而实现动态更新。</p>
<p><strong>需求描述</strong>：在素材中的classload项目中指定位置补全代码，使程序Entry可以正常运行。程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220104120912842.png" alt="image-20220104120912842"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、开启两个线程</p>
<ul>
<li>线程1：每间隔1秒对要热加载的源文件进行编译(已经实现)</li>
<li>线程2：每间隔1秒使用自定义类加载器加载需要热加载的class文件(部分代码已经实现)</li>
</ul>
<p>2、通过自定义加载器加载指定的class文件到JVM中，并得到Class对象，通过反射执行所有的方法(只考虑无参数无返回值的方法)</p>
<p>3、自定义类加载器</p>
<ul>
<li>继承ClassLoader类</li>
<li>重写loadClass方法<ul>
<li>判断是否是自定义的类，如果不是调用父类加载器的loadClass方法进行进行加载，如果是执行下一步操作</li>
<li>通过流读取class文件数据，得到字节数组</li>
<li>调用父类的defineClass方法将字节数组加载到JVM中</li>
</ul>
</li>
</ul>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;classload》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>day16作业</title>
    <url>/2022/08/03/%E7%AC%AC16%E5%A4%A9%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>day16作业</p>
<span id="more"></span>

<h1 id="1-简答题"><a href="#1-简答题" class="headerlink" title="1 简答题"></a>1 简答题</h1><h2 id="1-1-简答题一"><a href="#1-1-简答题一" class="headerlink" title="1.1 简答题一"></a>1.1 简答题一</h2><p>指出下述xml中标签出现的语法错误的位置并且说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108173625775.png" alt="image-20220108173625775"></th>
</tr>
</thead>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① &lt;student id = 1&gt;错误。	 原因：属性值必须用引号引起来</span><br><span class="line">② &lt;gender value=&quot;男&quot;&gt;错误。 原因：标签没有结束标记</span><br></pre></td></tr></table></figure>

<h2 id="1-2-简答题二"><a href="#1-2-简答题二" class="headerlink" title="1.2 简答题二"></a>1.2 简答题二</h2><p>指出下述xml文件出现的语法错误并说明原因？</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108174449458.png" alt="image-20220108174449458"></th>
</tr>
</thead>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">① 缺少文档声明。	原因：一个xml文件中需要存在文档声明，文档声明必须是第一行第一列：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes”?&gt;</span><br><span class="line">② 存在多个根标签。  原因：一个xml文档必须存在一个根标签，有且只能有一个</span><br></pre></td></tr></table></figure>

<h2 id="1-3-简答题三"><a href="#1-3-简答题三" class="headerlink" title="1.3 简答题三"></a>1.3 简答题三</h2><p>简述什么是xml文档约束以及DTD约束和schema约束的区别？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">xml文档约束：就是用来限定xml文件中可使用的标签以及属性。</span><br><span class="line">DTD约束和schema约束的区别：</span><br><span class="line">	① schema约束文件也是一个xml文件，符合xml的语法，这个文件的后缀名.xsd。dtd约束文件的后缀名往往是dtd。</span><br><span class="line">	② 一个xml中可以引用多个schema约束文件，多个schema使用名称空间区分（名称空间类似于java包名）</span><br><span class="line">	③ dtd里面元素类型的取值比较单一常见的是PCDATA类型，但是在schema里面可以支持很多个数据类型</span><br><span class="line">	④ schema 语法更加的复杂</span><br></pre></td></tr></table></figure>

<h2 id="1-4-简答题四"><a href="#1-4-简答题四" class="headerlink" title="1.4 简答题四"></a>1.4 简答题四</h2><p>如下程序:</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108113051352.png" alt="image-20220108113051352"></th>
</tr>
</thead>
</table>
<p>问题：</p>
<p>① 请分析上述程序在控制台输出的结果并说明原因？</p>
<p>② 如果要限定Anno1注解只能使用在方法上怎么处理？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line">结果说明：上述程序执行完毕以后在控制台没有任何的输出</span><br><span class="line">结果分析：因为Anno1注解默认的存活时期为源码阶段，而反射是运行阶段的机制，因此在运行阶段获取不到方法上所标注的注解，所以show方法就没有执行。</span><br><span class="line">限定Anno1只能使用在方法上：使用JDK提供的元注解<span class="meta">@Target(ElementType.METHOD)</span>对Anno1注解进行标注</span><br></pre></td></tr></table></figure>

<h2 id="1-5-简答题五"><a href="#1-5-简答题五" class="headerlink" title="1.5 简答题五"></a>1.5 简答题五</h2><p>junit单元测试工具中的@Before和@After注解标注的方法在什么时候进行执行？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">答：</span><br><span class="line"><span class="number">1</span>、被<span class="meta">@Before</span>标注的方法在被<span class="meta">@Test</span>标注的方法执行之前进行执行</span><br><span class="line"><span class="number">2</span>、被<span class="meta">@After</span>标注的方法在被<span class="meta">@Test</span>标注的方法执行之后进行执行    </span><br></pre></td></tr></table></figure>

<h1 id="2-编程题"><a href="#2-编程题" class="headerlink" title="2 编程题"></a>2 编程题</h1><h2 id="2-1-编程题目一"><a href="#2-1-编程题目一" class="headerlink" title="2.1 编程题目一"></a>2.1 编程题目一</h2><p><strong>训练目标</strong>：掌握xml解析代码的书写，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：Java语言是面向对象的语言。要使用一个类，首先就需要创建类的对象，然后才可以调用类中的相关方法。但是如果每一次要使用这个类的时候都去创建一个全新的对象，那么就比较</p>
<p>消耗内存(每new一个对象都会在堆内存中开辟新的内存空间)。因此需要考虑对这一部分的代码进行优化，优化的思想：在程序启动的时候，创建一个对象，并且将这个对象存储到一个容器中，后</p>
<p>期要使用该类直接从容器中进行对象的获取即可。</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220103182548428.png" alt="image-20220103182548428"></th>
</tr>
</thead>
</table>
<p><strong>需求描述</strong>：在素材中xml项目中的指定位置补全代码，使程序Entry可以正常运行。程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220104095445933.png" alt="image-20220104095445933"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、ClasspathApplicationContext构造方法</p>
<p>​	① 读取classpath路径下的applicationContext.xml文件，并使用dom4j解析该xml文件的内容</p>
<p>​	② 通过反射创建指定类的对象，将其存储到beans集合中，键就是<bean>标签name属性的值，值就class属性的对应的对象。</p>
<p>3、getBean方法：遍历beans集合获取value的Class类型和传入的Class类型进行比对，如果相等直接返回该对象</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;xml》</p>
<h2 id="2-2-编程题目二"><a href="#2-2-编程题目二" class="headerlink" title="2.2 编程题目二"></a>2.2 编程题目二</h2><p><strong>训练目标</strong>：掌握自定义注解，以及理解其在实际开发中的应用</p>
<p><strong>需求背景</strong>：在编程题目二中，要把系统中使用的类的对象加入到对象容器中，在每一次编写完类以后，都需要在applicationContext.xml文件中通过<bean>标签来配置类的相关信息。这样就会影</p>
<p>响开发效率，并且当xml文件中编写的<bean>标签越来越多了，那么此时xml文件就变的相对比较臃肿，不利于后期代码的维护。为了提高开发效率，并且提高后期代码的维护性，我们可以使用</p>
<p>自定义注解快速的将类的对象加入到对象容器中。并且如果该类中定义了对应的成员变量，也可以通过注解快速的给成员变量赋值。</p>
<p><strong>需求描述</strong>：在素材中annotation项目中的指定位置补全代码，使程序Entry可以正常运行。程序的运行效果如下所示：</p>
<table>
<thead>
<tr>
<th><img src="/images/image-20220108100808306.png" alt="image-20220108100808306"></th>
</tr>
</thead>
</table>
<p><strong>实现提示</strong>：</p>
<p>1、在@Component和@Autowired注解上指定JDK提供的元注解标注该注解使用位置以及存活时期</p>
<p>2、在OrderService和UserService类上以及OrderService的成员变量(userService)上使用上述自定义注解</p>
<p>3、createBeanProcesser方法代码实现思路：读取xml配置文件并解析，获取注解扫描路径，通过反射创建该路径下的被@Component注解标注的类的对象并且将其加入到对象容器中</p>
<p>4、initBeanProcesses方法代码实现思路：遍历beans中的对象，获取被@Autowired注解的标注成员变量，然后从beans容器中获取指定的对象，为该成员变量赋值</p>
<p><strong>代码实现</strong>：见《答案&#x2F;代码&#x2F;annotation》</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
</search>
